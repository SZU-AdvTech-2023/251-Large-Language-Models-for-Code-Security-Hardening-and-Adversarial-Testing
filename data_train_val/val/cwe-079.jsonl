{"func_name": "PeerListWidget::updatePeer", "func_src_before": "void PeerListWidget::updatePeer(const QString &ip, BitTorrent::TorrentHandle *const torrent, const BitTorrent::PeerInfo &peer)\n{\n    QStandardItem *item = m_peerItems.value(ip);\n    int row = item->row();\n    if (m_resolveCountries) {\n        const QIcon ico = GuiIconProvider::instance()->getFlagIcon(peer.country());\n        if (!ico.isNull()) {\n            m_listModel->setData(m_listModel->index(row, PeerListDelegate::COUNTRY), ico, Qt::DecorationRole);\n            const QString countryName = Net::GeoIPManager::CountryName(peer.country());\n            m_listModel->setData(m_listModel->index(row, PeerListDelegate::COUNTRY), countryName, Qt::ToolTipRole);\n            m_missingFlags.remove(ip);\n        }\n    }\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::CONNECTION), peer.connectionType());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::PORT), peer.address().port);\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flags());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flagsDescription(), Qt::ToolTipRole);\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), peer.client());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::PROGRESS), peer.progress());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWN_SPEED), peer.payloadDownSpeed());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::UP_SPEED), peer.payloadUpSpeed());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::TOT_DOWN), peer.totalDownload());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::TOT_UP), peer.totalUpload());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::RELEVANCE), peer.relevance());\n    QStringList downloadingFiles(torrent->info().filesForPiece(peer.downloadingPieceIndex()));\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWNLOADING_PIECE), downloadingFiles.join(QLatin1String(\";\")));\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWNLOADING_PIECE), downloadingFiles.join(QLatin1String(\"\\n\")), Qt::ToolTipRole);\n}", "func_src_after": "void PeerListWidget::updatePeer(const QString &ip, BitTorrent::TorrentHandle *const torrent, const BitTorrent::PeerInfo &peer)\n{\n    QStandardItem *item = m_peerItems.value(ip);\n    int row = item->row();\n    if (m_resolveCountries) {\n        const QIcon ico = GuiIconProvider::instance()->getFlagIcon(peer.country());\n        if (!ico.isNull()) {\n            m_listModel->setData(m_listModel->index(row, PeerListDelegate::COUNTRY), ico, Qt::DecorationRole);\n            const QString countryName = Net::GeoIPManager::CountryName(peer.country());\n            m_listModel->setData(m_listModel->index(row, PeerListDelegate::COUNTRY), countryName, Qt::ToolTipRole);\n            m_missingFlags.remove(ip);\n        }\n    }\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::CONNECTION), peer.connectionType());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::PORT), peer.address().port);\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flags());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flagsDescription(), Qt::ToolTipRole);\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), Utils::String::toHtmlEscaped(peer.client()));\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::PROGRESS), peer.progress());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWN_SPEED), peer.payloadDownSpeed());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::UP_SPEED), peer.payloadUpSpeed());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::TOT_DOWN), peer.totalDownload());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::TOT_UP), peer.totalUpload());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::RELEVANCE), peer.relevance());\n    QStringList downloadingFiles(torrent->info().filesForPiece(peer.downloadingPieceIndex()));\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWNLOADING_PIECE), downloadingFiles.join(QLatin1String(\";\")));\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWNLOADING_PIECE), downloadingFiles.join(QLatin1String(\"\\n\")), Qt::ToolTipRole);\n}", "line_changes": {"deleted": [{"line_no": 18, "char_start": 1126, "char_end": 1218, "line": "    m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), peer.client());\n"}], "added": [{"line_no": 18, "char_start": 1126, "char_end": 1248, "line": "    m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), Utils::String::toHtmlEscaped(peer.client()));\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 1202, "char_end": 1231, "chars": "Utils::String::toHtmlEscaped("}, {"char_start": 1243, "char_end": 1244, "chars": ")"}]}, "commit_link": "github.com/qbittorrent/qBittorrent/commit/6ca3e4f094da0a0017cb2d483ec1db6176bb0b16", "file_name": "src/gui/properties/peerlistwidget.cpp", "vul_type": "cwe-079"}
{"func_name": "redirect", "func_src_before": "  def redirect(self, url, **kwargs):\n    \"\"\"Explicitly converts url to 'str', because webapp2.RequestHandler.redirect\n    strongly requires 'str' but url might be an unicode string.\"\"\"\n    super(Handler, self).redirect(str(url), **kwargs)", "func_src_after": "  def redirect(self, url, **kwargs):\n    \"\"\"Explicitly converts url to 'str', because webapp2.RequestHandler.redirect\n    strongly requires 'str' but url might be an unicode string.\"\"\"\n    url = str(url)\n    check_redirect_url(url)\n    super(Handler, self).redirect(url, **kwargs)", "line_changes": {"deleted": [{"line_no": 4, "char_start": 185, "char_end": 238, "line": "    super(Handler, self).redirect(str(url), **kwargs)\n"}], "added": [{"line_no": 4, "char_start": 185, "char_end": 204, "line": "    url = str(url)\n"}, {"line_no": 5, "char_start": 204, "char_end": 232, "line": "    check_redirect_url(url)\n"}, {"line_no": 6, "char_start": 232, "char_end": 280, "line": "    super(Handler, self).redirect(url, **kwargs)\n"}]}, "char_changes": {"deleted": [{"char_start": 219, "char_end": 223, "chars": "str("}, {"char_start": 226, "char_end": 227, "chars": ")"}], "added": [{"char_start": 189, "char_end": 236, "chars": "url = str(url)\n    check_redirect_url(url)\n    "}]}, "commit_link": "github.com/google/clusterfuzz/commit/3d66c1146550eecd4e34d47332a8616b435a21fe", "file_name": "src/appengine/handlers/base_handler.py", "vul_type": "cwe-079"}
{"func_name": "get_value", "func_src_before": "    def get_value(self):\n        if self.column.render_function:\n            # We don't want to escape our html\n            return self.column.render_function(self.object)\n\n        field = getattr(self.object, self.column.field_name) if self.column.field_name else None\n        if type(self.object) == dict:\n            value = self.object.get(self.column.field_name)\n        elif callable(field):\n            value = field() if getattr(field, 'do_not_call_in_templates', False) else field\n        else:\n            display_function = getattr(self.object, 'get_%s_display' % self.column.field_name, False)\n            value = display_function() if display_function else field\n\n        return escape(value)", "func_src_after": "    def get_value(self):\n        field = getattr(self.object, self.column.field_name) if self.column.field_name else None\n        if self.column.render_function:\n            template = self.column.render_function(self.object)\n            if not self.is_template_instance(template):\n                raise SmartListException(\n                    'Your render_function {} should return django.template.Template or django.template.backends.django.Template object instead of {}'.format(\n                        self.column.render_function.__name__,\n                        type(template),\n                    )\n                )\n            value = template.render()\n        elif type(self.object) == dict:\n            value = self.object.get(self.column.field_name)\n        elif callable(field):\n            value = field() if getattr(field, 'do_not_call_in_templates', False) else field\n        else:\n            display_function = getattr(self.object, 'get_%s_display' % self.column.field_name, False)\n            value = display_function() if display_function else field\n\n        return value", "line_changes": {"deleted": [{"line_no": 2, "char_start": 25, "char_end": 65, "line": "        if self.column.render_function:\n"}, {"line_no": 4, "char_start": 112, "char_end": 172, "line": "            return self.column.render_function(self.object)\n"}, {"line_no": 5, "char_start": 172, "char_end": 173, "line": "\n"}, {"line_no": 7, "char_start": 270, "char_end": 308, "line": "        if type(self.object) == dict:\n"}, {"line_no": 15, "char_start": 677, "char_end": 705, "line": "        return escape(value)\n"}], "added": [{"line_no": 3, "char_start": 122, "char_end": 162, "line": "        if self.column.render_function:\n"}, {"line_no": 4, "char_start": 162, "char_end": 226, "line": "            template = self.column.render_function(self.object)\n"}, {"line_no": 5, "char_start": 226, "char_end": 282, "line": "            if not self.is_template_instance(template):\n"}, {"line_no": 6, "char_start": 282, "char_end": 324, "line": "                raise SmartListException(\n"}, {"line_no": 7, "char_start": 324, "char_end": 482, "line": "                    'Your render_function {} should return django.template.Template or django.template.backends.django.Template object instead of {}'.format(\n"}, {"line_no": 8, "char_start": 482, "char_end": 544, "line": "                        self.column.render_function.__name__,\n"}, {"line_no": 9, "char_start": 544, "char_end": 584, "line": "                        type(template),\n"}, {"line_no": 10, "char_start": 584, "char_end": 606, "line": "                    )\n"}, {"line_no": 11, "char_start": 606, "char_end": 624, "line": "                )\n"}, {"line_no": 12, "char_start": 624, "char_end": 662, "line": "            value = template.render()\n"}, {"line_no": 13, "char_start": 662, "char_end": 702, "line": "        elif type(self.object) == dict:\n"}, {"line_no": 21, "char_start": 1071, "char_end": 1091, "line": "        return value\n"}]}, "char_changes": {"deleted": [{"char_start": 48, "char_end": 49, "chars": "r"}, {"char_start": 51, "char_end": 52, "chars": "d"}, {"char_start": 53, "char_end": 55, "chars": "r_"}, {"char_start": 58, "char_end": 60, "chars": "ct"}, {"char_start": 61, "char_end": 62, "chars": "o"}, {"char_start": 63, "char_end": 67, "chars": ":\n  "}, {"char_start": 77, "char_end": 78, "chars": "#"}, {"char_start": 79, "char_end": 80, "chars": "W"}, {"char_start": 81, "char_end": 83, "chars": " d"}, {"char_start": 85, "char_end": 90, "chars": "'t wa"}, {"char_start": 91, "char_end": 96, "chars": "t to "}, {"char_start": 97, "char_end": 98, "chars": "s"}, {"char_start": 99, "char_end": 103, "chars": "ape "}, {"char_start": 104, "char_end": 111, "chars": "ur html"}, {"char_start": 124, "char_end": 125, "chars": "r"}, {"char_start": 127, "char_end": 130, "chars": "urn"}, {"char_start": 172, "char_end": 173, "chars": "\n"}, {"char_start": 185, "char_end": 190, "chars": "d = g"}, {"char_start": 196, "char_end": 197, "chars": "("}, {"char_start": 199, "char_end": 205, "chars": "lf.obj"}, {"char_start": 206, "char_end": 207, "chars": "c"}, {"char_start": 208, "char_end": 209, "chars": ","}, {"char_start": 210, "char_end": 211, "chars": "s"}, {"char_start": 212, "char_end": 213, "chars": "l"}, {"char_start": 214, "char_end": 215, "chars": "."}, {"char_start": 219, "char_end": 220, "chars": "m"}, {"char_start": 222, "char_end": 224, "chars": "fi"}, {"char_start": 227, "char_end": 228, "chars": "_"}, {"char_start": 232, "char_end": 233, "chars": ")"}, {"char_start": 251, "char_end": 254, "chars": "eld"}, {"char_start": 262, "char_end": 263, "chars": "s"}, {"char_start": 265, "char_end": 267, "chars": "No"}, {"char_start": 692, "char_end": 699, "chars": "escape("}, {"char_start": 704, "char_end": 705, "chars": ")"}], "added": [{"char_start": 33, "char_end": 34, "chars": "f"}, {"char_start": 35, "char_end": 52, "chars": "eld = getattr(sel"}, {"char_start": 53, "char_end": 61, "chars": ".object,"}, {"char_start": 74, "char_end": 76, "chars": "fi"}, {"char_start": 77, "char_end": 78, "chars": "l"}, {"char_start": 80, "char_end": 87, "chars": "name) i"}, {"char_start": 88, "char_end": 97, "chars": " self.col"}, {"char_start": 98, "char_end": 99, "chars": "m"}, {"char_start": 100, "char_end": 102, "chars": ".f"}, {"char_start": 103, "char_end": 118, "chars": "eld_name else N"}, {"char_start": 120, "char_end": 121, "chars": "e"}, {"char_start": 130, "char_end": 132, "chars": "if"}, {"char_start": 133, "char_end": 134, "chars": "s"}, {"char_start": 135, "char_end": 139, "chars": "lf.c"}, {"char_start": 140, "char_end": 143, "chars": "lum"}, {"char_start": 144, "char_end": 146, "chars": ".r"}, {"char_start": 147, "char_end": 149, "chars": "nd"}, {"char_start": 150, "char_end": 153, "chars": "r_f"}, {"char_start": 154, "char_end": 156, "chars": "nc"}, {"char_start": 157, "char_end": 161, "chars": "ion:"}, {"char_start": 174, "char_end": 175, "chars": "t"}, {"char_start": 176, "char_end": 180, "chars": "mpla"}, {"char_start": 181, "char_end": 184, "chars": "e ="}, {"char_start": 226, "char_end": 230, "chars": "    "}, {"char_start": 238, "char_end": 239, "chars": "i"}, {"char_start": 240, "char_end": 250, "chars": " not self."}, {"char_start": 251, "char_end": 254, "chars": "s_t"}, {"char_start": 255, "char_end": 257, "chars": "mp"}, {"char_start": 258, "char_end": 260, "chars": "at"}, {"char_start": 261, "char_end": 265, "chars": "_ins"}, {"char_start": 267, "char_end": 271, "chars": "nce("}, {"char_start": 272, "char_end": 277, "chars": "empla"}, {"char_start": 278, "char_end": 298, "chars": "e):\n                "}, {"char_start": 299, "char_end": 301, "chars": "ai"}, {"char_start": 303, "char_end": 346, "chars": " SmartListException(\n                    'Y"}, {"char_start": 347, "char_end": 351, "chars": "ur r"}, {"char_start": 352, "char_end": 360, "chars": "nder_fun"}, {"char_start": 362, "char_end": 368, "chars": "ion {}"}, {"char_start": 370, "char_end": 377, "chars": "hould r"}, {"char_start": 378, "char_end": 388, "chars": "turn djang"}, {"char_start": 389, "char_end": 394, "chars": ".temp"}, {"char_start": 395, "char_end": 401, "chars": "ate.Te"}, {"char_start": 402, "char_end": 414, "chars": "plate or dja"}, {"char_start": 415, "char_end": 417, "chars": "go"}, {"char_start": 418, "char_end": 419, "chars": "t"}, {"char_start": 420, "char_end": 422, "chars": "mp"}, {"char_start": 423, "char_end": 433, "chars": "ate.backen"}, {"char_start": 434, "char_end": 439, "chars": "s.dja"}, {"char_start": 440, "char_end": 445, "chars": "go.Te"}, {"char_start": 446, "char_end": 450, "chars": "plat"}, {"char_start": 451, "char_end": 458, "chars": " object"}, {"char_start": 460, "char_end": 468, "chars": "nstead o"}, {"char_start": 470, "char_end": 506, "chars": "{}'.format(\n                        "}, {"char_start": 518, "char_end": 519, "chars": "r"}, {"char_start": 520, "char_end": 521, "chars": "n"}, {"char_start": 522, "char_end": 535, "chars": "er_function._"}, {"char_start": 540, "char_end": 560, "chars": "__,\n                "}, {"char_start": 561, "char_end": 574, "chars": "       type(t"}, {"char_start": 575, "char_end": 577, "chars": "mp"}, {"char_start": 578, "char_end": 580, "chars": "at"}, {"char_start": 581, "char_end": 588, "chars": "),\n    "}, {"char_start": 589, "char_end": 655, "chars": "               )\n                )\n            value = template.re"}, {"char_start": 656, "char_end": 657, "chars": "d"}, {"char_start": 658, "char_end": 661, "chars": "r()"}, {"char_start": 670, "char_end": 672, "chars": "el"}]}, "commit_link": "github.com/plecto/django-smart-lists/commit/44314e51b371e01cd9bceb2e0ed6c8d75d7f87c3", "file_name": "smart_lists/helpers.py", "vul_type": "cwe-079"}
{"func_name": "http_error_t::make_body", "func_src_before": "http_error_t::make_body (int n, const str &si, const str &aux)\n{\n  strbuf b;\n  str ldesc;\n  const str sdesc = http_status.get_desc (n, &ldesc);\n  b << \"<html>\\n\"\n    << \" <head>\\n\"\n    << \"  <title>\" << n << \" \" << sdesc << \"</title>\\n\"\n    << \" </head>\\n\"\n    << \" <body>\\n\"\n    << \" <h1>Error \" << n << \" \" << sdesc << \"</h1><br><br>\\n\"\n    ;\n  if (n == HTTP_NOT_FOUND && aux) {\n    b << \"The file <tt>\" << aux \n      << \"</tt> was not found on this server.<br><br>\\n\\n\";\n  }\n  b << \"  <hr>\\n\"\n    << \"  <i>\" << si << \"</i>\\n\"\n    << \" <br>\\n\"\n    << \" </body>\\n\"\n    << \"</html>\\n\"\n    ;\n  return b;\n}", "func_src_after": "http_error_t::make_body (int n, const str &si, const str &aux)\n{\n  strbuf b;\n  str ldesc;\n  const str sdesc = xss_escape (http_status.get_desc (n, &ldesc));\n  b << \"<html>\\n\"\n    << \" <head>\\n\"\n    << \"  <title>\" << n << \" \" << sdesc << \"</title>\\n\"\n    << \" </head>\\n\"\n    << \" <body>\\n\"\n    << \" <h1>Error \" << n << \" \" << sdesc << \"</h1><br><br>\\n\"\n    ;\n  if (n == HTTP_NOT_FOUND && aux) {\n    b << \"The file <tt>\" << xss_escape (aux)\n      << \"</tt> was not found on this server.<br><br>\\n\\n\";\n  }\n  b << \"  <hr>\\n\"\n    << \"  <i>\" << xss_escape (si) << \"</i>\\n\"\n    << \" <br>\\n\"\n    << \" </body>\\n\"\n    << \"</html>\\n\"\n    ;\n  return b;\n}", "line_changes": {"deleted": [{"line_no": 5, "char_start": 90, "char_end": 144, "line": "  const str sdesc = http_status.get_desc (n, &ldesc);\n"}, {"line_no": 14, "char_start": 381, "char_end": 414, "line": "    b << \"The file <tt>\" << aux \n"}, {"line_no": 18, "char_start": 496, "char_end": 529, "line": "    << \"  <i>\" << si << \"</i>\\n\"\n"}], "added": [{"line_no": 5, "char_start": 90, "char_end": 157, "line": "  const str sdesc = xss_escape (http_status.get_desc (n, &ldesc));\n"}, {"line_no": 14, "char_start": 394, "char_end": 439, "line": "    b << \"The file <tt>\" << xss_escape (aux)\n"}, {"line_no": 18, "char_start": 521, "char_end": 567, "line": "    << \"  <i>\" << xss_escape (si) << \"</i>\\n\"\n"}]}, "char_changes": {"deleted": [{"char_start": 412, "char_end": 413, "chars": " "}], "added": [{"char_start": 110, "char_end": 122, "chars": "xss_escape ("}, {"char_start": 153, "char_end": 154, "chars": ")"}, {"char_start": 422, "char_end": 434, "chars": "xss_escape ("}, {"char_start": 437, "char_end": 438, "chars": ")"}, {"char_start": 539, "char_end": 551, "chars": "xss_escape ("}, {"char_start": 553, "char_end": 554, "chars": ")"}]}, "commit_link": "github.com/okws/okws/commit/e9bedb644d106a043e33e1058bedd1c2c0b2e2e0", "file_name": "libahttp/err.C", "vul_type": "cwe-079"}
{"func_name": "list_editor_workflows", "func_src_before": "def list_editor_workflows(request):  \n  workflows = [d.content_object.to_dict() for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')]\n\n  return render('editor/list_editor_workflows.mako', request, {\n      'workflows_json': json.dumps(workflows)\n  })", "func_src_after": "def list_editor_workflows(request):  \n  workflows = [d.content_object.to_dict() for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')]\n\n  return render('editor/list_editor_workflows.mako', request, {\n      'workflows_json': json.dumps(workflows, cls=JSONEncoderForHTML)\n  })", "line_changes": {"deleted": [{"line_no": 5, "char_start": 225, "char_end": 271, "line": "      'workflows_json': json.dumps(workflows)\n"}], "added": [{"line_no": 5, "char_start": 225, "char_end": 295, "line": "      'workflows_json': json.dumps(workflows, cls=JSONEncoderForHTML)\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 269, "char_end": 293, "chars": ", cls=JSONEncoderForHTML"}]}, "commit_link": "github.com/gethue/hue/commit/6641c62beaa1468082e47d82da5ed758d11c7735", "file_name": "apps/oozie/src/oozie/views/editor2.py", "vul_type": "cwe-079"}
