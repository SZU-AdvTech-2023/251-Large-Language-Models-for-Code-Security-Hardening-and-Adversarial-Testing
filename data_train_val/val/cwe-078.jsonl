{"func_name": "_get_3par_host", "func_src_before": "    def _get_3par_host(self, hostname):\n        out = self._cli_run('showhost -verbose %s' % (hostname), None)\n        LOG.debug(\"OUTPUT = \\n%s\" % (pprint.pformat(out)))\n        host = {'id': None, 'name': None,\n                'domain': None,\n                'descriptors': {},\n                'iSCSIPaths': [],\n                'FCPaths': []}\n\n        if out:\n            err = out[0]\n            if err == 'no hosts listed':\n                msg = {'code': 'NON_EXISTENT_HOST',\n                       'desc': \"HOST '%s' was not found\" % hostname}\n                raise hpexceptions.HTTPNotFound(msg)\n\n            # start parsing the lines after the header line\n            for line in out[1:]:\n                if line == '':\n                    break\n                tmp = line.split(',')\n                paths = {}\n\n                LOG.debug(\"line = %s\" % (pprint.pformat(tmp)))\n                host['id'] = tmp[0]\n                host['name'] = tmp[1]\n\n                portPos = tmp[4]\n                LOG.debug(\"portPos = %s\" % (pprint.pformat(portPos)))\n                if portPos == '---':\n                    portPos = None\n                else:\n                    port = portPos.split(':')\n                    portPos = {'node': int(port[0]), 'slot': int(port[1]),\n                               'cardPort': int(port[2])}\n\n                paths['portPos'] = portPos\n\n                # If FC entry\n                if tmp[5] == 'n/a':\n                    paths['wwn'] = tmp[3]\n                    host['FCPaths'].append(paths)\n                # else iSCSI entry\n                else:\n                    paths['name'] = tmp[3]\n                    paths['ipAddr'] = tmp[5]\n                    host['iSCSIPaths'].append(paths)\n\n            # find the offset to the description stuff\n            offset = 0\n            for line in out:\n                if line[:15] == '---------- Host':\n                    break\n                else:\n                    offset += 1\n\n            info = out[offset + 2]\n            tmp = info.split(':')\n            host['domain'] = tmp[1]\n\n            info = out[offset + 4]\n            tmp = info.split(':')\n            host['descriptors']['location'] = tmp[1]\n\n            info = out[offset + 5]\n            tmp = info.split(':')\n            host['descriptors']['ipAddr'] = tmp[1]\n\n            info = out[offset + 6]\n            tmp = info.split(':')\n            host['descriptors']['os'] = tmp[1]\n\n            info = out[offset + 7]\n            tmp = info.split(':')\n            host['descriptors']['model'] = tmp[1]\n\n            info = out[offset + 8]\n            tmp = info.split(':')\n            host['descriptors']['contact'] = tmp[1]\n\n            info = out[offset + 9]\n            tmp = info.split(':')\n            host['descriptors']['comment'] = tmp[1]\n\n        return host", "func_src_after": "    def _get_3par_host(self, hostname):\n        out = self._cli_run(['showhost', '-verbose', hostname])\n        LOG.debug(\"OUTPUT = \\n%s\" % (pprint.pformat(out)))\n        host = {'id': None, 'name': None,\n                'domain': None,\n                'descriptors': {},\n                'iSCSIPaths': [],\n                'FCPaths': []}\n\n        if out:\n            err = out[0]\n            if err == 'no hosts listed':\n                msg = {'code': 'NON_EXISTENT_HOST',\n                       'desc': \"HOST '%s' was not found\" % hostname}\n                raise hpexceptions.HTTPNotFound(msg)\n\n            # start parsing the lines after the header line\n            for line in out[1:]:\n                if line == '':\n                    break\n                tmp = line.split(',')\n                paths = {}\n\n                LOG.debug(\"line = %s\" % (pprint.pformat(tmp)))\n                host['id'] = tmp[0]\n                host['name'] = tmp[1]\n\n                portPos = tmp[4]\n                LOG.debug(\"portPos = %s\" % (pprint.pformat(portPos)))\n                if portPos == '---':\n                    portPos = None\n                else:\n                    port = portPos.split(':')\n                    portPos = {'node': int(port[0]), 'slot': int(port[1]),\n                               'cardPort': int(port[2])}\n\n                paths['portPos'] = portPos\n\n                # If FC entry\n                if tmp[5] == 'n/a':\n                    paths['wwn'] = tmp[3]\n                    host['FCPaths'].append(paths)\n                # else iSCSI entry\n                else:\n                    paths['name'] = tmp[3]\n                    paths['ipAddr'] = tmp[5]\n                    host['iSCSIPaths'].append(paths)\n\n            # find the offset to the description stuff\n            offset = 0\n            for line in out:\n                if line[:15] == '---------- Host':\n                    break\n                else:\n                    offset += 1\n\n            info = out[offset + 2]\n            tmp = info.split(':')\n            host['domain'] = tmp[1]\n\n            info = out[offset + 4]\n            tmp = info.split(':')\n            host['descriptors']['location'] = tmp[1]\n\n            info = out[offset + 5]\n            tmp = info.split(':')\n            host['descriptors']['ipAddr'] = tmp[1]\n\n            info = out[offset + 6]\n            tmp = info.split(':')\n            host['descriptors']['os'] = tmp[1]\n\n            info = out[offset + 7]\n            tmp = info.split(':')\n            host['descriptors']['model'] = tmp[1]\n\n            info = out[offset + 8]\n            tmp = info.split(':')\n            host['descriptors']['contact'] = tmp[1]\n\n            info = out[offset + 9]\n            tmp = info.split(':')\n            host['descriptors']['comment'] = tmp[1]\n\n        return host", "line_changes": {"deleted": [{"line_no": 2, "char_start": 40, "char_end": 111, "line": "        out = self._cli_run('showhost -verbose %s' % (hostname), None)\n"}], "added": [{"line_no": 2, "char_start": 40, "char_end": 104, "line": "        out = self._cli_run(['showhost', '-verbose', hostname])\n"}]}, "char_changes": {"deleted": [{"char_start": 86, "char_end": 89, "chars": " %s"}, {"char_start": 90, "char_end": 92, "chars": " %"}, {"char_start": 93, "char_end": 94, "chars": "("}, {"char_start": 102, "char_end": 109, "chars": "), None"}], "added": [{"char_start": 68, "char_end": 69, "chars": "["}, {"char_start": 78, "char_end": 80, "chars": "',"}, {"char_start": 81, "char_end": 82, "chars": "'"}, {"char_start": 91, "char_end": 92, "chars": ","}, {"char_start": 101, "char_end": 102, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_common.py", "vul_type": "cwe-078"}
{"func_name": "_get_vdisk_attributes", "func_src_before": "    def _get_vdisk_attributes(self, vdisk_name):\n        \"\"\"Return vdisk attributes, or None if vdisk does not exist\n\n        Exception is raised if the information from system can not be\n        parsed/matched to a single vdisk.\n        \"\"\"\n\n        ssh_cmd = 'svcinfo lsvdisk -bytes -delim ! %s ' % vdisk_name\n        return self._execute_command_and_parse_attributes(ssh_cmd)", "func_src_after": "    def _get_vdisk_attributes(self, vdisk_name):\n        \"\"\"Return vdisk attributes, or None if vdisk does not exist\n\n        Exception is raised if the information from system can not be\n        parsed/matched to a single vdisk.\n        \"\"\"\n\n        ssh_cmd = ['svcinfo', 'lsvdisk', '-bytes', '-delim', '!', vdisk_name]\n        return self._execute_command_and_parse_attributes(ssh_cmd)", "line_changes": {"deleted": [{"line_no": 8, "char_start": 243, "char_end": 312, "line": "        ssh_cmd = 'svcinfo lsvdisk -bytes -delim ! %s ' % vdisk_name\n"}], "added": [{"line_no": 8, "char_start": 243, "char_end": 321, "line": "        ssh_cmd = ['svcinfo', 'lsvdisk', '-bytes', '-delim', '!', vdisk_name]\n"}]}, "char_changes": {"deleted": [{"char_start": 293, "char_end": 297, "chars": " %s "}, {"char_start": 298, "char_end": 300, "chars": " %"}], "added": [{"char_start": 261, "char_end": 262, "chars": "["}, {"char_start": 270, "char_end": 272, "chars": "',"}, {"char_start": 273, "char_end": 274, "chars": "'"}, {"char_start": 281, "char_end": 283, "chars": "',"}, {"char_start": 284, "char_end": 285, "chars": "'"}, {"char_start": 291, "char_end": 293, "chars": "',"}, {"char_start": 294, "char_end": 295, "chars": "'"}, {"char_start": 301, "char_end": 303, "chars": "',"}, {"char_start": 304, "char_end": 305, "chars": "'"}, {"char_start": 307, "char_end": 308, "chars": ","}, {"char_start": 319, "char_end": 320, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "git_hook", "func_src_before": "def git_hook(strict=False, modify=False):\n    \"\"\"\n    Git pre-commit hook to check staged files for isort errors\n\n    :param bool strict - if True, return number of errors on exit,\n        causing the hook to fail. If False, return zero so it will\n        just act as a warning.\n    :param bool modify - if True, fix the sources if they are not\n        sorted properly. If False, only report result without\n        modifying anything.\n\n    :return number of errors if in strict mode, 0 otherwise.\n    \"\"\"\n\n    # Get list of files modified and staged\n    diff_cmd = \"git diff-index --cached --name-only --diff-filter=ACMRTUXB HEAD\"\n    files_modified = get_lines(diff_cmd)\n\n    errors = 0\n    for filename in files_modified:\n        if filename.endswith('.py'):\n            # Get the staged contents of the file\n            staged_cmd = \"git show :%s\" % filename\n            staged_contents = get_output(staged_cmd)\n\n            sort = SortImports(\n                file_path=filename,\n                file_contents=staged_contents.decode(),\n                check=True\n            )\n\n            if sort.incorrectly_sorted:\n                errors += 1\n                if modify:\n                    SortImports(\n                        file_path=filename,\n                        file_contents=staged_contents.decode(),\n                        check=False,\n                    )\n\n    return errors if strict else 0", "func_src_after": "def git_hook(strict=False, modify=False):\n    \"\"\"\n    Git pre-commit hook to check staged files for isort errors\n\n    :param bool strict - if True, return number of errors on exit,\n        causing the hook to fail. If False, return zero so it will\n        just act as a warning.\n    :param bool modify - if True, fix the sources if they are not\n        sorted properly. If False, only report result without\n        modifying anything.\n\n    :return number of errors if in strict mode, 0 otherwise.\n    \"\"\"\n\n    # Get list of files modified and staged\n    diff_cmd = [\"git\", \"diff-index\", \"--cached\", \"--name-only\", \"--diff-filter=ACMRTUXB HEAD\"]\n    files_modified = get_lines(diff_cmd)\n\n    errors = 0\n    for filename in files_modified:\n        if filename.endswith('.py'):\n            # Get the staged contents of the file\n            staged_cmd = [\"git\", \"show\", \":%s\" % filename]\n            staged_contents = get_output(staged_cmd)\n\n            sort = SortImports(\n                file_path=filename,\n                file_contents=staged_contents,\n                check=True\n            )\n\n            if sort.incorrectly_sorted:\n                errors += 1\n                if modify:\n                    SortImports(\n                        file_path=filename,\n                        file_contents=staged_contents,\n                        check=False,\n                    )\n\n    return errors if strict else 0", "line_changes": {"deleted": [{"line_no": 16, "char_start": 550, "char_end": 631, "line": "    diff_cmd = \"git diff-index --cached --name-only --diff-filter=ACMRTUXB HEAD\"\n"}, {"line_no": 23, "char_start": 811, "char_end": 862, "line": "            staged_cmd = \"git show :%s\" % filename\n"}, {"line_no": 28, "char_start": 984, "char_end": 1040, "line": "                file_contents=staged_contents.decode(),\n"}, {"line_no": 37, "char_start": 1254, "char_end": 1318, "line": "                        file_contents=staged_contents.decode(),\n"}], "added": [{"line_no": 16, "char_start": 550, "char_end": 645, "line": "    diff_cmd = [\"git\", \"diff-index\", \"--cached\", \"--name-only\", \"--diff-filter=ACMRTUXB HEAD\"]\n"}, {"line_no": 23, "char_start": 825, "char_end": 884, "line": "            staged_cmd = [\"git\", \"show\", \":%s\" % filename]\n"}, {"line_no": 28, "char_start": 1006, "char_end": 1053, "line": "                file_contents=staged_contents,\n"}, {"line_no": 37, "char_start": 1267, "char_end": 1322, "line": "                        file_contents=staged_contents,\n"}]}, "char_changes": {"deleted": [{"char_start": 1029, "char_end": 1038, "chars": ".decode()"}, {"char_start": 1307, "char_end": 1316, "chars": ".decode()"}], "added": [{"char_start": 565, "char_end": 566, "chars": "["}, {"char_start": 570, "char_end": 572, "chars": "\","}, {"char_start": 573, "char_end": 574, "chars": "\""}, {"char_start": 584, "char_end": 586, "chars": "\","}, {"char_start": 587, "char_end": 588, "chars": "\""}, {"char_start": 596, "char_end": 598, "chars": "\","}, {"char_start": 599, "char_end": 600, "chars": "\""}, {"char_start": 611, "char_end": 613, "chars": "\","}, {"char_start": 614, "char_end": 615, "chars": "\""}, {"char_start": 643, "char_end": 644, "chars": "]"}, {"char_start": 850, "char_end": 851, "chars": "["}, {"char_start": 855, "char_end": 857, "chars": "\","}, {"char_start": 858, "char_end": 859, "chars": "\""}, {"char_start": 863, "char_end": 865, "chars": "\","}, {"char_start": 866, "char_end": 867, "chars": "\""}, {"char_start": 882, "char_end": 883, "chars": "]"}, {"char_start": 1267, "char_end": 1267, "chars": ""}]}, "commit_link": "github.com/timothycrosley/isort/commit/1ab38f4f7840a3c19bf961a24630a992a8373a76", "file_name": "isort/hooks.py", "vul_type": "cwe-078"}
{"func_name": "test_create_modify_host", "func_src_before": "    def test_create_modify_host(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record\n        self.clear_mox()\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_cpg\",\n                       self.fake_get_cpg)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_domain\",\n                       self.fake_get_domain)\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_host_cmd = 'showhost -verbose fakehost'\n        _run_ssh(show_host_cmd, False).AndReturn([pack(ISCSI_NO_HOST_RET), ''])\n\n        create_host_cmd = ('createhost -iscsi -add fakehost '\n                           'iqn.1993-08.org.debian:01:222')\n        _run_ssh(create_host_cmd, False).AndReturn([CLI_CR, ''])\n        _run_ssh(show_host_cmd, False).AndReturn([pack(ISCSI_HOST_RET), ''])\n        self.mox.ReplayAll()\n\n        host = self.driver._create_host(self.volume, self.connector)\n        self.assertEqual(host['name'], self.FAKE_HOST)", "func_src_after": "    def test_create_modify_host(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record\n        self.clear_mox()\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_cpg\",\n                       self.fake_get_cpg)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_domain\",\n                       self.fake_get_domain)\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_host_cmd = ['showhost', '-verbose', 'fakehost']\n        _run_ssh(show_host_cmd, False).AndReturn([pack(ISCSI_NO_HOST_RET), ''])\n\n        create_host_cmd = ['createhost', '-iscsi', '-add', 'fakehost',\n                           'iqn.1993-08.org.debian:01:222']\n        _run_ssh(create_host_cmd, False).AndReturn([CLI_CR, ''])\n        _run_ssh(show_host_cmd, False).AndReturn([pack(ISCSI_HOST_RET), ''])\n        self.mox.ReplayAll()\n\n        host = self.driver._create_host(self.volume, self.connector)\n        self.assertEqual(host['name'], self.FAKE_HOST)", "line_changes": {"deleted": [{"line_no": 13, "char_start": 504, "char_end": 557, "line": "        show_host_cmd = 'showhost -verbose fakehost'\n"}, {"line_no": 16, "char_start": 638, "char_end": 700, "line": "        create_host_cmd = ('createhost -iscsi -add fakehost '\n"}, {"line_no": 17, "char_start": 700, "char_end": 760, "line": "                           'iqn.1993-08.org.debian:01:222')\n"}], "added": [{"line_no": 13, "char_start": 504, "char_end": 565, "line": "        show_host_cmd = ['showhost', '-verbose', 'fakehost']\n"}, {"line_no": 16, "char_start": 646, "char_end": 717, "line": "        create_host_cmd = ['createhost', '-iscsi', '-add', 'fakehost',\n"}, {"line_no": 17, "char_start": 717, "char_end": 777, "line": "                           'iqn.1993-08.org.debian:01:222']\n"}]}, "char_changes": {"deleted": [{"char_start": 664, "char_end": 665, "chars": "("}, {"char_start": 697, "char_end": 698, "chars": " "}, {"char_start": 758, "char_end": 759, "chars": ")"}], "added": [{"char_start": 528, "char_end": 529, "chars": "["}, {"char_start": 538, "char_end": 540, "chars": "',"}, {"char_start": 541, "char_end": 542, "chars": "'"}, {"char_start": 550, "char_end": 552, "chars": "',"}, {"char_start": 553, "char_end": 554, "chars": "'"}, {"char_start": 563, "char_end": 564, "chars": "]"}, {"char_start": 672, "char_end": 673, "chars": "["}, {"char_start": 684, "char_end": 686, "chars": "',"}, {"char_start": 687, "char_end": 688, "chars": "'"}, {"char_start": 694, "char_end": 696, "chars": "',"}, {"char_start": 697, "char_end": 698, "chars": "'"}, {"char_start": 702, "char_end": 704, "chars": "',"}, {"char_start": 705, "char_end": 706, "chars": "'"}, {"char_start": 715, "char_end": 716, "chars": ","}, {"char_start": 775, "char_end": 776, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/tests/test_hp3par.py", "vul_type": "cwe-078"}
{"func_name": "_run_ssh", "func_src_before": "    def _run_ssh(self, command, check_exit_code=True, attempts=1):\n        if not self.sshpool:\n            password = self.configuration.san_password\n            privatekey = self.configuration.san_private_key\n            min_size = self.configuration.ssh_min_pool_conn\n            max_size = self.configuration.ssh_max_pool_conn\n            self.sshpool = utils.SSHPool(self.configuration.san_ip,\n                                         self.configuration.san_ssh_port,\n                                         self.configuration.ssh_conn_timeout,\n                                         self.configuration.san_login,\n                                         password=password,\n                                         privatekey=privatekey,\n                                         min_size=min_size,\n                                         max_size=max_size)\n        last_exception = None\n        try:\n            total_attempts = attempts\n            with self.sshpool.item() as ssh:\n                while attempts > 0:\n                    attempts -= 1\n                    try:\n                        return utils.ssh_execute(\n                            ssh,\n                            command,\n                            check_exit_code=check_exit_code)\n                    except Exception as e:\n                        LOG.error(e)\n                        last_exception = e\n                        greenthread.sleep(random.randint(20, 500) / 100.0)\n                try:\n                    raise exception.ProcessExecutionError(\n                        exit_code=last_exception.exit_code,\n                        stdout=last_exception.stdout,\n                        stderr=last_exception.stderr,\n                        cmd=last_exception.cmd)\n                except AttributeError:\n                    raise exception.ProcessExecutionError(\n                        exit_code=-1,\n                        stdout=\"\",\n                        stderr=\"Error running SSH command\",\n                        cmd=command)\n\n        except Exception:\n            with excutils.save_and_reraise_exception():\n                LOG.error(_(\"Error running SSH command: %s\") % command)", "func_src_after": "    def _run_ssh(self, cmd_list, check_exit_code=True, attempts=1):\n        utils.check_ssh_injection(cmd_list)\n        command = ' '. join(cmd_list)\n\n        if not self.sshpool:\n            password = self.configuration.san_password\n            privatekey = self.configuration.san_private_key\n            min_size = self.configuration.ssh_min_pool_conn\n            max_size = self.configuration.ssh_max_pool_conn\n            self.sshpool = utils.SSHPool(self.configuration.san_ip,\n                                         self.configuration.san_ssh_port,\n                                         self.configuration.ssh_conn_timeout,\n                                         self.configuration.san_login,\n                                         password=password,\n                                         privatekey=privatekey,\n                                         min_size=min_size,\n                                         max_size=max_size)\n        last_exception = None\n        try:\n            total_attempts = attempts\n            with self.sshpool.item() as ssh:\n                while attempts > 0:\n                    attempts -= 1\n                    try:\n                        return utils.ssh_execute(\n                            ssh,\n                            command,\n                            check_exit_code=check_exit_code)\n                    except Exception as e:\n                        LOG.error(e)\n                        last_exception = e\n                        greenthread.sleep(random.randint(20, 500) / 100.0)\n                try:\n                    raise exception.ProcessExecutionError(\n                        exit_code=last_exception.exit_code,\n                        stdout=last_exception.stdout,\n                        stderr=last_exception.stderr,\n                        cmd=last_exception.cmd)\n                except AttributeError:\n                    raise exception.ProcessExecutionError(\n                        exit_code=-1,\n                        stdout=\"\",\n                        stderr=\"Error running SSH command\",\n                        cmd=command)\n\n        except Exception:\n            with excutils.save_and_reraise_exception():\n                LOG.error(_(\"Error running SSH command: %s\") % command)", "line_changes": {"deleted": [{"line_no": 1, "char_start": 0, "char_end": 67, "line": "    def _run_ssh(self, command, check_exit_code=True, attempts=1):\n"}], "added": [{"line_no": 1, "char_start": 0, "char_end": 68, "line": "    def _run_ssh(self, cmd_list, check_exit_code=True, attempts=1):\n"}, {"line_no": 2, "char_start": 68, "char_end": 112, "line": "        utils.check_ssh_injection(cmd_list)\n"}, {"line_no": 3, "char_start": 112, "char_end": 150, "line": "        command = ' '. join(cmd_list)\n"}, {"line_no": 4, "char_start": 150, "char_end": 151, "line": "\n"}]}, "char_changes": {"deleted": [{"char_start": 24, "char_end": 25, "chars": "o"}, {"char_start": 26, "char_end": 29, "chars": "man"}], "added": [{"char_start": 26, "char_end": 31, "chars": "_list"}, {"char_start": 67, "char_end": 150, "chars": "\n        utils.check_ssh_injection(cmd_list)\n        command = ' '. join(cmd_list)\n"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/san/san.py", "vul_type": "cwe-078"}
{"func_name": "view", "func_src_before": "@app.route('/view/<sid>')\ndef view(sid):\n    if '/' not in sid:\n        path = os.path.join(app.config['UPLOAD_FOLDER'], sid)\n        if os.path.isdir(path):\n            using_firebase = 'true' if app.config['FIREBASE'] else 'false'\n            return render_template('view.html',\n            sid=sid, title=\"Progress for %s\" % sid, using_firebase=using_firebase)\n        else:\n            abort(404)\n    else:\n        abort(403)", "func_src_after": "@app.route('/view/<sid>')\ndef view(sid):\n    if utils.sid_is_valid(sid):\n        path = join(app.config['UPLOAD_FOLDER'], sid)\n        if os.path.isdir(path):\n            using_firebase = 'true' if app.config['FIREBASE'] else 'false'\n            return render_template('view.html', sid=sid,\n                                    title=\"Progress for %s\" % sid,\n                                    using_firebase=using_firebase)\n        else:\n            abort(404)\n    else:\n        abort(403)", "line_changes": {"deleted": [{"line_no": 3, "char_start": 41, "char_end": 64, "line": "    if '/' not in sid:\n"}, {"line_no": 4, "char_start": 64, "char_end": 126, "line": "        path = os.path.join(app.config['UPLOAD_FOLDER'], sid)\n"}, {"line_no": 7, "char_start": 233, "char_end": 281, "line": "            return render_template('view.html',\n"}, {"line_no": 8, "char_start": 281, "char_end": 364, "line": "            sid=sid, title=\"Progress for %s\" % sid, using_firebase=using_firebase)\n"}], "added": [{"line_no": 3, "char_start": 41, "char_end": 73, "line": "    if utils.sid_is_valid(sid):\n"}, {"line_no": 4, "char_start": 73, "char_end": 127, "line": "        path = join(app.config['UPLOAD_FOLDER'], sid)\n"}, {"line_no": 7, "char_start": 234, "char_end": 291, "line": "            return render_template('view.html', sid=sid,\n"}, {"line_no": 8, "char_start": 291, "char_end": 358, "line": "                                    title=\"Progress for %s\" % sid,\n"}, {"line_no": 9, "char_start": 358, "char_end": 425, "line": "                                    using_firebase=using_firebase)\n"}]}, "char_changes": {"deleted": [{"char_start": 48, "char_end": 54, "chars": "'/' no"}, {"char_start": 55, "char_end": 56, "chars": " "}, {"char_start": 57, "char_end": 59, "chars": "n "}, {"char_start": 79, "char_end": 87, "chars": "os.path."}, {"char_start": 293, "char_end": 301, "chars": "sid=sid,"}], "added": [{"char_start": 48, "char_end": 49, "chars": "u"}, {"char_start": 51, "char_end": 54, "chars": "ls."}, {"char_start": 57, "char_end": 71, "chars": "_is_valid(sid)"}, {"char_start": 281, "char_end": 290, "chars": " sid=sid,"}, {"char_start": 291, "char_end": 301, "chars": "          "}, {"char_start": 313, "char_end": 326, "chars": "             "}, {"char_start": 357, "char_end": 393, "chars": "\n                                   "}]}, "commit_link": "github.com/cheukyin699/genset-demo-site/commit/abb55b1a6786b0a995c2cdf77a7977a1d51cfc0d", "file_name": "app/views.py", "vul_type": "cwe-078"}
{"func_name": "get_title_from_youtube_url", "func_src_before": "def get_title_from_youtube_url(url):\n    try:\n        output = str(subprocess.check_output('youtube-dl --get-title %s --no-warnings' % url, stderr=subprocess.STDOUT,\n                                             shell=True)).strip()\n    except subprocess.CalledProcessError as ex:\n        output = str(ex.output).strip()\n    except OSError as ex:\n        output = 'youtube-dl not found: %s' % ex\n    except Exception as ex:\n        output = 'Something bad happened: %s' % ex\n    return remove_commas_from_string(output)", "func_src_after": "def get_title_from_youtube_url(url):\n    try:\n        output = str(subprocess.check_output(['youtube-dl', '--get-title', url, '--no-warnings'],\n                                             stderr=subprocess.STDOUT)).strip()\n    except subprocess.CalledProcessError as ex:\n        output = str(ex.output).strip()\n    except OSError as ex:\n        output = 'youtube-dl not found: %s' % ex\n    except Exception as ex:\n        output = 'Something bad happened: %s' % ex\n    return remove_commas_from_string(output)", "line_changes": {"deleted": [{"line_no": 3, "char_start": 46, "char_end": 166, "line": "        output = str(subprocess.check_output('youtube-dl --get-title %s --no-warnings' % url, stderr=subprocess.STDOUT,\n"}, {"line_no": 4, "char_start": 166, "char_end": 232, "line": "                                             shell=True)).strip()\n"}], "added": [{"line_no": 3, "char_start": 46, "char_end": 144, "line": "        output = str(subprocess.check_output(['youtube-dl', '--get-title', url, '--no-warnings'],\n"}, {"line_no": 4, "char_start": 144, "char_end": 224, "line": "                                             stderr=subprocess.STDOUT)).strip()\n"}]}, "char_changes": {"deleted": [{"char_start": 115, "char_end": 117, "chars": "%s"}, {"char_start": 132, "char_end": 164, "chars": " % url, stderr=subprocess.STDOUT"}, {"char_start": 212, "char_end": 213, "chars": "h"}, {"char_start": 214, "char_end": 218, "chars": "ll=T"}], "added": [{"char_start": 91, "char_end": 92, "chars": "["}, {"char_start": 103, "char_end": 105, "chars": "',"}, {"char_start": 106, "char_end": 107, "chars": "'"}, {"char_start": 118, "char_end": 120, "chars": "',"}, {"char_start": 121, "char_end": 125, "chars": "url,"}, {"char_start": 126, "char_end": 127, "chars": "'"}, {"char_start": 141, "char_end": 142, "chars": "]"}, {"char_start": 190, "char_end": 192, "chars": "td"}, {"char_start": 193, "char_end": 195, "chars": "rr"}, {"char_start": 196, "char_end": 200, "chars": "subp"}, {"char_start": 201, "char_end": 203, "chars": "oc"}, {"char_start": 204, "char_end": 213, "chars": "ss.STDOUT"}]}, "commit_link": "github.com/w-martin/mindfulness/commit/62e1d5ce9deb57468cf917ce0ce838120ec84c46", "file_name": "src/util.py", "vul_type": "cwe-078"}
{"func_name": "test_get_ports", "func_src_before": "    def test_get_ports(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record\n        self.clear_mox()\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_port_cmd = 'showport'\n        _run_ssh(show_port_cmd, False).AndReturn([pack(PORT_RET), ''])\n\n        show_port_i_cmd = 'showport -iscsi'\n        _run_ssh(show_port_i_cmd, False).AndReturn([pack(READY_ISCSI_PORT_RET),\n                                                    ''])\n\n        show_port_i_cmd = 'showport -iscsiname'\n        _run_ssh(show_port_i_cmd, False).AndReturn([pack(SHOW_PORT_ISCSI),\n                                                    ''])\n        self.mox.ReplayAll()\n\n        ports = self.driver.common.get_ports()\n        self.assertEqual(ports['FC'][0], '20210002AC00383D')\n        self.assertEqual(ports['iSCSI']['10.10.120.252']['nsp'], '0:8:2')", "func_src_after": "    def test_get_ports(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record\n        self.clear_mox()\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_port_cmd = ['showport']\n        _run_ssh(show_port_cmd, False).AndReturn([pack(PORT_RET), ''])\n\n        show_port_i_cmd = ['showport', '-iscsi']\n        _run_ssh(show_port_i_cmd, False).AndReturn([pack(READY_ISCSI_PORT_RET),\n                                                    ''])\n\n        show_port_i_cmd = ['showport', '-iscsiname']\n        _run_ssh(show_port_i_cmd, False).AndReturn([pack(SHOW_PORT_ISCSI),\n                                                    ''])\n        self.mox.ReplayAll()\n\n        ports = self.driver.common.get_ports()\n        self.assertEqual(ports['FC'][0], '20210002AC00383D')\n        self.assertEqual(ports['iSCSI']['10.10.120.252']['nsp'], '0:8:2')", "line_changes": {"deleted": [{"line_no": 9, "char_start": 273, "char_end": 308, "line": "        show_port_cmd = 'showport'\n"}, {"line_no": 12, "char_start": 380, "char_end": 424, "line": "        show_port_i_cmd = 'showport -iscsi'\n"}, {"line_no": 16, "char_start": 562, "char_end": 610, "line": "        show_port_i_cmd = 'showport -iscsiname'\n"}], "added": [{"line_no": 9, "char_start": 273, "char_end": 310, "line": "        show_port_cmd = ['showport']\n"}, {"line_no": 12, "char_start": 382, "char_end": 431, "line": "        show_port_i_cmd = ['showport', '-iscsi']\n"}, {"line_no": 16, "char_start": 569, "char_end": 622, "line": "        show_port_i_cmd = ['showport', '-iscsiname']\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 297, "char_end": 298, "chars": "["}, {"char_start": 308, "char_end": 309, "chars": "]"}, {"char_start": 408, "char_end": 409, "chars": "["}, {"char_start": 418, "char_end": 420, "chars": "',"}, {"char_start": 421, "char_end": 422, "chars": "'"}, {"char_start": 429, "char_end": 430, "chars": "]"}, {"char_start": 595, "char_end": 596, "chars": "["}, {"char_start": 605, "char_end": 607, "chars": "',"}, {"char_start": 608, "char_end": 609, "chars": "'"}, {"char_start": 620, "char_end": 621, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/tests/test_hp3par.py", "vul_type": "cwe-078"}
{"func_name": "_create_3par_vlun", "func_src_before": "    def _create_3par_vlun(self, volume, hostname):\n        out = self._cli_run('createvlun %s auto %s' % (volume, hostname), None)\n        if out and len(out) > 1:\n            if \"must be in the same domain\" in out[0]:\n                err = out[0].strip()\n                err = err + \" \" + out[1].strip()\n                raise exception.Invalid3PARDomain(err=err)", "func_src_after": "    def _create_3par_vlun(self, volume, hostname):\n        out = self._cli_run(['createvlun', volume, 'auto', hostname])\n        if out and len(out) > 1:\n            if \"must be in the same domain\" in out[0]:\n                err = out[0].strip()\n                err = err + \" \" + out[1].strip()\n                raise exception.Invalid3PARDomain(err=err)", "line_changes": {"deleted": [{"line_no": 2, "char_start": 51, "char_end": 131, "line": "        out = self._cli_run('createvlun %s auto %s' % (volume, hostname), None)\n"}], "added": [{"line_no": 2, "char_start": 51, "char_end": 121, "line": "        out = self._cli_run(['createvlun', volume, 'auto', hostname])\n"}]}, "char_changes": {"deleted": [{"char_start": 90, "char_end": 101, "chars": " %s auto %s"}, {"char_start": 102, "char_end": 104, "chars": " %"}, {"char_start": 105, "char_end": 106, "chars": "("}, {"char_start": 122, "char_end": 129, "chars": "), None"}], "added": [{"char_start": 79, "char_end": 80, "chars": "["}, {"char_start": 92, "char_end": 93, "chars": ","}, {"char_start": 102, "char_end": 110, "chars": "'auto', "}, {"char_start": 118, "char_end": 119, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_common.py", "vul_type": "cwe-078"}
{"func_name": "_set_connections", "func_src_before": "    def _set_connections(self):\n        \"\"\"Set the number of concurrent connections.\n\n        The 3PAR WS API server has a limit of concurrent connections.\n        This is setting the number to the highest allowed, 15 connections.\n        \"\"\"\n        self._cli_run(\"setwsapi -sru high\", None)", "func_src_after": "    def _set_connections(self):\n        \"\"\"Set the number of concurrent connections.\n\n        The 3PAR WS API server has a limit of concurrent connections.\n        This is setting the number to the highest allowed, 15 connections.\n        \"\"\"\n        self._cli_run(['setwsapi', '-sru', 'high'])", "line_changes": {"deleted": [{"line_no": 7, "char_start": 243, "char_end": 292, "line": "        self._cli_run(\"setwsapi -sru high\", None)\n"}], "added": [{"line_no": 7, "char_start": 243, "char_end": 294, "line": "        self._cli_run(['setwsapi', '-sru', 'high'])\n"}]}, "char_changes": {"deleted": [{"char_start": 265, "char_end": 266, "chars": "\""}, {"char_start": 284, "char_end": 291, "chars": "\", None"}], "added": [{"char_start": 265, "char_end": 267, "chars": "['"}, {"char_start": 275, "char_end": 277, "chars": "',"}, {"char_start": 278, "char_end": 279, "chars": "'"}, {"char_start": 283, "char_end": 285, "chars": "',"}, {"char_start": 286, "char_end": 287, "chars": "'"}, {"char_start": 291, "char_end": 293, "chars": "']"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_common.py", "vul_type": "cwe-078"}
{"func_name": "_get_chap_secret_for_host", "func_src_before": "    def _get_chap_secret_for_host(self, host_name):\n        \"\"\"Return the CHAP secret for the given host.\"\"\"\n\n        LOG.debug(_('enter: _get_chap_secret_for_host: host name %s')\n                  % host_name)\n\n        ssh_cmd = 'svcinfo lsiscsiauth -delim !'\n        out, err = self._run_ssh(ssh_cmd)\n\n        if not len(out.strip()):\n            return None\n\n        host_lines = out.strip().split('\\n')\n        self._assert_ssh_return(len(host_lines), '_get_chap_secret_for_host',\n                                ssh_cmd, out, err)\n\n        header = host_lines.pop(0).split('!')\n        self._assert_ssh_return('name' in header, '_get_chap_secret_for_host',\n                                ssh_cmd, out, err)\n        self._assert_ssh_return('iscsi_auth_method' in header,\n                                '_get_chap_secret_for_host', ssh_cmd, out, err)\n        self._assert_ssh_return('iscsi_chap_secret' in header,\n                                '_get_chap_secret_for_host', ssh_cmd, out, err)\n        name_index = header.index('name')\n        method_index = header.index('iscsi_auth_method')\n        secret_index = header.index('iscsi_chap_secret')\n\n        chap_secret = None\n        host_found = False\n        for line in host_lines:\n            info = line.split('!')\n            if info[name_index] == host_name:\n                host_found = True\n                if info[method_index] == 'chap':\n                    chap_secret = info[secret_index]\n\n        self._assert_ssh_return(host_found, '_get_chap_secret_for_host',\n                                ssh_cmd, out, err)\n\n        LOG.debug(_('leave: _get_chap_secret_for_host: host name '\n                    '%(host_name)s with secret %(chap_secret)s')\n                  % {'host_name': host_name, 'chap_secret': chap_secret})\n\n        return chap_secret", "func_src_after": "    def _get_chap_secret_for_host(self, host_name):\n        \"\"\"Return the CHAP secret for the given host.\"\"\"\n\n        LOG.debug(_('enter: _get_chap_secret_for_host: host name %s')\n                  % host_name)\n\n        ssh_cmd = ['svcinfo', 'lsiscsiauth', '-delim', '!']\n        out, err = self._run_ssh(ssh_cmd)\n\n        if not len(out.strip()):\n            return None\n\n        host_lines = out.strip().split('\\n')\n        self._assert_ssh_return(len(host_lines), '_get_chap_secret_for_host',\n                                ssh_cmd, out, err)\n\n        header = host_lines.pop(0).split('!')\n        self._assert_ssh_return('name' in header, '_get_chap_secret_for_host',\n                                ssh_cmd, out, err)\n        self._assert_ssh_return('iscsi_auth_method' in header,\n                                '_get_chap_secret_for_host', ssh_cmd, out, err)\n        self._assert_ssh_return('iscsi_chap_secret' in header,\n                                '_get_chap_secret_for_host', ssh_cmd, out, err)\n        name_index = header.index('name')\n        method_index = header.index('iscsi_auth_method')\n        secret_index = header.index('iscsi_chap_secret')\n\n        chap_secret = None\n        host_found = False\n        for line in host_lines:\n            info = line.split('!')\n            if info[name_index] == host_name:\n                host_found = True\n                if info[method_index] == 'chap':\n                    chap_secret = info[secret_index]\n\n        self._assert_ssh_return(host_found, '_get_chap_secret_for_host',\n                                ssh_cmd, out, err)\n\n        LOG.debug(_('leave: _get_chap_secret_for_host: host name '\n                    '%(host_name)s with secret %(chap_secret)s')\n                  % {'host_name': host_name, 'chap_secret': chap_secret})\n\n        return chap_secret", "line_changes": {"deleted": [{"line_no": 7, "char_start": 212, "char_end": 261, "line": "        ssh_cmd = 'svcinfo lsiscsiauth -delim !'\n"}], "added": [{"line_no": 7, "char_start": 212, "char_end": 272, "line": "        ssh_cmd = ['svcinfo', 'lsiscsiauth', '-delim', '!']\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 230, "char_end": 231, "chars": "["}, {"char_start": 239, "char_end": 241, "chars": "',"}, {"char_start": 242, "char_end": 243, "chars": "'"}, {"char_start": 254, "char_end": 256, "chars": "',"}, {"char_start": 257, "char_end": 258, "chars": "'"}, {"char_start": 264, "char_end": 266, "chars": "',"}, {"char_start": 267, "char_end": 268, "chars": "'"}, {"char_start": 270, "char_end": 271, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
