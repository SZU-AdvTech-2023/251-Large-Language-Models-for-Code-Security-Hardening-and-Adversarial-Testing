{"func_name": "likeComments", "func_src_before": "    def likeComments(self,commentid,userid):\n        sqlText=\"insert into comment_like values(%d,%d);\"%(userid,commentid)\n        result=sql.insertDB(self.conn,sqlText)\n        return result;", "func_src_after": "    def likeComments(self,commentid,userid):\n        sqlText=\"insert into comment_like values(%s,%s);\"\n        params=[userid,commentid]\n        result=sql.insertDB(self.conn,sqlText,params)\n        return result;", "commit_link": "github.com/ShaominLi/Twitter_project/commit/5329d91f9e569c95184053c8e7ef596949c33ce9", "file_name": "modules/comment.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 2, "char_start": 45, "char_end": 122, "line": "        sqlText=\"insert into comment_like values(%d,%d);\"%(userid,commentid)\n"}, {"line_no": 3, "char_start": 122, "char_end": 169, "line": "        result=sql.insertDB(self.conn,sqlText)\n"}], "added": [{"line_no": 2, "char_start": 45, "char_end": 103, "line": "        sqlText=\"insert into comment_like values(%s,%s);\"\n"}, {"line_no": 3, "char_start": 103, "char_end": 137, "line": "        params=[userid,commentid]\n"}, {"line_no": 4, "char_start": 137, "char_end": 191, "line": "        result=sql.insertDB(self.conn,sqlText,params)\n"}]}, "char_changes": {"deleted": [{"char_start": 95, "char_end": 96, "chars": "d"}, {"char_start": 98, "char_end": 99, "chars": "d"}, {"char_start": 102, "char_end": 104, "chars": "%("}, {"char_start": 120, "char_end": 121, "chars": ")"}], "added": [{"char_start": 95, "char_end": 96, "chars": "s"}, {"char_start": 98, "char_end": 99, "chars": "s"}, {"char_start": 102, "char_end": 119, "chars": "\n        params=["}, {"char_start": 135, "char_end": 136, "chars": "]"}, {"char_start": 182, "char_end": 189, "chars": ",params"}]}}
{"func_name": "add_inverters", "func_src_before": "    def add_inverters(self):\n        interfaces = self.config.get_connection_interfaces()\n        for source in interfaces:\n            if source[\"type\"] == \"inverter\":\n\n                query = '''\n                    INSERT OR IGNORE INTO Inverters (\n                        Serial,\n                        EToday,\n                        ETotal\n                    ) VALUES (\n                        %s,\n                        %s,\n                        %s\n                    );\n                ''' % (source[\"serial_id\"], 0, source[\"prev_etotal\"])\n                self.c.execute(query)\n\n                query = '''\n                    UPDATE Inverters\n                    SET     \n                        Name='%s', \n                        Type='%s', \n                        SW_Version='%s', \n                        Status='%s',\n                        TimeStamp='%s'\n                    WHERE Serial='%s';\n                ''' % (source[\"name\"], source[\"inverter_type\"], \"s0-bridge v0\", \"OK\", int(datetime.now().timestamp()), source[\"serial_id\"] )\n                self.c.execute(query)\n\n                self.db.commit()", "func_src_after": "    def add_inverters(self):\n        interfaces = self.config.get_connection_interfaces()\n        for source in interfaces:\n            if source[\"type\"] == \"inverter\":\n\n                query = '''\n                    INSERT OR IGNORE INTO Inverters (\n                        Serial,\n                        EToday,\n                        ETotal\n                    ) VALUES (\n                        ?,\n                        ?,\n                        ?\n                    );\n                '''\n                self.c.execute(query, (source[\"serial_id\"], 0, source[\"prev_etotal\"]))\n\n                query = '''\n                    UPDATE Inverters\n                    SET     \n                        Name=?, \n                        Type=?, \n                        SW_Version=?, \n                        Status=?,\n                        TimeStamp=?\n                    WHERE Serial=?;\n                '''\n                self.c.execute(query, (source[\"name\"], source[\"inverter_type\"], \"s0-bridge v0\", \"OK\", int(datetime.now().timestamp()), source[\"serial_id\"] ))\n\n                self.db.commit()", "commit_link": "github.com/philipptrenz/s0-bridge/commit/269b48caa05377b7c58c3e6d1622a4429cb5ba65", "file_name": "util/database.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 12, "char_start": 378, "char_end": 406, "line": "                        %s,\n"}, {"line_no": 13, "char_start": 406, "char_end": 434, "line": "                        %s,\n"}, {"line_no": 14, "char_start": 434, "char_end": 461, "line": "                        %s\n"}, {"line_no": 16, "char_start": 484, "char_end": 554, "line": "                ''' % (source[\"serial_id\"], 0, source[\"prev_etotal\"])\n"}, {"line_no": 17, "char_start": 554, "char_end": 592, "line": "                self.c.execute(query)\n"}, {"line_no": 22, "char_start": 687, "char_end": 723, "line": "                        Name='%s', \n"}, {"line_no": 23, "char_start": 723, "char_end": 759, "line": "                        Type='%s', \n"}, {"line_no": 24, "char_start": 759, "char_end": 801, "line": "                        SW_Version='%s', \n"}, {"line_no": 25, "char_start": 801, "char_end": 838, "line": "                        Status='%s',\n"}, {"line_no": 26, "char_start": 838, "char_end": 877, "line": "                        TimeStamp='%s'\n"}, {"line_no": 27, "char_start": 877, "char_end": 916, "line": "                    WHERE Serial='%s';\n"}, {"line_no": 28, "char_start": 916, "char_end": 1057, "line": "                ''' % (source[\"name\"], source[\"inverter_type\"], \"s0-bridge v0\", \"OK\", int(datetime.now().timestamp()), source[\"serial_id\"] )\n"}, {"line_no": 29, "char_start": 1057, "char_end": 1095, "line": "                self.c.execute(query)\n"}], "added": [{"line_no": 12, "char_start": 378, "char_end": 405, "line": "                        ?,\n"}, {"line_no": 13, "char_start": 405, "char_end": 432, "line": "                        ?,\n"}, {"line_no": 14, "char_start": 432, "char_end": 458, "line": "                        ?\n"}, {"line_no": 16, "char_start": 481, "char_end": 501, "line": "                '''\n"}, {"line_no": 17, "char_start": 501, "char_end": 588, "line": "                self.c.execute(query, (source[\"serial_id\"], 0, source[\"prev_etotal\"]))\n"}, {"line_no": 22, "char_start": 683, "char_end": 716, "line": "                        Name=?, \n"}, {"line_no": 23, "char_start": 716, "char_end": 749, "line": "                        Type=?, \n"}, {"line_no": 24, "char_start": 749, "char_end": 788, "line": "                        SW_Version=?, \n"}, {"line_no": 25, "char_start": 788, "char_end": 822, "line": "                        Status=?,\n"}, {"line_no": 26, "char_start": 822, "char_end": 858, "line": "                        TimeStamp=?\n"}, {"line_no": 27, "char_start": 858, "char_end": 894, "line": "                    WHERE Serial=?;\n"}, {"line_no": 28, "char_start": 894, "char_end": 914, "line": "                '''\n"}, {"line_no": 29, "char_start": 914, "char_end": 1072, "line": "                self.c.execute(query, (source[\"name\"], source[\"inverter_type\"], \"s0-bridge v0\", \"OK\", int(datetime.now().timestamp()), source[\"serial_id\"] ))\n"}]}, "char_changes": {"deleted": [{"char_start": 402, "char_end": 404, "chars": "%s"}, {"char_start": 430, "char_end": 432, "chars": "%s"}, {"char_start": 458, "char_end": 460, "chars": "%s"}, {"char_start": 504, "char_end": 505, "chars": "%"}, {"char_start": 553, "char_end": 590, "chars": "\n                self.c.execute(query"}, {"char_start": 716, "char_end": 720, "chars": "'%s'"}, {"char_start": 752, "char_end": 756, "chars": "'%s'"}, {"char_start": 794, "char_end": 798, "chars": "'%s'"}, {"char_start": 832, "char_end": 836, "chars": "'%s'"}, {"char_start": 872, "char_end": 876, "chars": "'%s'"}, {"char_start": 910, "char_end": 914, "chars": "'%s'"}, {"char_start": 936, "char_end": 937, "chars": "%"}, {"char_start": 1056, "char_end": 1093, "chars": "\n                self.c.execute(query"}], "added": [{"char_start": 402, "char_end": 403, "chars": "?"}, {"char_start": 429, "char_end": 430, "chars": "?"}, {"char_start": 456, "char_end": 457, "chars": "?"}, {"char_start": 500, "char_end": 515, "chars": "\n              "}, {"char_start": 516, "char_end": 538, "chars": " self.c.execute(query,"}, {"char_start": 712, "char_end": 713, "chars": "?"}, {"char_start": 745, "char_end": 746, "chars": "?"}, {"char_start": 784, "char_end": 785, "chars": "?"}, {"char_start": 819, "char_end": 820, "chars": "?"}, {"char_start": 856, "char_end": 857, "chars": "?"}, {"char_start": 891, "char_end": 892, "chars": "?"}, {"char_start": 913, "char_end": 918, "chars": "\n    "}, {"char_start": 919, "char_end": 951, "chars": "           self.c.execute(query,"}]}}
{"func_name": "delete", "func_src_before": "@mod.route('/delete/<int:msg_id>', methods=['GET', 'POST'])\ndef delete(msg_id):\n    if request.method == 'GET':\n        sql = \"DELETE FROM message where msg_id = '%d';\" % (msg_id)\n        cursor.execute(sql)\n        conn.commit()\n        flash('Delete Success!')\n    return redirect(url_for('show_entries'))", "func_src_after": "@mod.route('/delete/<int:msg_id>', methods=['GET', 'POST'])\ndef delete(msg_id):\n    if request.method == 'GET':\n        cursor.execute(\"DELETE FROM message where msg_id = %s;\", (msg_id,))\n        conn.commit()\n        flash('Delete Success!')\n    return redirect(url_for('show_entries'))", "commit_link": "github.com/ulyssetsd/bjtu-sql/commit/17d7b21864b72ba5666f15236474a93268b32ec9", "file_name": "flaskr/flaskr/views/message.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 4, "char_start": 112, "char_end": 180, "line": "        sql = \"DELETE FROM message where msg_id = '%d';\" % (msg_id)\n"}, {"line_no": 5, "char_start": 180, "char_end": 208, "line": "        cursor.execute(sql)\n"}], "added": [{"line_no": 4, "char_start": 112, "char_end": 188, "line": "        cursor.execute(\"DELETE FROM message where msg_id = %s;\", (msg_id,))\n"}]}, "char_changes": {"deleted": [{"char_start": 121, "char_end": 126, "chars": "ql = "}, {"char_start": 162, "char_end": 163, "chars": "'"}, {"char_start": 164, "char_end": 166, "chars": "d'"}, {"char_start": 168, "char_end": 170, "chars": " %"}, {"char_start": 179, "char_end": 206, "chars": "\n        cursor.execute(sql"}], "added": [{"char_start": 120, "char_end": 123, "chars": "cur"}, {"char_start": 124, "char_end": 135, "chars": "or.execute("}, {"char_start": 172, "char_end": 173, "chars": "s"}, {"char_start": 175, "char_end": 176, "chars": ","}, {"char_start": 184, "char_end": 185, "chars": ","}]}}
{"func_name": "karma_rank", "func_src_before": "def karma_rank(name):\n    db = db_connect()\n    cursor = db.cursor()\n    try:\n        cursor.execute('''\n            SELECT (SELECT COUNT(*) FROM people AS t2 WHERE t2.karma > t1.karma)\n            AS row_Num FROM people AS t1 WHERE name='{}'\n        '''.format(name))\n        rank = cursor.fetchone()[0] + 1\n        logger.debug('Rank of {} found for name {}'.format(rank, name))\n        db.close()\n        return rank\n    except Exception as e:\n        logger.error('Execution failed with error: {}'.format(e))\n        raise", "func_src_after": "def karma_rank(name):\n    db = db_connect()\n    cursor = db.cursor()\n    try:\n        cursor.execute('''\n            SELECT (SELECT COUNT(*) FROM people AS t2 WHERE t2.karma > t1.karma)\n            AS row_Num FROM people AS t1 WHERE name=%(name)s\n        ''', (name, ))\n        rank = cursor.fetchone()[0] + 1\n        logger.debug('Rank of {} found for name {}'.format(rank, name))\n        db.close()\n        return rank\n    except Exception as e:\n        logger.error('Execution failed with error: {}'.format(e))\n        raise", "commit_link": "github.com/tylarb/KarmaBoi-PCF/commit/c1d00a27d7f6b7eb6f15a3dacd4269654a32c10a", "file_name": "KarmaBoi/dbopts.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 7, "char_start": 186, "char_end": 243, "line": "            AS row_Num FROM people AS t1 WHERE name='{}'\n"}, {"line_no": 8, "char_start": 243, "char_end": 269, "line": "        '''.format(name))\n"}], "added": [{"line_no": 7, "char_start": 186, "char_end": 247, "line": "            AS row_Num FROM people AS t1 WHERE name=%(name)s\n"}, {"line_no": 8, "char_start": 247, "char_end": 270, "line": "        ''', (name, ))\n"}]}, "char_changes": {"deleted": [{"char_start": 238, "char_end": 242, "chars": "'{}'"}, {"char_start": 254, "char_end": 261, "chars": ".format"}], "added": [{"char_start": 238, "char_end": 246, "chars": "%(name)s"}, {"char_start": 258, "char_end": 260, "chars": ", "}, {"char_start": 265, "char_end": 267, "chars": ", "}]}}
{"func_name": "get_last_month", "func_src_before": "def get_last_month(db, scene):\n    sql = \"select date from matches where scene='{}' order by date desc limit 1;\".format(scene)\n    res = db.exec(sql)\n    date = res[0][0]\n\n    # If it has been more than 1 month since this last tournament,\n    # go ahead and round this date up by a 1 month\n    # eg, if the last tournament was 2015-01-15 (a long time ago)\n    # we can assume the scene won't have more tournaments\n    # So just round to 2015-02-01\n    today = datetime.datetime.today().strftime('%Y-%m-%d')\n    y, m, d = today.split('-')\n    cy, cm, cd = date.split('-')\n    if y > cy or m > cm:\n        # Add 1 to the month before we return\n        # eg 2018-03-01 -> 2018-04-01\n        date = get_next_month(date)\n\n    return date", "func_src_after": "def get_last_month(db, scene):\n    sql = \"select date from matches where scene='{scene}' order by date desc limit 1;\"\n    args = {'scene': scene}\n    res = db.exec(sql, args)\n    date = res[0][0]\n\n    # If it has been more than 1 month since this last tournament,\n    # go ahead and round this date up by a 1 month\n    # eg, if the last tournament was 2015-01-15 (a long time ago)\n    # we can assume the scene won't have more tournaments\n    # So just round to 2015-02-01\n    today = datetime.datetime.today().strftime('%Y-%m-%d')\n    y, m, d = today.split('-')\n    cy, cm, cd = date.split('-')\n    if y > cy or m > cm:\n        # Add 1 to the month before we return\n        # eg 2018-03-01 -> 2018-04-01\n        date = get_next_month(date)\n\n    return date", "commit_link": "github.com/DKelle/Smash_stats/commit/4bb83f3f6ce7d6bebbeb512cd015f9e72cf36d63", "file_name": "bracket_utils.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 2, "char_start": 31, "char_end": 127, "line": "    sql = \"select date from matches where scene='{}' order by date desc limit 1;\".format(scene)\n"}, {"line_no": 3, "char_start": 127, "char_end": 150, "line": "    res = db.exec(sql)\n"}], "added": [{"line_no": 2, "char_start": 31, "char_end": 118, "line": "    sql = \"select date from matches where scene='{scene}' order by date desc limit 1;\"\n"}, {"line_no": 3, "char_start": 118, "char_end": 146, "line": "    args = {'scene': scene}\n"}, {"line_no": 4, "char_start": 146, "char_end": 175, "line": "    res = db.exec(sql, args)\n"}]}, "char_changes": {"deleted": [{"char_start": 112, "char_end": 115, "chars": ".fo"}, {"char_start": 116, "char_end": 120, "chars": "mat("}, {"char_start": 125, "char_end": 126, "chars": ")"}], "added": [{"char_start": 81, "char_end": 86, "chars": "scene"}, {"char_start": 117, "char_end": 123, "chars": "\n    a"}, {"char_start": 124, "char_end": 131, "chars": "gs = {'"}, {"char_start": 136, "char_end": 145, "chars": "': scene}"}, {"char_start": 167, "char_end": 173, "chars": ", args"}]}}
{"func_name": "achievements_list_player", "func_src_before": "@app.route('/players/<int:player_id>/achievements')\ndef achievements_list_player(player_id):\n    \"\"\"Lists the progress of achievements for a player.\n\n    :param player_id: ID of the player.\n\n    :return:\n        If successful, this method returns a response body with the following structure::\n\n            {\n              \"items\": [\n                {\n                  \"achievement_id\": string,\n                  \"state\": string,\n                  \"current_steps\": integer,\n                  \"create_time\": long,\n                  \"update_time\": long\n                }\n              ]\n            }\n    \"\"\"\n    with db.connection:\n        cursor = db.connection.cursor(db.pymysql.cursors.DictCursor)\n        cursor.execute(\"\"\"SELECT\n                            achievement_id,\n                            current_steps,\n                            state,\n                            UNIX_TIMESTAMP(create_time) as create_time,\n                            UNIX_TIMESTAMP(update_time) as update_time\n                        FROM player_achievements\n                        WHERE player_id = '%s'\"\"\" % player_id)\n\n        return flask.jsonify(items=cursor.fetchall())", "func_src_after": "@app.route('/players/<int:player_id>/achievements')\ndef achievements_list_player(player_id):\n    \"\"\"Lists the progress of achievements for a player.\n\n    :param player_id: ID of the player.\n\n    :return:\n        If successful, this method returns a response body with the following structure::\n\n            {\n              \"items\": [\n                {\n                  \"achievement_id\": string,\n                  \"state\": string,\n                  \"current_steps\": integer,\n                  \"create_time\": long,\n                  \"update_time\": long\n                }\n              ]\n            }\n    \"\"\"\n    with db.connection:\n        cursor = db.connection.cursor(db.pymysql.cursors.DictCursor)\n        cursor.execute(\"\"\"SELECT\n                            achievement_id,\n                            current_steps,\n                            state,\n                            UNIX_TIMESTAMP(create_time) as create_time,\n                            UNIX_TIMESTAMP(update_time) as update_time\n                        FROM player_achievements\n                        WHERE player_id = %s\"\"\", player_id)\n\n        return flask.jsonify(items=cursor.fetchall())", "commit_link": "github.com/FAForever/api/commit/5fe7f23868cd191616b088bdd5b24010f004dd5a", "file_name": "api/achievements.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 31, "char_start": 1048, "char_end": 1111, "line": "                        WHERE player_id = '%s'\"\"\" % player_id)\n"}], "added": [{"line_no": 31, "char_start": 1048, "char_end": 1108, "line": "                        WHERE player_id = %s\"\"\", player_id)\n"}]}, "char_changes": {"deleted": [{"char_start": 1090, "char_end": 1091, "chars": "'"}, {"char_start": 1093, "char_end": 1094, "chars": "'"}, {"char_start": 1097, "char_end": 1099, "chars": " %"}], "added": [{"char_start": 1095, "char_end": 1096, "chars": ","}]}}
{"func_name": "check_if_this_project_is_in_database", "func_src_before": "    def check_if_this_project_is_in_database(self, project_id):\n        self.cursor.execute(\"SELECT count(id) FROM projects where id = %s\" % project_id)\n        return self.cursor.fetchall()[0][0] == 1", "func_src_after": "    def check_if_this_project_is_in_database(self, project_id):\n        self.cursor.execute(\"SELECT count(id) FROM projects where id = %s\", (project_id,))\n        return self.cursor.fetchall()[0][0] == 1", "commit_link": "github.com/JLucka/kickstarter-dev/commit/e2ffa062697e060fdfbd2eccbb89a8c53a569e0b", "file_name": "backend/transactions/TransactionConnector.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 2, "char_start": 64, "char_end": 153, "line": "        self.cursor.execute(\"SELECT count(id) FROM projects where id = %s\" % project_id)\n"}], "added": [{"line_no": 2, "char_start": 64, "char_end": 155, "line": "        self.cursor.execute(\"SELECT count(id) FROM projects where id = %s\", (project_id,))\n"}]}, "char_changes": {"deleted": [{"char_start": 138, "char_end": 140, "chars": " %"}], "added": [{"char_start": 138, "char_end": 139, "chars": ","}, {"char_start": 140, "char_end": 141, "chars": "("}, {"char_start": 151, "char_end": 153, "chars": ",)"}]}}
{"func_name": "edit_page", "func_src_before": "@app.route(\"/<page_name>/edit\")\ndef edit_page(page_name):\n    query = db.query(\"select * from page where title = '%s'\" % page_name).namedresult()\n    if len(query) == 0:\n        return render_template(\n            \"edit.html\",\n            page_name=page_name,\n            query=query\n        )\n    else:\n        return render_template(\n            \"edit.html\",\n            page_name=page_name,\n            query=query[0]\n        )", "func_src_after": "@app.route(\"/<page_name>/edit\")\ndef edit_page(page_name):\n    query = db.query(\"select * from page where title = $1\", page_name).namedresult()\n    if len(query) == 0:\n        return render_template(\n            \"edit.html\",\n            page_name=page_name,\n            query=query\n        )\n    else:\n        return render_template(\n            \"edit.html\",\n            page_name=page_name,\n            query=query[0]\n        )", "commit_link": "github.com/jcortes0309/wiki_flask/commit/a6bf5316abe2eb528adf36c8241a013fd02c5ffa", "file_name": "server.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 3, "char_start": 58, "char_end": 146, "line": "    query = db.query(\"select * from page where title = '%s'\" % page_name).namedresult()\n"}], "added": [{"line_no": 3, "char_start": 58, "char_end": 143, "line": "    query = db.query(\"select * from page where title = $1\", page_name).namedresult()\n"}]}, "char_changes": {"deleted": [{"char_start": 113, "char_end": 117, "chars": "'%s'"}, {"char_start": 118, "char_end": 120, "chars": " %"}], "added": [{"char_start": 113, "char_end": 115, "chars": "$1"}, {"char_start": 116, "char_end": 117, "chars": ","}]}}
{"func_name": "reportMatch", "func_src_before": "def reportMatch(winner, loser):\n    \"\"\"Records the outcome of a single match between two players.\n\n    Args:\n      winner:  the id number of the player who won\n      loser:  the id number of the player who lost\n    \"\"\"\n    conn = connect()\n    cursor = conn.cursor()\n    cursor.execute(\"INSERT INTO playsRecord (winner, loser) VALUES ('%s', '%s')\" % (winner, loser));\n    conn.commit()\n    conn.close()", "func_src_after": "def reportMatch(winner, loser):\n    \"\"\"Records the outcome of a single match between two players.\n\n    Args:\n      winner:  the id number of the player who won\n      loser:  the id number of the player who lost\n    \"\"\"\n    conn = connect()\n    cursor = conn.cursor()\n    query = \"INSERT INTO playsRecord (winner, loser) VALUES (%s, %s);\"\n    cursor.execute(query, (winner, loser));\n    conn.commit()\n    conn.close()", "commit_link": "github.com/sarahkcaplan/tournament/commit/40aba5686059f5f398f6323b1483412c56140cc0", "file_name": "tournament.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 10, "char_start": 267, "char_end": 368, "line": "    cursor.execute(\"INSERT INTO playsRecord (winner, loser) VALUES ('%s', '%s')\" % (winner, loser));\n"}], "added": [{"line_no": 10, "char_start": 267, "char_end": 338, "line": "    query = \"INSERT INTO playsRecord (winner, loser) VALUES (%s, %s);\"\n"}, {"line_no": 11, "char_start": 338, "char_end": 382, "line": "    cursor.execute(query, (winner, loser));\n"}]}, "char_changes": {"deleted": [{"char_start": 271, "char_end": 272, "chars": "c"}, {"char_start": 273, "char_end": 276, "chars": "rso"}, {"char_start": 277, "char_end": 286, "chars": ".execute("}, {"char_start": 335, "char_end": 336, "chars": "'"}, {"char_start": 338, "char_end": 339, "chars": "'"}, {"char_start": 341, "char_end": 342, "chars": "'"}, {"char_start": 344, "char_end": 345, "chars": "'"}, {"char_start": 348, "char_end": 349, "chars": "%"}], "added": [{"char_start": 271, "char_end": 272, "chars": "q"}, {"char_start": 274, "char_end": 279, "chars": "ry = "}, {"char_start": 335, "char_end": 336, "chars": ";"}, {"char_start": 337, "char_end": 340, "chars": "\n  "}, {"char_start": 341, "char_end": 363, "chars": " cursor.execute(query,"}]}}
{"func_name": "get_game_info", "func_src_before": "def get_game_info(conn, game):\n    # get the basic game properties\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT player1,player2,size,state FROM games WHERE id = %d;\" % game)\n    if cursor.rowcount != 1:\n        raise FormError(\"Invalid game ID\")\n\n    row = cursor.fetchall()[0]\n    players = [row[0],row[1]]\n    size    =  row[2]\n    state   =  row[3]\n\n    if state is None:\n         state = \"Active\"\n\n    cursor.close()\n\n    return (players,size,state)", "func_src_after": "def get_game_info(conn, game):\n    # get the basic game properties\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT player1,player2,size,state FROM games WHERE id = %d;\", (game,))\n    if cursor.rowcount != 1:\n        raise FormError(\"Invalid game ID\")\n\n    row = cursor.fetchall()[0]\n    players = [row[0],row[1]]\n    size    =  row[2]\n    state   =  row[3]\n\n    if state is None:\n         state = \"Active\"\n\n    cursor.close()\n\n    return (players,size,state)", "commit_link": "github.com/russ-lewis/ttt_-_python_cgi/commit/6096f43fd4b2d91211eec4614b7960c0816900da", "file_name": "cgi/common.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 4, "char_start": 94, "char_end": 183, "line": "    cursor.execute(\"SELECT player1,player2,size,state FROM games WHERE id = %d;\" % game)\n"}], "added": [{"line_no": 4, "char_start": 94, "char_end": 185, "line": "    cursor.execute(\"SELECT player1,player2,size,state FROM games WHERE id = %d;\", (game,))\n"}]}, "char_changes": {"deleted": [{"char_start": 174, "char_end": 176, "chars": " %"}], "added": [{"char_start": 174, "char_end": 175, "chars": ","}, {"char_start": 176, "char_end": 177, "chars": "("}, {"char_start": 181, "char_end": 183, "chars": ",)"}]}}
{"func_name": "process_as_reply", "func_src_before": "def process_as_reply(email_obj):\n    job_number = email_obj['subject'].split(': #')[1]\n    feedback = re.findall(\"^[\\W]*([Oo\\d]){1}(?=[\\W]*)\", email_obj['content'].replace('#','').replace('link', ''))[0]\n    feedback = int(0 if feedback == ('O' or 'o') else feedback)\n    dcn_key = re.findall('\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}', email_obj['content'])[0]\n    logger.info(f\"got feedback `{feedback}` for job #`{job_number}`\")\n    with create_connection() as conn:\n        was_prev_closed = pd.read_sql(f\"SELECT * FROM df_dilfo WHERE job_number={job_number}\", conn).iloc[0].closed\n    if was_prev_closed:\n        logger.info(f\"job was already matched successfully and logged as `closed`... skipping.\")\n        return\n    if feedback == 1:\n        logger.info(f\"got feeback that DCN key {dcn_key} was correct\")\n        update_status_query = \"UPDATE df_dilfo SET closed = 1 WHERE job_number = {}\"\n        with create_connection() as conn:\n            conn.cursor().execute(update_status_query.format(job_number))\n        logger.info(f\"updated df_dilfo to show `closed` status for job #{job_number}\")\n    with create_connection() as conn:\n        df = pd.read_sql(\"SELECT * FROM df_matched\", conn)\n        match_dict_input = {\n            'job_number': job_number,\n            'dcn_key': dcn_key,\n            'ground_truth': 1 if feedback == 1 else 0,\n            'multi_phase': 1 if feedback == 2 else 0,\n            'verifier': email_obj[\"sender\"],\n            'source': 'feedback',\n            'log_date': str(datetime.datetime.now().date()),\n            'validate': 0,\n        }\n        df = df.append(match_dict_input, ignore_index=True)\n        df = df.drop_duplicates(subset=[\"job_number\", \"dcn_key\"], keep='last')\n        df.to_sql('df_matched', conn, if_exists='replace', index=False)\n        logger.info(\n            f\"DCN key `{dcn_key}` was a \"\n            f\"{'successful match' if feedback == 1 else 'mis-match'} for job \"\n            f\"#{job_number}\"\n        )", "func_src_after": "def process_as_reply(email_obj):\n    job_number = email_obj['subject'].split(': #')[1]\n    feedback = re.findall(\"^[\\W]*([Oo\\d]){1}(?=[\\W]*)\", email_obj['content'].replace('#','').replace('link', ''))[0]\n    feedback = int(0 if feedback == ('O' or 'o') else feedback)\n    dcn_key = re.findall('\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}', email_obj['content'])[0]\n    logger.info(f\"got feedback `{feedback}` for job #`{job_number}`\")\n    with create_connection() as conn:\n        was_prev_closed = pd.read_sql(\"SELECT * FROM df_dilfo WHERE job_number=?\", conn, params=[job_number]).iloc[0].closed\n    if was_prev_closed:\n        logger.info(f\"job was already matched successfully and logged as `closed`... skipping.\")\n        return\n    if feedback == 1:\n        logger.info(f\"got feeback that DCN key {dcn_key} was correct\")\n        update_status_query = \"UPDATE df_dilfo SET closed = 1 WHERE job_number = ?\"\n        with create_connection() as conn:\n            conn.cursor().execute(update_status_query, [job_number])\n        logger.info(f\"updated df_dilfo to show `closed` status for job #{job_number}\")\n    with create_connection() as conn:\n        df = pd.read_sql(\"SELECT * FROM df_matched\", conn)\n        match_dict_input = {\n            'job_number': job_number,\n            'dcn_key': dcn_key,\n            'ground_truth': 1 if feedback == 1 else 0,\n            'multi_phase': 1 if feedback == 2 else 0,\n            'verifier': email_obj[\"sender\"],\n            'source': 'feedback',\n            'log_date': str(datetime.datetime.now().date()),\n            'validate': 0,\n        }\n        df = df.append(match_dict_input, ignore_index=True)\n        df = df.drop_duplicates(subset=[\"job_number\", \"dcn_key\"], keep='last')\n        df.to_sql('df_matched', conn, if_exists='replace', index=False)\n        logger.info(\n            f\"DCN key `{dcn_key}` was a \"\n            f\"{'successful match' if feedback == 1 else 'mis-match'} for job \"\n            f\"#{job_number}\"\n        )", "commit_link": "github.com/confirmationbias616/certificate_checker/commit/9e890b9613b627e3a5995d0e4a594c8e0831e2ce", "file_name": "inbox_scanner.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 8, "char_start": 460, "char_end": 576, "line": "        was_prev_closed = pd.read_sql(f\"SELECT * FROM df_dilfo WHERE job_number={job_number}\", conn).iloc[0].closed\n"}, {"line_no": 14, "char_start": 805, "char_end": 890, "line": "        update_status_query = \"UPDATE df_dilfo SET closed = 1 WHERE job_number = {}\"\n"}, {"line_no": 16, "char_start": 932, "char_end": 1006, "line": "            conn.cursor().execute(update_status_query.format(job_number))\n"}], "added": [{"line_no": 8, "char_start": 460, "char_end": 585, "line": "        was_prev_closed = pd.read_sql(\"SELECT * FROM df_dilfo WHERE job_number=?\", conn, params=[job_number]).iloc[0].closed\n"}, {"line_no": 14, "char_start": 814, "char_end": 898, "line": "        update_status_query = \"UPDATE df_dilfo SET closed = 1 WHERE job_number = ?\"\n"}, {"line_no": 16, "char_start": 940, "char_end": 1009, "line": "            conn.cursor().execute(update_status_query, [job_number])\n"}]}, "char_changes": {"deleted": [{"char_start": 498, "char_end": 499, "chars": "f"}, {"char_start": 540, "char_end": 541, "chars": "{"}, {"char_start": 551, "char_end": 559, "chars": "}\", conn"}, {"char_start": 886, "char_end": 888, "chars": "{}"}, {"char_start": 985, "char_end": 993, "chars": ".format("}, {"char_start": 1003, "char_end": 1004, "chars": ")"}], "added": [{"char_start": 539, "char_end": 557, "chars": "?\", conn, params=["}, {"char_start": 567, "char_end": 568, "chars": "]"}, {"char_start": 895, "char_end": 896, "chars": "?"}, {"char_start": 993, "char_end": 996, "chars": ", ["}, {"char_start": 1006, "char_end": 1007, "chars": "]"}]}}
{"func_name": "update_playlist", "func_src_before": "def update_playlist(id, name, db):\n    db.execute(\n        \"UPDATE playlist SET name='{name}' WHERE id={id};\".format(name=name, id=id))", "func_src_after": "def update_playlist(id, name, db):\n    db.execute(\"UPDATE playlist SET name=%s WHERE id=%s;\", (name, id,))", "commit_link": "github.com/Madmous/playlist/commit/666e52c5f0b8c1f4296e84471637033d9542a7a6", "file_name": "playlist/playlist_repository.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 2, "char_start": 35, "char_end": 51, "line": "    db.execute(\n"}, {"line_no": 3, "char_start": 51, "char_end": 135, "line": "        \"UPDATE playlist SET name='{name}' WHERE id={id};\".format(name=name, id=id))\n"}], "added": [{"line_no": 2, "char_start": 35, "char_end": 106, "line": "    db.execute(\"UPDATE playlist SET name=%s WHERE id=%s;\", (name, id,))\n"}]}, "char_changes": {"deleted": [{"char_start": 50, "char_end": 59, "chars": "\n        "}, {"char_start": 85, "char_end": 93, "chars": "'{name}'"}, {"char_start": 103, "char_end": 107, "chars": "{id}"}, {"char_start": 109, "char_end": 116, "chars": ".format"}, {"char_start": 121, "char_end": 126, "chars": "=name"}, {"char_start": 130, "char_end": 133, "chars": "=id"}], "added": [{"char_start": 76, "char_end": 78, "chars": "%s"}, {"char_start": 88, "char_end": 90, "chars": "%s"}, {"char_start": 92, "char_end": 94, "chars": ", "}, {"char_start": 103, "char_end": 104, "chars": ","}]}}
{"func_name": "get_requested_month", "func_src_before": "    def get_requested_month(self, date):\n        data = dict()\n\n        month_start, month_end = self.get_epoch_month(date)\n        data['interval'] = {'from': self.convert_local_ts_to_utc(month_start, self.local_timezone), 'to': self.convert_local_ts_to_utc(month_end, self.local_timezone)}\n        month_total = 0\n\n        query = '''\n            SELECT TimeStamp, SUM(DayYield) AS Power \n            FROM MonthData \n            WHERE TimeStamp BETWEEN %s AND %s\n            GROUP BY TimeStamp\n            '''\n\n        data['data'] = list()\n        for row in self.c.execute(query % (month_start, month_end)):\n            data['data'].append({'time': self.convert_local_ts_to_utc(row[0], self.local_timezone), 'power': row[1]})\n            month_total += row[1]\n\n        data['total'] = month_total\n\n        query = '''\n            SELECT MIN(TimeStamp) as Min, MAX(TimeStamp) as Max \n            FROM ( SELECT TimeStamp FROM MonthData GROUP BY TimeStamp );\n            '''\n\n        self.c.execute(query)\n        first_data, last_data = self.c.fetchone()\n\n        if first_data: data['hasPrevious'] = (first_data < month_start)\n        else: data['hasPrevious'] = False\n        if last_data: data['hasNext'] = (last_data > month_end)\n        else: data['hasNext'] = False\n\n        return data", "func_src_after": "    def get_requested_month(self, date):\n        data = dict()\n\n        month_start, month_end = self.get_epoch_month(date)\n        data['interval'] = {'from': self.convert_local_ts_to_utc(month_start, self.local_timezone), 'to': self.convert_local_ts_to_utc(month_end, self.local_timezone)}\n        month_total = 0\n\n        query = '''\n            SELECT TimeStamp, SUM(DayYield) AS Power \n            FROM MonthData \n            WHERE TimeStamp BETWEEN ? AND ?\n            GROUP BY TimeStamp;\n            '''\n\n        data['data'] = list()\n        for row in self.c.execute(query, (month_start, month_end)):\n            data['data'].append({'time': self.convert_local_ts_to_utc(row[0], self.local_timezone), 'power': row[1]})\n            month_total += row[1]\n\n        data['total'] = month_total\n\n        query = '''\n            SELECT MIN(TimeStamp) as Min, MAX(TimeStamp) as Max \n            FROM ( SELECT TimeStamp FROM MonthData GROUP BY TimeStamp );\n            '''\n\n        self.c.execute(query)\n        first_data, last_data = self.c.fetchone()\n\n        if first_data: data['hasPrevious'] = (first_data < month_start)\n        else: data['hasPrevious'] = False\n        if last_data: data['hasNext'] = (last_data > month_end)\n        else: data['hasNext'] = False\n\n        return data", "commit_link": "github.com/philipptrenz/sunportal/commit/7eef493a168ed4e6731ff800713bfb8aee99a506", "file_name": "util/database.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 11, "char_start": 419, "char_end": 465, "line": "            WHERE TimeStamp BETWEEN %s AND %s\n"}, {"line_no": 12, "char_start": 465, "char_end": 496, "line": "            GROUP BY TimeStamp\n"}, {"line_no": 16, "char_start": 543, "char_end": 612, "line": "        for row in self.c.execute(query % (month_start, month_end)):\n"}], "added": [{"line_no": 11, "char_start": 419, "char_end": 463, "line": "            WHERE TimeStamp BETWEEN ? AND ?\n"}, {"line_no": 12, "char_start": 463, "char_end": 495, "line": "            GROUP BY TimeStamp;\n"}, {"line_no": 16, "char_start": 542, "char_end": 610, "line": "        for row in self.c.execute(query, (month_start, month_end)):\n"}]}, "char_changes": {"deleted": [{"char_start": 455, "char_end": 457, "chars": "%s"}, {"char_start": 462, "char_end": 464, "chars": "%s"}, {"char_start": 582, "char_end": 584, "chars": " %"}], "added": [{"char_start": 455, "char_end": 456, "chars": "?"}, {"char_start": 461, "char_end": 462, "chars": "?"}, {"char_start": 493, "char_end": 494, "chars": ";"}, {"char_start": 581, "char_end": 582, "chars": ","}]}}
{"func_name": "retrieve_videos_from_playlist", "func_src_before": "def retrieve_videos_from_playlist(playlist_id, db):\n    db.execute(\"SELECT id, title, thumbnail, position from video WHERE playlist_id={playlist_id} ORDER BY position ASC;\".format(\n        playlist_id=playlist_id))\n    rows = db.fetchall()\n    return rows", "func_src_after": "def retrieve_videos_from_playlist(playlist_id, db):\n    db.execute(\"SELECT id, title, thumbnail, position from video WHERE playlist_id=%s ORDER BY position ASC;\", (playlist_id,))\n    rows = db.fetchall()\n    return rows", "commit_link": "github.com/Madmous/playlist/commit/666e52c5f0b8c1f4296e84471637033d9542a7a6", "file_name": "video/video_repository.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 2, "char_start": 52, "char_end": 181, "line": "    db.execute(\"SELECT id, title, thumbnail, position from video WHERE playlist_id={playlist_id} ORDER BY position ASC;\".format(\n"}, {"line_no": 3, "char_start": 181, "char_end": 215, "line": "        playlist_id=playlist_id))\n"}], "added": [{"line_no": 2, "char_start": 52, "char_end": 179, "line": "    db.execute(\"SELECT id, title, thumbnail, position from video WHERE playlist_id=%s ORDER BY position ASC;\", (playlist_id,))\n"}]}, "char_changes": {"deleted": [{"char_start": 135, "char_end": 142, "chars": "{playli"}, {"char_start": 143, "char_end": 148, "chars": "t_id}"}, {"char_start": 172, "char_end": 186, "chars": ".format(\n     "}, {"char_start": 187, "char_end": 201, "chars": "  playlist_id="}], "added": [{"char_start": 135, "char_end": 136, "chars": "%"}, {"char_start": 161, "char_end": 163, "chars": ", "}, {"char_start": 175, "char_end": 176, "chars": ","}]}}
{"func_name": "create_playlist", "func_src_before": "def create_playlist(name):\n    db = connect_to_database()\n    cursor = db.cursor()\n    cursor.execute(\n        \"INSERT INTO playlist (name, video_position) VALUES('{name}', 0);\".format(name=name))\n    db.commit()\n    db.close()", "func_src_after": "def create_playlist(name):\n    db = connect_to_database()\n    cursor = db.cursor()\n    cursor.execute(\n        \"INSERT INTO playlist (name, video_position) VALUES(%s, 0);\", (name,))\n    db.commit()\n    db.close()", "commit_link": "github.com/Madmous/playlist/commit/666e52c5f0b8c1f4296e84471637033d9542a7a6", "file_name": "main_test.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 5, "char_start": 103, "char_end": 197, "line": "        \"INSERT INTO playlist (name, video_position) VALUES('{name}', 0);\".format(name=name))\n"}], "added": [{"line_no": 5, "char_start": 103, "char_end": 182, "line": "        \"INSERT INTO playlist (name, video_position) VALUES(%s, 0);\", (name,))\n"}]}, "char_changes": {"deleted": [{"char_start": 163, "char_end": 171, "chars": "'{name}'"}, {"char_start": 177, "char_end": 184, "chars": ".format"}, {"char_start": 189, "char_end": 194, "chars": "=name"}], "added": [{"char_start": 163, "char_end": 165, "chars": "%s"}, {"char_start": 171, "char_end": 173, "chars": ", "}, {"char_start": 178, "char_end": 179, "chars": ","}]}}
{"func_name": "update_video_positions", "func_src_before": "def update_video_positions(removed_position, db):\n    db.execute(\"UPDATE video SET position = position - 1 WHERE position > {removed_position}\".format(\n        removed_position=removed_position))", "func_src_after": "def update_video_positions(removed_position, db):\n    db.execute(\"UPDATE video SET position = position - 1 WHERE position > %s\", (removed_position,))", "commit_link": "github.com/Madmous/playlist/commit/666e52c5f0b8c1f4296e84471637033d9542a7a6", "file_name": "video/video_repository.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 2, "char_start": 50, "char_end": 152, "line": "    db.execute(\"UPDATE video SET position = position - 1 WHERE position > {removed_position}\".format(\n"}, {"line_no": 3, "char_start": 152, "char_end": 195, "line": "        removed_position=removed_position))\n"}], "added": [{"line_no": 2, "char_start": 50, "char_end": 149, "line": "    db.execute(\"UPDATE video SET position = position - 1 WHERE position > %s\", (removed_position,))\n"}]}, "char_changes": {"deleted": [{"char_start": 124, "char_end": 135, "chars": "{removed_po"}, {"char_start": 136, "char_end": 142, "chars": "ition}"}, {"char_start": 143, "char_end": 152, "chars": ".format(\n"}, {"char_start": 153, "char_end": 160, "chars": "       "}, {"char_start": 176, "char_end": 193, "chars": "=removed_position"}], "added": [{"char_start": 124, "char_end": 125, "chars": "%"}, {"char_start": 127, "char_end": 129, "chars": ", "}, {"char_start": 146, "char_end": 147, "chars": ","}]}}
{"func_name": "_check_camera_tags", "func_src_before": "    @staticmethod\n    def _check_camera_tags(tags):\n        \"\"\"\n        Function that convert stupid code name of a smartphone or camera\n        from EXIF to meaningful one by looking a collation in a special MySQL\n        table For example instead of just Nikon there can be\n        NIKON CORPORATION in EXIF\n\n        :param tags: name of a camera and lens from EXIF\n        :return: list with one or two strings which are name of\n        camera and/or lens. If there is not better name for the gadget\n        in database, function just returns name how it is\n        \"\"\"\n        checked_tags = []\n\n        for tag in tags:\n            if tag:  # If there was this information inside EXIF of the photo\n                tag = str(tag).strip()\n                log.info('Looking up collation for %s', tag)\n                query = ('SELECT right_tag '\n                         'FROM tag_table '\n                         'WHERE wrong_tag=\"{}\"'.format(tag))\n                cursor = db.execute_query(query)\n                if not cursor:\n                    log.error(\"Can't check the tag because of the db error\")\n                    log.warning(\"Tag will stay as is.\")\n                    continue\n                if cursor.rowcount:\n                    # Get appropriate tag from the table\n                    tag = cursor.fetchone()[0]\n                    log.info('Tag after looking up in tag_tables - %s.', tag)\n\n            checked_tags.append(tag)\n        return checked_tags", "func_src_after": "    @staticmethod\n    def _check_camera_tags(tags):\n        \"\"\"\n        Function that convert stupid code name of a smartphone or camera\n        from EXIF to meaningful one by looking a collation in a special MySQL\n        table For example instead of just Nikon there can be\n        NIKON CORPORATION in EXIF\n\n        :param tags: name of a camera and lens from EXIF\n        :return: list with one or two strings which are name of\n        camera and/or lens. If there is not better name for the gadget\n        in database, function just returns name how it is\n        \"\"\"\n        checked_tags = []\n\n        for tag in tags:\n            if tag:  # If there was this information inside EXIF of the photo\n                tag = str(tag).strip()\n                log.info('Looking up collation for %s', tag)\n                query = ('SELECT right_tag '\n                         'FROM tag_table '\n                         'WHERE wrong_tag=%s')\n                parameters = tag,\n                cursor = db.execute_query(query, parameters)\n                if not cursor:\n                    log.error(\"Can't check the tag because of the db error\")\n                    log.warning(\"Tag will stay as is.\")\n                    continue\n                if cursor.rowcount:\n                    # Get appropriate tag from the table\n                    tag = cursor.fetchone()[0]\n                    log.info('Tag after looking up in tag_tables - %s.', tag)\n\n            checked_tags.append(tag)\n        return checked_tags", "commit_link": "github.com/RandyRomero/photoGPSbot/commit/0e9f57f13e61863b3672f5730e27f149da00786a", "file_name": "photogpsbot/process_image.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 22, "char_start": 891, "char_end": 952, "line": "                         'WHERE wrong_tag=\"{}\"'.format(tag))\n"}, {"line_no": 23, "char_start": 952, "char_end": 1001, "line": "                cursor = db.execute_query(query)\n"}], "added": [{"line_no": 22, "char_start": 891, "char_end": 938, "line": "                         'WHERE wrong_tag=%s')\n"}, {"line_no": 23, "char_start": 938, "char_end": 972, "line": "                parameters = tag,\n"}, {"line_no": 24, "char_start": 972, "char_end": 1033, "line": "                cursor = db.execute_query(query, parameters)\n"}]}, "char_changes": {"deleted": [{"char_start": 933, "char_end": 937, "chars": "\"{}\""}, {"char_start": 938, "char_end": 941, "chars": ".fo"}, {"char_start": 942, "char_end": 943, "chars": "m"}, {"char_start": 945, "char_end": 946, "chars": "("}, {"char_start": 949, "char_end": 951, "chars": "))"}], "added": [{"char_start": 933, "char_end": 935, "chars": "%s"}, {"char_start": 936, "char_end": 956, "chars": ")\n                pa"}, {"char_start": 957, "char_end": 958, "chars": "a"}, {"char_start": 959, "char_end": 960, "chars": "e"}, {"char_start": 961, "char_end": 967, "chars": "ers = "}, {"char_start": 970, "char_end": 971, "chars": ","}, {"char_start": 1019, "char_end": 1031, "chars": ", parameters"}]}}
{"func_name": "add_input", "func_src_before": "\tdef add_input(self, data):\n\t\tconnection = self.connect()\n\t\ttry:\n\t\t\t# The following introduces a deliberate security flaw.See section on SQL injection below\n\t\t\tquery = \"INSERT INTO crimes (description) VALUES('{}');\".format(data)\n\t\t\twith connection.cursor() as cursor:\n\t\t\t\tcursor.execute(query)\n\t\t\t\tconnection.commit()\n\t\tfinally:\n\t\t\tconnection.close()", "func_src_after": "\tdef add_input(self, data):\n\t\tconnection = self.connect()\n\t\ttry:\n\t\t\t# The following introduces a deliberate security flaw.See section on SQL injection below\n\t\t\tquery = \"INSERT INTO crimes (description) VALUES (%s);\"\n\t\t\twith connection.cursor() as cursor:\n\t\t\t\tcursor.execute(query, data)\n\t\t\t\tconnection.commit()\n\t\tfinally:\n\t\t\tconnection.close()", "commit_link": "github.com/fangyansun/crimemap/commit/a3ab652c214f801c2910e2f96e4de18848de58ae", "file_name": "dbhelper.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 5, "char_start": 157, "char_end": 230, "line": "\t\t\tquery = \"INSERT INTO crimes (description) VALUES('{}');\".format(data)\n"}, {"line_no": 7, "char_start": 269, "char_end": 295, "line": "\t\t\t\tcursor.execute(query)\n"}], "added": [{"line_no": 5, "char_start": 157, "char_end": 216, "line": "\t\t\tquery = \"INSERT INTO crimes (description) VALUES (%s);\"\n"}, {"line_no": 7, "char_start": 255, "char_end": 287, "line": "\t\t\t\tcursor.execute(query, data)\n"}]}, "char_changes": {"deleted": [{"char_start": 209, "char_end": 213, "chars": "'{}'"}, {"char_start": 216, "char_end": 229, "chars": ".format(data)"}], "added": [{"char_start": 208, "char_end": 209, "chars": " "}, {"char_start": 210, "char_end": 212, "chars": "%s"}, {"char_start": 279, "char_end": 285, "chars": ", data"}]}}
{"func_name": "getResults", "func_src_before": "def getResults(poll_name):\n    conn, c = connectDB()\n    req = \"SELECT options from {} where name = '{}'\".format(CFG(\"poll_table_name\"), poll_name)\n    options_str = queryOne(c, req)\n\n    if not options_str:\n        raise LookupError(\"Poll '{}' not found in DB\".format(poll_name))\n\n    total = 0\n    options = options_str.split(\",\")\n    results = dict()\n    for opt in options:\n        count = getOptionCount(c, poll_name, opt)\n        total += int(count)\n        results.update({opt:count})\n\n    conn.close()\n    return (results, total)", "func_src_after": "def getResults(poll_name):\n    conn, c = connectDB()\n    req = \"SELECT options from {} where name=?\".format(CFG(\"poll_table_name\"))\n    options_str = queryOne(c, req, (poll_name,))\n\n    if not options_str:\n        raise LookupError(\"Poll '{}' not found in DB\".format(poll_name))\n\n    total = 0\n    options = options_str.split(\",\")\n    results = dict()\n    for opt in options:\n        count = getOptionCount(c, poll_name, opt)\n        total += int(count)\n        results.update({opt:count})\n\n    conn.close()\n    return (results, total)", "commit_link": "github.com/FAUSheppy/simple-python-poll/commit/186c5ff5cdf58272e253a1bb432419ee50d93109", "file_name": "database.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 3, "char_start": 53, "char_end": 148, "line": "    req = \"SELECT options from {} where name = '{}'\".format(CFG(\"poll_table_name\"), poll_name)\n"}, {"line_no": 4, "char_start": 148, "char_end": 183, "line": "    options_str = queryOne(c, req)\n"}], "added": [{"line_no": 3, "char_start": 53, "char_end": 132, "line": "    req = \"SELECT options from {} where name=?\".format(CFG(\"poll_table_name\"))\n"}, {"line_no": 4, "char_start": 132, "char_end": 181, "line": "    options_str = queryOne(c, req, (poll_name,))\n"}]}, "char_changes": {"deleted": [{"char_start": 97, "char_end": 98, "chars": " "}, {"char_start": 99, "char_end": 104, "chars": " '{}'"}, {"char_start": 135, "char_end": 146, "chars": ", poll_name"}], "added": [{"char_start": 98, "char_end": 99, "chars": "?"}, {"char_start": 165, "char_end": 179, "chars": ", (poll_name,)"}]}}
{"func_name": "update_sources", "func_src_before": "def update_sources(conn, sqlite, k10plus, ai):\n    \"\"\"\n    Update the source table.\n    \"\"\"\n    current_sources = get_all_current_sources(k10plus, ai)\n    old_sources = get_all_old_sources(conn, sqlite)\n\n    # Check if the source table is allready filled and this is not the first checkup\n    source_table_is_filled = len(old_sources) > 100\n\n    for old_source in old_sources:\n        if source_table_is_filled and old_source not in current_sources:\n            message = \"Die SID %s ist im aktuellen Import nicht mehr vorhanden.\\nWenn dies beabsichtigt ist, bitte die SID aus der Datenbank loeschen.\" % old_source\n            send_message(message)\n\n    for current_source in current_sources:\n        if current_source not in old_sources:\n            message = \"The source %s is new in Solr.\" % current_source\n            if source_table_is_filled:\n                send_message(message)\n            else:\n                logging.info(message)\n            sql = \"INSERT INTO source (source) VALUES (%s)\" % current_source\n            sqlite.execute(sql)\n            conn.commit()", "func_src_after": "def update_sources(conn, sqlite, k10plus, ai):\n    \"\"\"\n    Update the source table.\n    \"\"\"\n    current_sources = get_all_current_sources(k10plus, ai)\n    old_sources = get_all_old_sources(conn, sqlite)\n\n    # Check if the source table is allready filled and this is not the first checkup\n    source_table_is_filled = len(old_sources) > 100\n\n    for old_source in old_sources:\n        if source_table_is_filled and old_source not in current_sources:\n            message = \"Die SID %s ist im aktuellen Import nicht mehr vorhanden.\\nWenn dies beabsichtigt ist, bitte die SID aus der Datenbank loeschen.\" % old_source\n            send_message(message)\n\n    for current_source in current_sources:\n        if current_source not in old_sources:\n            message = \"The source %s is new in Solr.\" % current_source\n            if source_table_is_filled:\n                send_message(message)\n            else:\n                logging.info(message)\n            sql = \"INSERT INTO source (source) VALUES (?)\"\n            sqlite.execute(sql, (current_source,))\n            conn.commit()", "commit_link": "github.com/miku/siskin/commit/7fa398d2fea72bf2e8b4808f75df4b3d35ae959a", "file_name": "bin/solrcheckup.py", "vul_type": "cwe-089", "line_changes": {"deleted": [{"line_no": 23, "char_start": 943, "char_end": 1020, "line": "            sql = \"INSERT INTO source (source) VALUES (%s)\" % current_source\n"}, {"line_no": 24, "char_start": 1020, "char_end": 1052, "line": "            sqlite.execute(sql)\n"}], "added": [{"line_no": 23, "char_start": 943, "char_end": 1002, "line": "            sql = \"INSERT INTO source (source) VALUES (?)\"\n"}, {"line_no": 24, "char_start": 1002, "char_end": 1053, "line": "            sqlite.execute(sql, (current_source,))\n"}]}, "char_changes": {"deleted": [{"char_start": 998, "char_end": 1000, "chars": "%s"}, {"char_start": 1002, "char_end": 1019, "chars": " % current_source"}], "added": [{"char_start": 998, "char_end": 999, "chars": "?"}, {"char_start": 1032, "char_end": 1051, "chars": ", (current_source,)"}]}}
