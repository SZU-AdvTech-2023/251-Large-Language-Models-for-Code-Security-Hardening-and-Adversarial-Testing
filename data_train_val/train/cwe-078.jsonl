{"func_name": "start", "func_src_before": "def start():\n    print(\"[*] Starting backdoor process\")\n    print(\"[*] Decompressing target to tmp directory...\")\n    #subprocess.call(\"jar -x %s\" % target, shell=True)\n    with zipfile.ZipFile(target, 'r') as zip:\n        zip.extractall(\"tmp\")\n    print(\"[*] Target dumped to tmp directory\")\n\n    print(\"[*] Modifying manifest file...\")\n    oldmain=\"\"\n    man = open(\"tmp/META-INF/MANIFEST.MF\",\"r\").read()\n    with open(\"tmp/META-INF/MANIFEST.MF\",\"w\") as f:\n        for l in man.split(\"\\n\"):\n            if \"Main-Class\" in l:\n                oldmain=l[12:]\n                f.write(\"Main-Class: %s\\n\" % \"Backdoor\")\n            else:\n                f.write(\"%s\\n\" % l)\n    print(\"[*] Manifest file modified\")\n    \n    print(\"[*] Modifying provided backdoor...\")\n    inmain=False\n    level=0\n    bd=open(backdoor, \"r\").read()\n    with open(\"tmp/%s\" % backdoor,'w') as f:\n        for l in bd.split(\"\\n\"):\n            if \"main(\" in l:\n                inmain=True\n                f.write(l)\n            elif \"}\" in l and level<2 and inmain:\n                f.write(\"%s.main(args);}\" % oldmain)\n                inmain=False\n            elif \"}\" in l and level>1 and inmain:\n                level-=1\n                f.write(l)\n            elif \"{\" in l and inmain:\n                level+=1\n                f.write(l)\n            else:\n                f.write(l)\n    print(\"[*] Provided backdoor successfully modified\")\n\n    print(\"[*] Compiling modified backdoor...\")\n    if subprocess.call(\"javac -cp tmp/ tmp/%s\" % backdoor, shell=True) != 0:\n        print(\"[!] Error compiling %s\" % backdoor)\n    print(\"[*] Compiled modified backdoor\")\n                \n    if(len(oldmain)<1):\n        print(\"[!] Main-Class manifest attribute not found\")\n    else:\n        print(\"[*] Repackaging target jar file...\")\n        createZip(\"tmp\",outfile)\n        print(\"[*] Target jar successfully repackaged\")\n    shutil.rmtree('tmp/')", "func_src_after": "def start():\n    print(\"[*] Starting backdoor process\")\n    print(\"[*] Decompressing target to tmp directory...\")\n    #subprocess.call(\"jar -x %s\" % target, shell=True)\n    with zipfile.ZipFile(target, 'r') as zip:\n        zip.extractall(\"tmp\")\n    print(\"[*] Target dumped to tmp directory\")\n\n    print(\"[*] Modifying manifest file...\")\n    oldmain=\"\"\n    man = open(\"tmp/META-INF/MANIFEST.MF\",\"r\").read()\n    with open(\"tmp/META-INF/MANIFEST.MF\",\"w\") as f:\n        for l in man.split(\"\\n\"):\n            if \"Main-Class\" in l:\n                oldmain=l[12:]\n                f.write(\"Main-Class: %s\\n\" % \"Backdoor\")\n            else:\n                f.write(\"%s\\n\" % l)\n    print(\"[*] Manifest file modified\")\n    \n    print(\"[*] Modifying provided backdoor...\")\n    inmain=False\n    level=0\n    bd=open(backdoor, \"r\").read()\n    with open(\"tmp/%s\" % backdoor,'w') as f:\n        for l in bd.split(\"\\n\"):\n            if \"main(\" in l:\n                inmain=True\n                f.write(l)\n            elif \"}\" in l and level<2 and inmain:\n                f.write(\"%s.main(args);}\" % oldmain)\n                inmain=False\n            elif \"}\" in l and level>1 and inmain:\n                level-=1\n                f.write(l)\n            elif \"{\" in l and inmain:\n                level+=1\n                f.write(l)\n            else:\n                f.write(l)\n    print(\"[*] Provided backdoor successfully modified\")\n\n    print(\"[*] Compiling modified backdoor...\")\n    #if subprocess.call(\"javac -cp tmp/ tmp/%s\" % backdoor, shell=True) != 0:\n    if subprocess.call(['javac','-cp','tmp/','tmp/%s'%backdoor],shell=False) != 0:\n        print(\"[!] Error compiling %s\" % backdoor)\n    print(\"[*] Compiled modified backdoor\")\n                \n    if(len(oldmain)<1):\n        print(\"[!] Main-Class manifest attribute not found\")\n    else:\n        print(\"[*] Repackaging target jar file...\")\n        createZip(\"tmp\",outfile)\n        print(\"[*] Target jar successfully repackaged\")\n    shutil.rmtree('tmp/')", "line_changes": {"deleted": [{"line_no": 44, "char_start": 1462, "char_end": 1539, "line": "    if subprocess.call(\"javac -cp tmp/ tmp/%s\" % backdoor, shell=True) != 0:\n"}], "added": [{"line_no": 45, "char_start": 1540, "char_end": 1623, "line": "    if subprocess.call(['javac','-cp','tmp/','tmp/%s'%backdoor],shell=False) != 0:\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 1466, "char_end": 1467, "chars": "#"}, {"char_start": 1531, "char_end": 1614, "chars": "e) != 0:\n    if subprocess.call(['javac','-cp','tmp/','tmp/%s'%backdoor],shell=Fals"}]}, "commit_link": "github.com/Atticuss/ajar/commit/5ed8aba271ad20e6168f2e3bd6c25ba89b84484f", "file_name": "ajar.py", "vul_type": "cwe-078"}
{"func_name": "_map_vol_to_host", "func_src_before": "    def _map_vol_to_host(self, volume_name, host_name):\n        \"\"\"Create a mapping between a volume to a host.\"\"\"\n\n        LOG.debug(_('enter: _map_vol_to_host: volume %(volume_name)s to '\n                    'host %(host_name)s')\n                  % {'volume_name': volume_name, 'host_name': host_name})\n\n        # Check if this volume is already mapped to this host\n        mapping_data = self._get_hostvdisk_mappings(host_name)\n\n        mapped_flag = False\n        result_lun = '-1'\n        if volume_name in mapping_data:\n            mapped_flag = True\n            result_lun = mapping_data[volume_name]['SCSI_id']\n        else:\n            lun_used = [int(v['SCSI_id']) for v in mapping_data.values()]\n            lun_used.sort()\n            # Assume all luns are taken to this point, and then try to find\n            # an unused one\n            result_lun = str(len(lun_used))\n            for index, n in enumerate(lun_used):\n                if n > index:\n                    result_lun = str(index)\n                    break\n\n        # Volume is not mapped to host, create a new LUN\n        if not mapped_flag:\n            ssh_cmd = ('svctask mkvdiskhostmap -host %(host_name)s -scsi '\n                       '%(result_lun)s %(volume_name)s' %\n                       {'host_name': host_name,\n                        'result_lun': result_lun,\n                        'volume_name': volume_name})\n            out, err = self._run_ssh(ssh_cmd, check_exit_code=False)\n            if err and err.startswith('CMMVC6071E'):\n                if not self.configuration.storwize_svc_multihostmap_enabled:\n                    LOG.error(_('storwize_svc_multihostmap_enabled is set '\n                                'to False, Not allow multi host mapping'))\n                    exception_msg = 'CMMVC6071E The VDisk-to-host mapping '\\\n                                    'was not created because the VDisk is '\\\n                                    'already mapped to a host.\\n\"'\n                    raise exception.CinderException(data=exception_msg)\n                ssh_cmd = ssh_cmd.replace('mkvdiskhostmap',\n                                          'mkvdiskhostmap -force')\n                # try to map one volume to multiple hosts\n                out, err = self._run_ssh(ssh_cmd)\n                LOG.warn(_('volume %s mapping to multi host') % volume_name)\n                self._assert_ssh_return('successfully created' in out,\n                                        '_map_vol_to_host', ssh_cmd, out, err)\n            else:\n                self._assert_ssh_return('successfully created' in out,\n                                        '_map_vol_to_host', ssh_cmd, out, err)\n        LOG.debug(_('leave: _map_vol_to_host: LUN %(result_lun)s, volume '\n                    '%(volume_name)s, host %(host_name)s') %\n                  {'result_lun': result_lun,\n                   'volume_name': volume_name,\n                   'host_name': host_name})\n        return result_lun", "func_src_after": "    def _map_vol_to_host(self, volume_name, host_name):\n        \"\"\"Create a mapping between a volume to a host.\"\"\"\n\n        LOG.debug(_('enter: _map_vol_to_host: volume %(volume_name)s to '\n                    'host %(host_name)s')\n                  % {'volume_name': volume_name, 'host_name': host_name})\n\n        # Check if this volume is already mapped to this host\n        mapping_data = self._get_hostvdisk_mappings(host_name)\n\n        mapped_flag = False\n        result_lun = '-1'\n        if volume_name in mapping_data:\n            mapped_flag = True\n            result_lun = mapping_data[volume_name]['SCSI_id']\n        else:\n            lun_used = [int(v['SCSI_id']) for v in mapping_data.values()]\n            lun_used.sort()\n            # Assume all luns are taken to this point, and then try to find\n            # an unused one\n            result_lun = str(len(lun_used))\n            for index, n in enumerate(lun_used):\n                if n > index:\n                    result_lun = str(index)\n                    break\n\n        # Volume is not mapped to host, create a new LUN\n        if not mapped_flag:\n            ssh_cmd = ['svctask', 'mkvdiskhostmap', '-host', host_name,\n                       '-scsi', result_lun, volume_name]\n            out, err = self._run_ssh(ssh_cmd, check_exit_code=False)\n            if err and err.startswith('CMMVC6071E'):\n                if not self.configuration.storwize_svc_multihostmap_enabled:\n                    LOG.error(_('storwize_svc_multihostmap_enabled is set '\n                                'to False, Not allow multi host mapping'))\n                    exception_msg = 'CMMVC6071E The VDisk-to-host mapping '\\\n                                    'was not created because the VDisk is '\\\n                                    'already mapped to a host.\\n\"'\n                    raise exception.CinderException(data=exception_msg)\n\n                for i in range(len(ssh_cmd)):\n                    if ssh_cmd[i] == 'mkvdiskhostmap':\n                        ssh_cmd.insert(i + 1, '-force')\n\n                # try to map one volume to multiple hosts\n                out, err = self._run_ssh(ssh_cmd)\n                LOG.warn(_('volume %s mapping to multi host') % volume_name)\n                self._assert_ssh_return('successfully created' in out,\n                                        '_map_vol_to_host', ssh_cmd, out, err)\n            else:\n                self._assert_ssh_return('successfully created' in out,\n                                        '_map_vol_to_host', ssh_cmd, out, err)\n        LOG.debug(_('leave: _map_vol_to_host: LUN %(result_lun)s, volume '\n                    '%(volume_name)s, host %(host_name)s') %\n                  {'result_lun': result_lun,\n                   'volume_name': volume_name,\n                   'host_name': host_name})\n        return result_lun", "line_changes": {"deleted": [{"line_no": 29, "char_start": 1119, "char_end": 1194, "line": "            ssh_cmd = ('svctask mkvdiskhostmap -host %(host_name)s -scsi '\n"}, {"line_no": 30, "char_start": 1194, "char_end": 1252, "line": "                       '%(result_lun)s %(volume_name)s' %\n"}, {"line_no": 31, "char_start": 1252, "char_end": 1300, "line": "                       {'host_name': host_name,\n"}, {"line_no": 32, "char_start": 1300, "char_end": 1350, "line": "                        'result_lun': result_lun,\n"}, {"line_no": 33, "char_start": 1350, "char_end": 1403, "line": "                        'volume_name': volume_name})\n"}, {"line_no": 43, "char_start": 2046, "char_end": 2106, "line": "                ssh_cmd = ssh_cmd.replace('mkvdiskhostmap',\n"}, {"line_no": 44, "char_start": 2106, "char_end": 2173, "line": "                                          'mkvdiskhostmap -force')\n"}], "added": [{"line_no": 29, "char_start": 1119, "char_end": 1191, "line": "            ssh_cmd = ['svctask', 'mkvdiskhostmap', '-host', host_name,\n"}, {"line_no": 30, "char_start": 1191, "char_end": 1248, "line": "                       '-scsi', result_lun, volume_name]\n"}, {"line_no": 40, "char_start": 1891, "char_end": 1892, "line": "\n"}, {"line_no": 41, "char_start": 1892, "char_end": 1938, "line": "                for i in range(len(ssh_cmd)):\n"}, {"line_no": 42, "char_start": 1938, "char_end": 1993, "line": "                    if ssh_cmd[i] == 'mkvdiskhostmap':\n"}, {"line_no": 43, "char_start": 1993, "char_end": 2049, "line": "                        ssh_cmd.insert(i + 1, '-force')\n"}, {"line_no": 44, "char_start": 2049, "char_end": 2050, "line": "\n"}]}, "char_changes": {"deleted": [{"char_start": 1141, "char_end": 1142, "chars": "("}, {"char_start": 1165, "char_end": 1192, "chars": " -host %(host_name)s -scsi "}, {"char_start": 1193, "char_end": 1216, "chars": "\n                      "}, {"char_start": 1218, "char_end": 1277, "chars": "%(result_lun)s %(volume_name)s' %\n                       {'"}, {"char_start": 1281, "char_end": 1286, "chars": "_name"}, {"char_start": 1287, "char_end": 1288, "chars": ":"}, {"char_start": 1323, "char_end": 1324, "chars": " "}, {"char_start": 1325, "char_end": 1327, "chars": "re"}, {"char_start": 1328, "char_end": 1335, "chars": "ult_lun"}, {"char_start": 1336, "char_end": 1337, "chars": ":"}, {"char_start": 1349, "char_end": 1369, "chars": "\n                   "}, {"char_start": 1370, "char_end": 1375, "chars": "    '"}, {"char_start": 1386, "char_end": 1402, "chars": "': volume_name})"}, {"char_start": 2070, "char_end": 2071, "chars": "="}, {"char_start": 2079, "char_end": 2088, "chars": ".replace("}, {"char_start": 2104, "char_end": 2105, "chars": ","}, {"char_start": 2106, "char_end": 2111, "chars": "     "}, {"char_start": 2135, "char_end": 2149, "chars": "             '"}, {"char_start": 2150, "char_end": 2152, "chars": "kv"}, {"char_start": 2155, "char_end": 2159, "chars": "khos"}, {"char_start": 2160, "char_end": 2163, "chars": "map"}], "added": [{"char_start": 1141, "char_end": 1142, "chars": "["}, {"char_start": 1150, "char_end": 1152, "chars": "',"}, {"char_start": 1153, "char_end": 1154, "chars": "'"}, {"char_start": 1169, "char_end": 1170, "chars": ","}, {"char_start": 1172, "char_end": 1173, "chars": "-"}, {"char_start": 1178, "char_end": 1179, "chars": ","}, {"char_start": 1215, "char_end": 1216, "chars": "-"}, {"char_start": 1217, "char_end": 1220, "chars": "csi"}, {"char_start": 1221, "char_end": 1222, "chars": ","}, {"char_start": 1246, "char_end": 1247, "chars": "]"}, {"char_start": 1891, "char_end": 1892, "chars": "\n"}, {"char_start": 1908, "char_end": 1927, "chars": "for i in range(len("}, {"char_start": 1934, "char_end": 1938, "chars": ")):\n"}, {"char_start": 1939, "char_end": 1960, "chars": "                   if"}, {"char_start": 1968, "char_end": 1975, "chars": "[i] == "}, {"char_start": 1991, "char_end": 1992, "chars": ":"}, {"char_start": 2017, "char_end": 2022, "chars": "ssh_c"}, {"char_start": 2024, "char_end": 2025, "chars": "."}, {"char_start": 2026, "char_end": 2027, "chars": "n"}, {"char_start": 2028, "char_end": 2030, "chars": "er"}, {"char_start": 2031, "char_end": 2033, "chars": "(i"}, {"char_start": 2034, "char_end": 2040, "chars": "+ 1, '"}, {"char_start": 2048, "char_end": 2049, "chars": "\n"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "_delete_vdisk", "func_src_before": "    def _delete_vdisk(self, name, force):\n        \"\"\"Deletes existing vdisks.\n\n        It is very important to properly take care of mappings before deleting\n        the disk:\n        1. If no mappings, then it was a vdisk, and can be deleted\n        2. If it is the source of a flashcopy mapping and copy_rate is 0, then\n           it is a vdisk that has a snapshot.  If the force flag is set,\n           delete the mapping and the vdisk, otherwise set the mapping to\n           copy and wait (this will allow users to delete vdisks that have\n           snapshots if/when the upper layers allow it).\n        3. If it is the target of a mapping and copy_rate is 0, it is a\n           snapshot, and we should properly stop the mapping and delete.\n        4. If it is the source/target of a mapping and copy_rate is not 0, it\n           is a clone or vdisk created from a snapshot.  We wait for the copy\n           to complete (the mapping will be autodeleted) and then delete the\n           vdisk.\n\n        \"\"\"\n\n        LOG.debug(_('enter: _delete_vdisk: vdisk %s') % name)\n\n        # Try to delete volume only if found on the storage\n        vdisk_defined = self._is_vdisk_defined(name)\n        if not vdisk_defined:\n            LOG.info(_('warning: Tried to delete vdisk %s but it does not '\n                       'exist.') % name)\n            return\n\n        self._ensure_vdisk_no_fc_mappings(name)\n\n        forceflag = '-force' if force else ''\n        cmd_params = {'frc': forceflag, 'name': name}\n        ssh_cmd = 'svctask rmvdisk %(frc)s %(name)s' % cmd_params\n        out, err = self._run_ssh(ssh_cmd)\n        # No output should be returned from rmvdisk\n        self._assert_ssh_return(len(out.strip()) == 0,\n                                ('_delete_vdisk %(name)s')\n                                % {'name': name},\n                                ssh_cmd, out, err)\n        LOG.debug(_('leave: _delete_vdisk: vdisk %s') % name)", "func_src_after": "    def _delete_vdisk(self, name, force):\n        \"\"\"Deletes existing vdisks.\n\n        It is very important to properly take care of mappings before deleting\n        the disk:\n        1. If no mappings, then it was a vdisk, and can be deleted\n        2. If it is the source of a flashcopy mapping and copy_rate is 0, then\n           it is a vdisk that has a snapshot.  If the force flag is set,\n           delete the mapping and the vdisk, otherwise set the mapping to\n           copy and wait (this will allow users to delete vdisks that have\n           snapshots if/when the upper layers allow it).\n        3. If it is the target of a mapping and copy_rate is 0, it is a\n           snapshot, and we should properly stop the mapping and delete.\n        4. If it is the source/target of a mapping and copy_rate is not 0, it\n           is a clone or vdisk created from a snapshot.  We wait for the copy\n           to complete (the mapping will be autodeleted) and then delete the\n           vdisk.\n\n        \"\"\"\n\n        LOG.debug(_('enter: _delete_vdisk: vdisk %s') % name)\n\n        # Try to delete volume only if found on the storage\n        vdisk_defined = self._is_vdisk_defined(name)\n        if not vdisk_defined:\n            LOG.info(_('warning: Tried to delete vdisk %s but it does not '\n                       'exist.') % name)\n            return\n\n        self._ensure_vdisk_no_fc_mappings(name)\n\n        ssh_cmd = ['svctask', 'rmvdisk', '-force', name]\n        if not force:\n            ssh_cmd.remove('-force')\n        out, err = self._run_ssh(ssh_cmd)\n        # No output should be returned from rmvdisk\n        self._assert_ssh_return(len(out.strip()) == 0,\n                                ('_delete_vdisk %(name)s')\n                                % {'name': name},\n                                ssh_cmd, out, err)\n        LOG.debug(_('leave: _delete_vdisk: vdisk %s') % name)", "line_changes": {"deleted": [{"line_no": 32, "char_start": 1403, "char_end": 1449, "line": "        forceflag = '-force' if force else ''\n"}, {"line_no": 33, "char_start": 1449, "char_end": 1503, "line": "        cmd_params = {'frc': forceflag, 'name': name}\n"}, {"line_no": 34, "char_start": 1503, "char_end": 1569, "line": "        ssh_cmd = 'svctask rmvdisk %(frc)s %(name)s' % cmd_params\n"}], "added": [{"line_no": 32, "char_start": 1403, "char_end": 1460, "line": "        ssh_cmd = ['svctask', 'rmvdisk', '-force', name]\n"}, {"line_no": 33, "char_start": 1460, "char_end": 1482, "line": "        if not force:\n"}, {"line_no": 34, "char_start": 1482, "char_end": 1519, "line": "            ssh_cmd.remove('-force')\n"}]}, "char_changes": {"deleted": [{"char_start": 1411, "char_end": 1414, "chars": "for"}, {"char_start": 1415, "char_end": 1420, "chars": "eflag"}, {"char_start": 1424, "char_end": 1428, "chars": "-for"}, {"char_start": 1429, "char_end": 1430, "chars": "e"}, {"char_start": 1433, "char_end": 1434, "chars": "f"}, {"char_start": 1441, "char_end": 1444, "chars": "els"}, {"char_start": 1445, "char_end": 1448, "chars": " ''"}, {"char_start": 1457, "char_end": 1472, "chars": "cmd_params = {'"}, {"char_start": 1473, "char_end": 1477, "chars": "rc':"}, {"char_start": 1483, "char_end": 1488, "chars": "flag,"}, {"char_start": 1489, "char_end": 1496, "chars": "'name':"}, {"char_start": 1497, "char_end": 1503, "chars": "name}\n"}, {"char_start": 1518, "char_end": 1530, "chars": " = 'svctask "}, {"char_start": 1533, "char_end": 1539, "chars": "disk %"}, {"char_start": 1543, "char_end": 1551, "chars": ")s %(nam"}, {"char_start": 1552, "char_end": 1554, "chars": ")s"}, {"char_start": 1555, "char_end": 1568, "chars": " % cmd_params"}], "added": [{"char_start": 1411, "char_end": 1415, "chars": "ssh_"}, {"char_start": 1416, "char_end": 1418, "chars": "md"}, {"char_start": 1421, "char_end": 1422, "chars": "["}, {"char_start": 1423, "char_end": 1425, "chars": "sv"}, {"char_start": 1426, "char_end": 1430, "chars": "task"}, {"char_start": 1431, "char_end": 1432, "chars": ","}, {"char_start": 1433, "char_end": 1438, "chars": "'rmvd"}, {"char_start": 1439, "char_end": 1443, "chars": "sk',"}, {"char_start": 1444, "char_end": 1446, "chars": "'-"}, {"char_start": 1451, "char_end": 1453, "chars": "',"}, {"char_start": 1454, "char_end": 1457, "chars": "nam"}, {"char_start": 1458, "char_end": 1459, "chars": "]"}, {"char_start": 1468, "char_end": 1470, "chars": "if"}, {"char_start": 1471, "char_end": 1474, "chars": "not"}, {"char_start": 1476, "char_end": 1477, "chars": "o"}, {"char_start": 1479, "char_end": 1480, "chars": "e"}, {"char_start": 1481, "char_end": 1482, "chars": "\n"}, {"char_start": 1485, "char_end": 1486, "chars": " "}, {"char_start": 1501, "char_end": 1502, "chars": "."}, {"char_start": 1503, "char_end": 1504, "chars": "e"}, {"char_start": 1505, "char_end": 1506, "chars": "o"}, {"char_start": 1507, "char_end": 1508, "chars": "e"}, {"char_start": 1509, "char_end": 1511, "chars": "'-"}, {"char_start": 1512, "char_end": 1513, "chars": "o"}, {"char_start": 1517, "char_end": 1518, "chars": ")"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "_cliq_run", "func_src_before": "    def _cliq_run(self, verb, cliq_args, check_exit_code=True):\n        \"\"\"Runs a CLIQ command over SSH, without doing any result parsing\"\"\"\n        cliq_arg_strings = []\n        for k, v in cliq_args.items():\n            cliq_arg_strings.append(\" %s=%s\" % (k, v))\n        cmd = verb + ''.join(cliq_arg_strings)\n\n        return self._run_ssh(cmd, check_exit_code)", "func_src_after": "    def _cliq_run(self, verb, cliq_args, check_exit_code=True):\n        \"\"\"Runs a CLIQ command over SSH, without doing any result parsing\"\"\"\n        cmd_list = [verb]\n        for k, v in cliq_args.items():\n            cmd_list.append(\"%s=%s\" % (k, v))\n\n        return self._run_ssh(cmd_list, check_exit_code)", "line_changes": {"deleted": [{"line_no": 3, "char_start": 141, "char_end": 171, "line": "        cliq_arg_strings = []\n"}, {"line_no": 5, "char_start": 210, "char_end": 265, "line": "            cliq_arg_strings.append(\" %s=%s\" % (k, v))\n"}, {"line_no": 6, "char_start": 265, "char_end": 312, "line": "        cmd = verb + ''.join(cliq_arg_strings)\n"}, {"line_no": 8, "char_start": 313, "char_end": 363, "line": "        return self._run_ssh(cmd, check_exit_code)\n"}], "added": [{"line_no": 3, "char_start": 141, "char_end": 167, "line": "        cmd_list = [verb]\n"}, {"line_no": 5, "char_start": 206, "char_end": 252, "line": "            cmd_list.append(\"%s=%s\" % (k, v))\n"}, {"line_no": 7, "char_start": 253, "char_end": 308, "line": "        return self._run_ssh(cmd_list, check_exit_code)\n"}]}, "char_changes": {"deleted": [{"char_start": 152, "char_end": 158, "chars": "q_arg_"}, {"char_start": 160, "char_end": 165, "chars": "rings"}, {"char_start": 225, "char_end": 231, "chars": "q_arg_"}, {"char_start": 233, "char_end": 238, "chars": "rings"}, {"char_start": 247, "char_end": 248, "chars": " "}, {"char_start": 265, "char_end": 312, "chars": "        cmd = verb + ''.join(cliq_arg_strings)\n"}], "added": [{"char_start": 150, "char_end": 153, "chars": "md_"}, {"char_start": 161, "char_end": 165, "chars": "verb"}, {"char_start": 219, "char_end": 222, "chars": "md_"}, {"char_start": 285, "char_end": 290, "chars": "_list"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp_lefthand.py", "vul_type": "cwe-078"}
{"func_name": "_set_qos_rule", "func_src_before": "    def _set_qos_rule(self, qos, vvs_name):\n        max_io = self._get_qos_value(qos, 'maxIOPS')\n        max_bw = self._get_qos_value(qos, 'maxBWS')\n        cli_qos_string = \"\"\n        if max_io is not None:\n            cli_qos_string += ('-io %s ' % max_io)\n        if max_bw is not None:\n            cli_qos_string += ('-bw %sM ' % max_bw)\n        self._cli_run('setqos %svvset:%s' %\n                      (cli_qos_string, vvs_name), None)", "func_src_after": "    def _set_qos_rule(self, qos, vvs_name):\n        max_io = self._get_qos_value(qos, 'maxIOPS')\n        max_bw = self._get_qos_value(qos, 'maxBWS')\n        cli_qos_string = \"\"\n        if max_io is not None:\n            cli_qos_string += ('-io %s ' % max_io)\n        if max_bw is not None:\n            cli_qos_string += ('-bw %sM ' % max_bw)\n        self._cli_run(['setqos', '%svvset:%s' % (cli_qos_string, vvs_name)])", "line_changes": {"deleted": [{"line_no": 9, "char_start": 342, "char_end": 386, "line": "        self._cli_run('setqos %svvset:%s' %\n"}, {"line_no": 10, "char_start": 386, "char_end": 441, "line": "                      (cli_qos_string, vvs_name), None)\n"}], "added": [{"line_no": 9, "char_start": 342, "char_end": 418, "line": "        self._cli_run(['setqos', '%svvset:%s' % (cli_qos_string, vvs_name)])\n"}]}, "char_changes": {"deleted": [{"char_start": 385, "char_end": 407, "chars": "\n                     "}, {"char_start": 434, "char_end": 440, "chars": ", None"}], "added": [{"char_start": 364, "char_end": 365, "chars": "["}, {"char_start": 372, "char_end": 374, "chars": "',"}, {"char_start": 375, "char_end": 376, "chars": "'"}, {"char_start": 416, "char_end": 417, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_common.py", "vul_type": "cwe-078"}
{"func_name": "get_lines", "func_src_before": "def get_lines(command: str) -> List[str]:\n    \"\"\"\n    Run a command and return lines of output\n\n    :param str command: the command to run\n    :returns: list of whitespace-stripped lines output by command\n    \"\"\"\n    stdout = get_output(command)\n    return [line.strip().decode() for line in stdout.splitlines()]", "func_src_after": "def get_lines(command: List[str]) -> List[str]:\n    \"\"\"\n    Run a command and return lines of output\n\n    :param str command: the command to run\n    :returns: list of whitespace-stripped lines output by command\n    \"\"\"\n    stdout = get_output(command)\n    return [line.strip() for line in stdout.splitlines()]", "line_changes": {"deleted": [{"line_no": 1, "char_start": 0, "char_end": 42, "line": "def get_lines(command: str) -> List[str]:\n"}, {"line_no": 9, "char_start": 246, "char_end": 312, "line": "    return [line.strip().decode() for line in stdout.splitlines()]\n"}], "added": [{"line_no": 1, "char_start": 0, "char_end": 48, "line": "def get_lines(command: List[str]) -> List[str]:\n"}, {"line_no": 9, "char_start": 252, "char_end": 309, "line": "    return [line.strip() for line in stdout.splitlines()]\n"}]}, "char_changes": {"deleted": [{"char_start": 268, "char_end": 277, "chars": "().decode"}], "added": [{"char_start": 23, "char_end": 28, "chars": "List["}, {"char_start": 31, "char_end": 32, "chars": "]"}]}, "commit_link": "github.com/timothycrosley/isort/commit/1ab38f4f7840a3c19bf961a24630a992a8373a76", "file_name": "isort/hooks.py", "vul_type": "cwe-078"}
{"func_name": "_modify_3par_iscsi_host", "func_src_before": "    def _modify_3par_iscsi_host(self, hostname, iscsi_iqn):\n        # when using -add, you can not send the persona or domain options\n        self.common._cli_run('createhost -iscsi -add %s %s'\n                             % (hostname, iscsi_iqn), None)", "func_src_after": "    def _modify_3par_iscsi_host(self, hostname, iscsi_iqn):\n        # when using -add, you can not send the persona or domain options\n        command = ['createhost', '-iscsi', '-add', hostname, iscsi_iqn]\n        self.common._cli_run(command)", "line_changes": {"deleted": [{"line_no": 3, "char_start": 134, "char_end": 194, "line": "        self.common._cli_run('createhost -iscsi -add %s %s'\n"}, {"line_no": 4, "char_start": 194, "char_end": 253, "line": "                             % (hostname, iscsi_iqn), None)\n"}], "added": [{"line_no": 3, "char_start": 134, "char_end": 206, "line": "        command = ['createhost', '-iscsi', '-add', hostname, iscsi_iqn]\n"}, {"line_no": 4, "char_start": 206, "char_end": 243, "line": "        self.common._cli_run(command)\n"}]}, "char_changes": {"deleted": [{"char_start": 142, "char_end": 147, "chars": "self."}, {"char_start": 151, "char_end": 152, "chars": "o"}, {"char_start": 153, "char_end": 163, "chars": "._cli_run("}, {"char_start": 186, "char_end": 192, "chars": " %s %s"}, {"char_start": 193, "char_end": 222, "chars": "\n                            "}, {"char_start": 223, "char_end": 226, "chars": "% ("}, {"char_start": 245, "char_end": 247, "chars": "),"}, {"char_start": 248, "char_end": 249, "chars": "N"}, {"char_start": 251, "char_end": 252, "chars": "e"}], "added": [{"char_start": 146, "char_end": 147, "chars": "a"}, {"char_start": 148, "char_end": 153, "chars": "d = ["}, {"char_start": 164, "char_end": 166, "chars": "',"}, {"char_start": 167, "char_end": 168, "chars": "'"}, {"char_start": 174, "char_end": 176, "chars": "',"}, {"char_start": 177, "char_end": 178, "chars": "'"}, {"char_start": 183, "char_end": 184, "chars": ","}, {"char_start": 204, "char_end": 206, "chars": "]\n"}, {"char_start": 207, "char_end": 223, "chars": "       self.comm"}, {"char_start": 225, "char_end": 242, "chars": "._cli_run(command"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_iscsi.py", "vul_type": "cwe-078"}
{"func_name": "run_interactive_shell_command", "func_src_before": "@contextmanager\ndef run_interactive_shell_command(command, **kwargs):\n    \"\"\"\n    Runs a command in shell and provides stdout, stderr and stdin streams.\n\n    This function creates a context manager that sets up the process, returns\n    to caller, closes streams and waits for process to exit on leaving.\n\n    The process is opened in `universal_newlines` mode.\n\n    :param command: The command to run on shell.\n    :param kwargs:  Additional keyword arguments to pass to `subprocess.Popen`\n                    that is used to spawn the process (except `shell`,\n                    `stdout`, `stderr`, `stdin` and `universal_newlines`, a\n                    `TypeError` is raised then).\n    :return:        A context manager yielding the process started from the\n                    command.\n    \"\"\"\n    process = Popen(command,\n                    shell=True,\n                    stdout=PIPE,\n                    stderr=PIPE,\n                    stdin=PIPE,\n                    universal_newlines=True,\n                    **kwargs)\n    try:\n        yield process\n    finally:\n        process.stdout.close()\n        process.stderr.close()\n        process.stdin.close()\n        process.wait()", "func_src_after": "@contextmanager\ndef run_interactive_shell_command(command, **kwargs):\n    \"\"\"\n    Runs a single command in shell and provides stdout, stderr and stdin\n    streams.\n\n    This function creates a context manager that sets up the process (using\n    `subprocess.Popen()`), returns to caller, closes streams and waits for\n    process to exit on leaving.\n\n    Shell execution is disabled by default (so no shell expansion takes place).\n    If you want to turn shell execution on, you can pass `shell=True` like you\n    would do for `subprocess.Popen()`.\n\n    The process is opened in `universal_newlines` mode by default.\n\n    :param command: The command to run on shell. This parameter can either\n                    be a sequence of arguments that are directly passed to\n                    the process or a string. A string gets splitted beforehand\n                    using `shlex.split()`.\n    :param kwargs:  Additional keyword arguments to pass to `subprocess.Popen`\n                    that is used to spawn the process (except `stdout`,\n                    `stderr`, `stdin` and `universal_newlines`, a `TypeError`\n                    is raised then).\n    :return:        A context manager yielding the process started from the\n                    command.\n    \"\"\"\n    if isinstance(command, str):\n        command = shlex.split(command)\n\n    process = Popen(command,\n                    stdout=PIPE,\n                    stderr=PIPE,\n                    stdin=PIPE,\n                    universal_newlines=True,\n                    **kwargs)\n    try:\n        yield process\n    finally:\n        process.stdout.close()\n        process.stderr.close()\n        process.stdin.close()\n        process.wait()", "line_changes": {"deleted": [{"line_no": 4, "char_start": 78, "char_end": 153, "line": "    Runs a command in shell and provides stdout, stderr and stdin streams.\n"}, {"line_no": 6, "char_start": 154, "char_end": 232, "line": "    This function creates a context manager that sets up the process, returns\n"}, {"line_no": 7, "char_start": 232, "char_end": 304, "line": "    to caller, closes streams and waits for process to exit on leaving.\n"}, {"line_no": 9, "char_start": 305, "char_end": 361, "line": "    The process is opened in `universal_newlines` mode.\n"}, {"line_no": 11, "char_start": 362, "char_end": 411, "line": "    :param command: The command to run on shell.\n"}, {"line_no": 13, "char_start": 490, "char_end": 561, "line": "                    that is used to spawn the process (except `shell`,\n"}, {"line_no": 14, "char_start": 561, "char_end": 637, "line": "                    `stdout`, `stderr`, `stdin` and `universal_newlines`, a\n"}, {"line_no": 15, "char_start": 637, "char_end": 686, "line": "                    `TypeError` is raised then).\n"}, {"line_no": 20, "char_start": 828, "char_end": 860, "line": "                    shell=True,\n"}], "added": [{"line_no": 4, "char_start": 78, "char_end": 151, "line": "    Runs a single command in shell and provides stdout, stderr and stdin\n"}, {"line_no": 5, "char_start": 151, "char_end": 164, "line": "    streams.\n"}, {"line_no": 7, "char_start": 165, "char_end": 241, "line": "    This function creates a context manager that sets up the process (using\n"}, {"line_no": 8, "char_start": 241, "char_end": 316, "line": "    `subprocess.Popen()`), returns to caller, closes streams and waits for\n"}, {"line_no": 9, "char_start": 316, "char_end": 348, "line": "    process to exit on leaving.\n"}, {"line_no": 11, "char_start": 349, "char_end": 429, "line": "    Shell execution is disabled by default (so no shell expansion takes place).\n"}, {"line_no": 12, "char_start": 429, "char_end": 508, "line": "    If you want to turn shell execution on, you can pass `shell=True` like you\n"}, {"line_no": 13, "char_start": 508, "char_end": 547, "line": "    would do for `subprocess.Popen()`.\n"}, {"line_no": 15, "char_start": 548, "char_end": 615, "line": "    The process is opened in `universal_newlines` mode by default.\n"}, {"line_no": 16, "char_start": 615, "char_end": 616, "line": "\n"}, {"line_no": 17, "char_start": 616, "char_end": 691, "line": "    :param command: The command to run on shell. This parameter can either\n"}, {"line_no": 18, "char_start": 691, "char_end": 766, "line": "                    be a sequence of arguments that are directly passed to\n"}, {"line_no": 19, "char_start": 766, "char_end": 845, "line": "                    the process or a string. A string gets splitted beforehand\n"}, {"line_no": 20, "char_start": 845, "char_end": 888, "line": "                    using `shlex.split()`.\n"}, {"line_no": 22, "char_start": 967, "char_end": 1039, "line": "                    that is used to spawn the process (except `stdout`,\n"}, {"line_no": 23, "char_start": 1039, "char_end": 1117, "line": "                    `stderr`, `stdin` and `universal_newlines`, a `TypeError`\n"}, {"line_no": 24, "char_start": 1117, "char_end": 1154, "line": "                    is raised then).\n"}, {"line_no": 28, "char_start": 1267, "char_end": 1300, "line": "    if isinstance(command, str):\n"}, {"line_no": 29, "char_start": 1300, "char_end": 1339, "line": "        command = shlex.split(command)\n"}, {"line_no": 30, "char_start": 1339, "char_end": 1340, "line": "\n"}]}, "char_changes": {"deleted": [{"char_start": 231, "char_end": 235, "chars": "\n   "}, {"char_start": 554, "char_end": 558, "chars": "hell"}, {"char_start": 580, "char_end": 590, "chars": " `stdout`,"}, {"char_start": 656, "char_end": 668, "chars": " `TypeError`"}, {"char_start": 803, "char_end": 808, "chars": "proce"}, {"char_start": 810, "char_end": 816, "chars": " = Pop"}, {"char_start": 817, "char_end": 818, "chars": "n"}, {"char_start": 844, "char_end": 850, "chars": "    sh"}, {"char_start": 851, "char_end": 858, "chars": "ll=True"}], "added": [{"char_start": 89, "char_end": 96, "chars": "single "}, {"char_start": 150, "char_end": 154, "chars": "\n   "}, {"char_start": 233, "char_end": 266, "chars": " (using\n    `subprocess.Popen()`)"}, {"char_start": 315, "char_end": 319, "chars": "\n   "}, {"char_start": 353, "char_end": 552, "chars": "Shell execution is disabled by default (so no shell expansion takes place).\n    If you want to turn shell execution on, you can pass `shell=True` like you\n    would do for `subprocess.Popen()`.\n\n    "}, {"char_start": 602, "char_end": 613, "chars": " by default"}, {"char_start": 664, "char_end": 887, "chars": " This parameter can either\n                    be a sequence of arguments that are directly passed to\n                    the process or a string. A string gets splitted beforehand\n                    using `shlex.split()`."}, {"char_start": 1031, "char_end": 1036, "chars": "tdout"}, {"char_start": 1105, "char_end": 1117, "chars": "`TypeError`\n"}, {"char_start": 1271, "char_end": 1275, "chars": "if i"}, {"char_start": 1276, "char_end": 1278, "chars": "in"}, {"char_start": 1279, "char_end": 1283, "chars": "tanc"}, {"char_start": 1293, "char_end": 1299, "chars": " str):"}, {"char_start": 1308, "char_end": 1315, "chars": "command"}, {"char_start": 1316, "char_end": 1317, "chars": "="}, {"char_start": 1318, "char_end": 1340, "chars": "shlex.split(command)\n\n"}, {"char_start": 1344, "char_end": 1348, "chars": "proc"}, {"char_start": 1349, "char_end": 1352, "chars": "ss "}, {"char_start": 1353, "char_end": 1357, "chars": " Pop"}, {"char_start": 1358, "char_end": 1367, "chars": "n(command"}]}, "commit_link": "github.com/coala/coala/commit/adc94c745e4d9f792fd9c9791c7b4cd8790d0d2f", "file_name": "coalib/misc/Shell.py", "vul_type": "cwe-078"}
{"func_name": "delete_video", "func_src_before": "@app.route('/delete_video/<filename>')\ndef delete_video(filename):\n\tif 'username' in session:\n\t\t#os.remove(\"static/videos/{}\".format(filename))\n\t\tprint(session['username'], file=sys.stdout)\n\t\tdata=users.query.filter_by(Username=session['username']).first()\n\t\tvideo=Video.query.filter_by(UserID=data.UserID,Name=filename).first()\n\t\tif video != None:\n\t\t\tos.remove(\"static/videos/{}\".format(filename))\n\t\t\tdb.session.delete(video)\n\t\t\tdb.session.commit()\n\t\telse:\n\t\t\treturn \"Don't delete other people's videos!\"\n\t\treturn redirect(url_for('upload'))\n\treturn \"test\"", "func_src_after": "@app.route('/delete_video/<filename>')\ndef delete_video(filename):\n\tif 'username' in session:\n\t\t#os.remove(\"static/videos/{}\".format(filename))\n\t\tprint(session['username'], file=sys.stdout)\n\t\tdata=users.query.filter_by(Username=session['username']).first()\n\t\tvideo=Video.query.filter_by(UserID=data.UserID,Name=filename).first()\n\t\tif video != None:\n\t\t\t#os.remove(\"static/videos/{}\".format(filename))\n\t\t\tos.system(\"rm static/videos/{}\".format(filename))\n\t\t\tdb.session.delete(video)\n\t\t\tdb.session.commit()\n\t\telse:\n\t\t\treturn \"Don't delete other people's videos!\"\n\t\treturn redirect(url_for('upload'))\n\treturn \"test\"", "line_changes": {"deleted": [{"line_no": 9, "char_start": 349, "char_end": 399, "line": "\t\t\tos.remove(\"static/videos/{}\".format(filename))\n"}], "added": [{"line_no": 10, "char_start": 400, "char_end": 453, "line": "\t\t\tos.system(\"rm static/videos/{}\".format(filename))\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 352, "char_end": 353, "chars": "#"}, {"char_start": 364, "char_end": 417, "chars": "static/videos/{}\".format(filename))\n\t\t\tos.system(\"rm "}]}, "commit_link": "github.com/jmarcello97/CSEC-380-Project/commit/05dcd628aa5879b6e4979c43e7c635075975de09", "file_name": "Trialwebsite/app/app.py", "vul_type": "cwe-078"}
{"func_name": "whitelist", "func_src_before": "def whitelist(users: str):\n    for user in users.split():\n        call(WHITELIST_COMMAND_TEMPLATE.format(user))", "func_src_after": "def whitelist(channel: discord.TextChannel, users: str):\n    for user in users.split():\n        if not re.match(r'^[A-Za-z0-9_]{3,16}$', user):  # as per https://help.mojang.com/customer/en/portal/articles/928638-minecraft-usernames?b_id=5408\n            await channel.send('\\'{}\\' is not a valid Minecraft username'.format(user))\n        else:\n            call(WHITELIST_COMMAND_TEMPLATE.format(user))", "line_changes": {"deleted": [{"line_no": 1, "char_start": 0, "char_end": 27, "line": "def whitelist(users: str):\n"}, {"line_no": 3, "char_start": 58, "char_end": 111, "line": "        call(WHITELIST_COMMAND_TEMPLATE.format(user))\n"}], "added": [{"line_no": 1, "char_start": 0, "char_end": 57, "line": "def whitelist(channel: discord.TextChannel, users: str):\n"}, {"line_no": 3, "char_start": 88, "char_end": 243, "line": "        if not re.match(r'^[A-Za-z0-9_]{3,16}$', user):  # as per https://help.mojang.com/customer/en/portal/articles/928638-minecraft-usernames?b_id=5408\n"}, {"line_no": 4, "char_start": 243, "char_end": 331, "line": "            await channel.send('\\'{}\\' is not a valid Minecraft username'.format(user))\n"}, {"line_no": 5, "char_start": 331, "char_end": 345, "line": "        else:\n"}, {"line_no": 6, "char_start": 345, "char_end": 402, "line": "            call(WHITELIST_COMMAND_TEMPLATE.format(user))\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 14, "char_end": 44, "chars": "channel: discord.TextChannel, "}, {"char_start": 88, "char_end": 349, "chars": "        if not re.match(r'^[A-Za-z0-9_]{3,16}$', user):  # as per https://help.mojang.com/customer/en/portal/articles/928638-minecraft-usernames?b_id=5408\n            await channel.send('\\'{}\\' is not a valid Minecraft username'.format(user))\n        else:\n    "}]}, "commit_link": "github.com/thomotron/Gatekeep/commit/955660f9b3dc336ab0d5dfb4392b3ab6deac6b25", "file_name": "bot.py", "vul_type": "cwe-078"}
{"func_name": "test_create_host", "func_src_before": "    def test_create_host(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record\n        self.clear_mox()\n        self.stubs.Set(hpfcdriver.hpcommon.HP3PARCommon, \"get_cpg\",\n                       self.fake_get_cpg)\n        self.stubs.Set(hpfcdriver.hpcommon.HP3PARCommon, \"get_domain\",\n                       self.fake_get_domain)\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_host_cmd = 'showhost -verbose fakehost'\n        _run_ssh(show_host_cmd, False).AndReturn([pack('no hosts listed'), ''])\n\n        create_host_cmd = ('createhost -persona 1 -domain (\\'OpenStack\\',) '\n                           'fakehost 123456789012345 123456789054321')\n        _run_ssh(create_host_cmd, False).AndReturn([CLI_CR, ''])\n\n        _run_ssh(show_host_cmd, False).AndReturn([pack(FC_HOST_RET), ''])\n        self.mox.ReplayAll()\n\n        host = self.driver._create_host(self.volume, self.connector)\n        self.assertEqual(host['name'], self.FAKE_HOST)", "func_src_after": "    def test_create_host(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record\n        self.clear_mox()\n        self.stubs.Set(hpfcdriver.hpcommon.HP3PARCommon, \"get_cpg\",\n                       self.fake_get_cpg)\n        self.stubs.Set(hpfcdriver.hpcommon.HP3PARCommon, \"get_domain\",\n                       self.fake_get_domain)\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_host_cmd = ['showhost', '-verbose', 'fakehost']\n        _run_ssh(show_host_cmd, False).AndReturn([pack('no hosts listed'), ''])\n\n        create_host_cmd = (['createhost', '-persona', '1', '-domain',\n                            ('OpenStack',), 'fakehost', '123456789012345',\n                            '123456789054321'])\n        _run_ssh(create_host_cmd, False).AndReturn([CLI_CR, ''])\n\n        _run_ssh(show_host_cmd, False).AndReturn([pack(FC_HOST_RET), ''])\n        self.mox.ReplayAll()\n\n        host = self.driver._create_host(self.volume, self.connector)\n        self.assertEqual(host['name'], self.FAKE_HOST)", "line_changes": {"deleted": [{"line_no": 13, "char_start": 501, "char_end": 554, "line": "        show_host_cmd = 'showhost -verbose fakehost'\n"}, {"line_no": 16, "char_start": 635, "char_end": 712, "line": "        create_host_cmd = ('createhost -persona 1 -domain (\\'OpenStack\\',) '\n"}, {"line_no": 17, "char_start": 712, "char_end": 783, "line": "                           'fakehost 123456789012345 123456789054321')\n"}], "added": [{"line_no": 13, "char_start": 501, "char_end": 562, "line": "        show_host_cmd = ['showhost', '-verbose', 'fakehost']\n"}, {"line_no": 16, "char_start": 643, "char_end": 713, "line": "        create_host_cmd = (['createhost', '-persona', '1', '-domain',\n"}, {"line_no": 17, "char_start": 713, "char_end": 788, "line": "                            ('OpenStack',), 'fakehost', '123456789012345',\n"}, {"line_no": 18, "char_start": 788, "char_end": 836, "line": "                            '123456789054321'])\n"}]}, "char_changes": {"deleted": [{"char_start": 692, "char_end": 706, "chars": " (\\'OpenStack\\"}, {"char_start": 708, "char_end": 711, "chars": ") '"}], "added": [{"char_start": 525, "char_end": 526, "chars": "["}, {"char_start": 535, "char_end": 537, "chars": "',"}, {"char_start": 538, "char_end": 539, "chars": "'"}, {"char_start": 547, "char_end": 549, "chars": "',"}, {"char_start": 550, "char_end": 551, "chars": "'"}, {"char_start": 560, "char_end": 561, "chars": "]"}, {"char_start": 670, "char_end": 671, "chars": "["}, {"char_start": 682, "char_end": 684, "chars": "',"}, {"char_start": 685, "char_end": 686, "chars": "'"}, {"char_start": 694, "char_end": 696, "chars": "',"}, {"char_start": 697, "char_end": 698, "chars": "'"}, {"char_start": 699, "char_end": 701, "chars": "',"}, {"char_start": 702, "char_end": 703, "chars": "'"}, {"char_start": 740, "char_end": 757, "chars": " ('OpenStack',), "}, {"char_start": 766, "char_end": 768, "chars": "',"}, {"char_start": 769, "char_end": 770, "chars": "'"}, {"char_start": 785, "char_end": 798, "chars": "',\n          "}, {"char_start": 799, "char_end": 817, "chars": "                 '"}, {"char_start": 833, "char_end": 834, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/tests/test_hp3par.py", "vul_type": "cwe-078"}
{"func_name": "do_setup", "func_src_before": "    def do_setup(self, ctxt):\n        \"\"\"Check that we have all configuration details from the storage.\"\"\"\n\n        LOG.debug(_('enter: do_setup'))\n        self._context = ctxt\n\n        # Validate that the pool exists\n        ssh_cmd = 'svcinfo lsmdiskgrp -delim ! -nohdr'\n        out, err = self._run_ssh(ssh_cmd)\n        self._assert_ssh_return(len(out.strip()), 'do_setup',\n                                ssh_cmd, out, err)\n        search_text = '!%s!' % self.configuration.storwize_svc_volpool_name\n        if search_text not in out:\n            raise exception.InvalidInput(\n                reason=(_('pool %s doesn\\'t exist')\n                        % self.configuration.storwize_svc_volpool_name))\n\n        # Check if compression is supported\n        self._compression_enabled = False\n        try:\n            ssh_cmd = 'svcinfo lslicense -delim !'\n            out, err = self._run_ssh(ssh_cmd)\n            license_lines = out.strip().split('\\n')\n            for license_line in license_lines:\n                name, foo, value = license_line.partition('!')\n                if name in ('license_compression_enclosures',\n                            'license_compression_capacity') and value != '0':\n                    self._compression_enabled = True\n                    break\n        except exception.ProcessExecutionError:\n            LOG.exception(_('Failed to get license information.'))\n\n        # Get the iSCSI and FC names of the Storwize/SVC nodes\n        ssh_cmd = 'svcinfo lsnode -delim !'\n        out, err = self._run_ssh(ssh_cmd)\n        self._assert_ssh_return(len(out.strip()), 'do_setup',\n                                ssh_cmd, out, err)\n\n        nodes = out.strip().split('\\n')\n        self._assert_ssh_return(len(nodes),\n                                'do_setup', ssh_cmd, out, err)\n        header = nodes.pop(0)\n        for node_line in nodes:\n            try:\n                node_data = self._get_hdr_dic(header, node_line, '!')\n            except exception.VolumeBackendAPIException:\n                with excutils.save_and_reraise_exception():\n                    self._log_cli_output_error('do_setup',\n                                               ssh_cmd, out, err)\n            node = {}\n            try:\n                node['id'] = node_data['id']\n                node['name'] = node_data['name']\n                node['IO_group'] = node_data['IO_group_id']\n                node['iscsi_name'] = node_data['iscsi_name']\n                node['WWNN'] = node_data['WWNN']\n                node['status'] = node_data['status']\n                node['WWPN'] = []\n                node['ipv4'] = []\n                node['ipv6'] = []\n                node['enabled_protocols'] = []\n                if node['status'] == 'online':\n                    self._storage_nodes[node['id']] = node\n            except KeyError:\n                self._handle_keyerror('lsnode', header)\n\n        # Get the iSCSI IP addresses and WWPNs of the Storwize/SVC nodes\n        self._get_iscsi_ip_addrs()\n        self._get_fc_wwpns()\n\n        # For each node, check what connection modes it supports.  Delete any\n        # nodes that do not support any types (may be partially configured).\n        to_delete = []\n        for k, node in self._storage_nodes.iteritems():\n            if ((len(node['ipv4']) or len(node['ipv6']))\n                    and len(node['iscsi_name'])):\n                node['enabled_protocols'].append('iSCSI')\n                self._enabled_protocols.add('iSCSI')\n            if len(node['WWPN']):\n                node['enabled_protocols'].append('FC')\n                self._enabled_protocols.add('FC')\n            if not len(node['enabled_protocols']):\n                to_delete.append(k)\n\n        for delkey in to_delete:\n            del self._storage_nodes[delkey]\n\n        # Make sure we have at least one node configured\n        self._driver_assert(len(self._storage_nodes),\n                            _('do_setup: No configured nodes'))\n\n        LOG.debug(_('leave: do_setup'))", "func_src_after": "    def do_setup(self, ctxt):\n        \"\"\"Check that we have all configuration details from the storage.\"\"\"\n\n        LOG.debug(_('enter: do_setup'))\n        self._context = ctxt\n\n        # Validate that the pool exists\n        ssh_cmd = ['svcinfo', 'lsmdiskgrp', '-delim', '!', '-nohdr']\n        out, err = self._run_ssh(ssh_cmd)\n        self._assert_ssh_return(len(out.strip()), 'do_setup',\n                                ssh_cmd, out, err)\n        search_text = '!%s!' % self.configuration.storwize_svc_volpool_name\n        if search_text not in out:\n            raise exception.InvalidInput(\n                reason=(_('pool %s doesn\\'t exist')\n                        % self.configuration.storwize_svc_volpool_name))\n\n        # Check if compression is supported\n        self._compression_enabled = False\n        try:\n            ssh_cmd = ['svcinfo', 'lslicense', '-delim', '!']\n            out, err = self._run_ssh(ssh_cmd)\n            license_lines = out.strip().split('\\n')\n            for license_line in license_lines:\n                name, foo, value = license_line.partition('!')\n                if name in ('license_compression_enclosures',\n                            'license_compression_capacity') and value != '0':\n                    self._compression_enabled = True\n                    break\n        except exception.ProcessExecutionError:\n            LOG.exception(_('Failed to get license information.'))\n\n        # Get the iSCSI and FC names of the Storwize/SVC nodes\n        ssh_cmd = ['svcinfo', 'lsnode', '-delim', '!']\n        out, err = self._run_ssh(ssh_cmd)\n        self._assert_ssh_return(len(out.strip()), 'do_setup',\n                                ssh_cmd, out, err)\n\n        nodes = out.strip().split('\\n')\n        self._assert_ssh_return(len(nodes),\n                                'do_setup', ssh_cmd, out, err)\n        header = nodes.pop(0)\n        for node_line in nodes:\n            try:\n                node_data = self._get_hdr_dic(header, node_line, '!')\n            except exception.VolumeBackendAPIException:\n                with excutils.save_and_reraise_exception():\n                    self._log_cli_output_error('do_setup',\n                                               ssh_cmd, out, err)\n            node = {}\n            try:\n                node['id'] = node_data['id']\n                node['name'] = node_data['name']\n                node['IO_group'] = node_data['IO_group_id']\n                node['iscsi_name'] = node_data['iscsi_name']\n                node['WWNN'] = node_data['WWNN']\n                node['status'] = node_data['status']\n                node['WWPN'] = []\n                node['ipv4'] = []\n                node['ipv6'] = []\n                node['enabled_protocols'] = []\n                if node['status'] == 'online':\n                    self._storage_nodes[node['id']] = node\n            except KeyError:\n                self._handle_keyerror('lsnode', header)\n\n        # Get the iSCSI IP addresses and WWPNs of the Storwize/SVC nodes\n        self._get_iscsi_ip_addrs()\n        self._get_fc_wwpns()\n\n        # For each node, check what connection modes it supports.  Delete any\n        # nodes that do not support any types (may be partially configured).\n        to_delete = []\n        for k, node in self._storage_nodes.iteritems():\n            if ((len(node['ipv4']) or len(node['ipv6']))\n                    and len(node['iscsi_name'])):\n                node['enabled_protocols'].append('iSCSI')\n                self._enabled_protocols.add('iSCSI')\n            if len(node['WWPN']):\n                node['enabled_protocols'].append('FC')\n                self._enabled_protocols.add('FC')\n            if not len(node['enabled_protocols']):\n                to_delete.append(k)\n\n        for delkey in to_delete:\n            del self._storage_nodes[delkey]\n\n        # Make sure we have at least one node configured\n        self._driver_assert(len(self._storage_nodes),\n                            _('do_setup: No configured nodes'))\n\n        LOG.debug(_('leave: do_setup'))", "line_changes": {"deleted": [{"line_no": 8, "char_start": 218, "char_end": 273, "line": "        ssh_cmd = 'svcinfo lsmdiskgrp -delim ! -nohdr'\n"}, {"line_no": 21, "char_start": 806, "char_end": 857, "line": "            ssh_cmd = 'svcinfo lslicense -delim !'\n"}, {"line_no": 34, "char_start": 1463, "char_end": 1507, "line": "        ssh_cmd = 'svcinfo lsnode -delim !'\n"}], "added": [{"line_no": 8, "char_start": 218, "char_end": 287, "line": "        ssh_cmd = ['svcinfo', 'lsmdiskgrp', '-delim', '!', '-nohdr']\n"}, {"line_no": 21, "char_start": 820, "char_end": 882, "line": "            ssh_cmd = ['svcinfo', 'lslicense', '-delim', '!']\n"}, {"line_no": 34, "char_start": 1488, "char_end": 1543, "line": "        ssh_cmd = ['svcinfo', 'lsnode', '-delim', '!']\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 236, "char_end": 237, "chars": "["}, {"char_start": 245, "char_end": 247, "chars": "',"}, {"char_start": 248, "char_end": 249, "chars": "'"}, {"char_start": 259, "char_end": 261, "chars": "',"}, {"char_start": 262, "char_end": 263, "chars": "'"}, {"char_start": 269, "char_end": 271, "chars": "',"}, {"char_start": 272, "char_end": 273, "chars": "'"}, {"char_start": 274, "char_end": 276, "chars": "',"}, {"char_start": 277, "char_end": 278, "chars": "'"}, {"char_start": 285, "char_end": 286, "chars": "]"}, {"char_start": 842, "char_end": 843, "chars": "["}, {"char_start": 851, "char_end": 853, "chars": "',"}, {"char_start": 854, "char_end": 855, "chars": "'"}, {"char_start": 864, "char_end": 866, "chars": "',"}, {"char_start": 867, "char_end": 868, "chars": "'"}, {"char_start": 874, "char_end": 876, "chars": "',"}, {"char_start": 877, "char_end": 878, "chars": "'"}, {"char_start": 880, "char_end": 881, "chars": "]"}, {"char_start": 1506, "char_end": 1507, "chars": "["}, {"char_start": 1515, "char_end": 1517, "chars": "',"}, {"char_start": 1518, "char_end": 1519, "chars": "'"}, {"char_start": 1525, "char_end": 1527, "chars": "',"}, {"char_start": 1528, "char_end": 1529, "chars": "'"}, {"char_start": 1535, "char_end": 1537, "chars": "',"}, {"char_start": 1538, "char_end": 1539, "chars": "'"}, {"char_start": 1541, "char_end": 1542, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "_execute_command_and_parse_attributes", "func_src_before": "    def _execute_command_and_parse_attributes(self, ssh_cmd):\n        \"\"\"Execute command on the Storwize/SVC and parse attributes.\n\n        Exception is raised if the information from the system\n        can not be obtained.\n\n        \"\"\"\n\n        LOG.debug(_('enter: _execute_command_and_parse_attributes: '\n                    ' command %s') % ssh_cmd)\n\n        try:\n            out, err = self._run_ssh(ssh_cmd)\n        except exception.ProcessExecutionError as e:\n            # Didn't get details from the storage, return None\n            LOG.error(_('CLI Exception output:\\n command: %(cmd)s\\n '\n                        'stdout: %(out)s\\n stderr: %(err)s') %\n                      {'cmd': ssh_cmd,\n                       'out': e.stdout,\n                       'err': e.stderr})\n            return None\n\n        self._assert_ssh_return(len(out),\n                                '_execute_command_and_parse_attributes',\n                                ssh_cmd, out, err)\n        attributes = {}\n        for attrib_line in out.split('\\n'):\n            # If '!' not found, return the string and two empty strings\n            attrib_name, foo, attrib_value = attrib_line.partition('!')\n            if attrib_name is not None and len(attrib_name.strip()):\n                attributes[attrib_name] = attrib_value\n\n        LOG.debug(_('leave: _execute_command_and_parse_attributes:\\n'\n                    'command: %(cmd)s\\n'\n                    'attributes: %(attr)s')\n                  % {'cmd': ssh_cmd,\n                     'attr': str(attributes)})\n\n        return attributes", "func_src_after": "    def _execute_command_and_parse_attributes(self, ssh_cmd):\n        \"\"\"Execute command on the Storwize/SVC and parse attributes.\n\n        Exception is raised if the information from the system\n        can not be obtained.\n\n        \"\"\"\n\n        LOG.debug(_('enter: _execute_command_and_parse_attributes: '\n                    ' command %s') % str(ssh_cmd))\n\n        try:\n            out, err = self._run_ssh(ssh_cmd)\n        except exception.ProcessExecutionError as e:\n            # Didn't get details from the storage, return None\n            LOG.error(_('CLI Exception output:\\n command: %(cmd)s\\n '\n                        'stdout: %(out)s\\n stderr: %(err)s') %\n                      {'cmd': ssh_cmd,\n                       'out': e.stdout,\n                       'err': e.stderr})\n            return None\n\n        self._assert_ssh_return(len(out),\n                                '_execute_command_and_parse_attributes',\n                                ssh_cmd, out, err)\n        attributes = {}\n        for attrib_line in out.split('\\n'):\n            # If '!' not found, return the string and two empty strings\n            attrib_name, foo, attrib_value = attrib_line.partition('!')\n            if attrib_name is not None and len(attrib_name.strip()):\n                attributes[attrib_name] = attrib_value\n\n        LOG.debug(_('leave: _execute_command_and_parse_attributes:\\n'\n                    'command: %(cmd)s\\n'\n                    'attributes: %(attr)s')\n                  % {'cmd': str(ssh_cmd),\n                     'attr': str(attributes)})\n\n        return attributes", "line_changes": {"deleted": [{"line_no": 10, "char_start": 307, "char_end": 353, "line": "                    ' command %s') % ssh_cmd)\n"}, {"line_no": 36, "char_start": 1465, "char_end": 1502, "line": "                  % {'cmd': ssh_cmd,\n"}], "added": [{"line_no": 10, "char_start": 307, "char_end": 358, "line": "                    ' command %s') % str(ssh_cmd))\n"}, {"line_no": 36, "char_start": 1470, "char_end": 1512, "line": "                  % {'cmd': str(ssh_cmd),\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 345, "char_end": 349, "chars": "tr(s"}, {"char_start": 355, "char_end": 356, "chars": ")"}, {"char_start": 1499, "char_end": 1503, "chars": "tr(s"}, {"char_start": 1509, "char_end": 1510, "chars": ")"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "test_get_iscsi_ip_active", "func_src_before": "    def test_get_iscsi_ip_active(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record set up\n        self.clear_mox()\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_port_cmd = 'showport'\n        _run_ssh(show_port_cmd, False).AndReturn([pack(PORT_RET), ''])\n\n        show_port_i_cmd = 'showport -iscsi'\n        _run_ssh(show_port_i_cmd, False).AndReturn([pack(READY_ISCSI_PORT_RET),\n                                                    ''])\n\n        show_port_i_cmd = 'showport -iscsiname'\n        _run_ssh(show_port_i_cmd, False).AndReturn([pack(SHOW_PORT_ISCSI), ''])\n\n        self.mox.ReplayAll()\n\n        config = self.setup_configuration()\n        config.hp3par_iscsi_ips = ['10.10.220.253', '10.10.220.252']\n        self.setup_driver(config, set_up_fakes=False)\n\n        #record\n        self.clear_mox()\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_vlun_cmd = 'showvlun -a -host fakehost'\n        _run_ssh(show_vlun_cmd, False).AndReturn([pack(SHOW_VLUN), ''])\n\n        self.mox.ReplayAll()\n\n        ip = self.driver._get_iscsi_ip('fakehost')\n        self.assertEqual(ip, '10.10.220.253')", "func_src_after": "    def test_get_iscsi_ip_active(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record set up\n        self.clear_mox()\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_port_cmd = ['showport']\n        _run_ssh(show_port_cmd, False).AndReturn([pack(PORT_RET), ''])\n\n        show_port_i_cmd = ['showport', '-iscsi']\n        _run_ssh(show_port_i_cmd, False).AndReturn([pack(READY_ISCSI_PORT_RET),\n                                                    ''])\n\n        show_port_i_cmd = ['showport', '-iscsiname']\n        _run_ssh(show_port_i_cmd, False).AndReturn([pack(SHOW_PORT_ISCSI), ''])\n\n        self.mox.ReplayAll()\n\n        config = self.setup_configuration()\n        config.hp3par_iscsi_ips = ['10.10.220.253', '10.10.220.252']\n        self.setup_driver(config, set_up_fakes=False)\n\n        #record\n        self.clear_mox()\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_vlun_cmd = ['showvlun', '-a', '-host', 'fakehost']\n        _run_ssh(show_vlun_cmd, False).AndReturn([pack(SHOW_VLUN), ''])\n\n        self.mox.ReplayAll()\n\n        ip = self.driver._get_iscsi_ip('fakehost')\n        self.assertEqual(ip, '10.10.220.253')", "line_changes": {"deleted": [{"line_no": 9, "char_start": 290, "char_end": 325, "line": "        show_port_cmd = 'showport'\n"}, {"line_no": 12, "char_start": 397, "char_end": 441, "line": "        show_port_i_cmd = 'showport -iscsi'\n"}, {"line_no": 16, "char_start": 579, "char_end": 627, "line": "        show_port_i_cmd = 'showport -iscsiname'\n"}, {"line_no": 30, "char_start": 1105, "char_end": 1158, "line": "        show_vlun_cmd = 'showvlun -a -host fakehost'\n"}], "added": [{"line_no": 9, "char_start": 290, "char_end": 327, "line": "        show_port_cmd = ['showport']\n"}, {"line_no": 12, "char_start": 399, "char_end": 448, "line": "        show_port_i_cmd = ['showport', '-iscsi']\n"}, {"line_no": 16, "char_start": 586, "char_end": 639, "line": "        show_port_i_cmd = ['showport', '-iscsiname']\n"}, {"line_no": 30, "char_start": 1117, "char_end": 1181, "line": "        show_vlun_cmd = ['showvlun', '-a', '-host', 'fakehost']\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 314, "char_end": 315, "chars": "["}, {"char_start": 325, "char_end": 326, "chars": "]"}, {"char_start": 425, "char_end": 426, "chars": "["}, {"char_start": 435, "char_end": 437, "chars": "',"}, {"char_start": 438, "char_end": 439, "chars": "'"}, {"char_start": 446, "char_end": 447, "chars": "]"}, {"char_start": 612, "char_end": 613, "chars": "["}, {"char_start": 622, "char_end": 624, "chars": "',"}, {"char_start": 625, "char_end": 626, "chars": "'"}, {"char_start": 637, "char_end": 638, "chars": "]"}, {"char_start": 1141, "char_end": 1142, "chars": "["}, {"char_start": 1151, "char_end": 1153, "chars": "',"}, {"char_start": 1154, "char_end": 1155, "chars": "'"}, {"char_start": 1157, "char_end": 1159, "chars": "',"}, {"char_start": 1160, "char_end": 1161, "chars": "'"}, {"char_start": 1166, "char_end": 1168, "chars": "',"}, {"char_start": 1169, "char_end": 1170, "chars": "'"}, {"char_start": 1179, "char_end": 1180, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/tests/test_hp3par.py", "vul_type": "cwe-078"}
{"func_name": "_find_host_from_wwpn", "func_src_before": "    def _find_host_from_wwpn(self, connector):\n        for wwpn in connector['wwpns']:\n            ssh_cmd = 'svcinfo lsfabric -wwpn %s -delim !' % wwpn\n            out, err = self._run_ssh(ssh_cmd)\n\n            if not len(out.strip()):\n                # This WWPN is not in use\n                continue\n\n            host_lines = out.strip().split('\\n')\n            header = host_lines.pop(0).split('!')\n            self._assert_ssh_return('remote_wwpn' in header and\n                                    'name' in header,\n                                    '_find_host_from_wwpn',\n                                    ssh_cmd, out, err)\n            rmt_wwpn_idx = header.index('remote_wwpn')\n            name_idx = header.index('name')\n\n            wwpns = map(lambda x: x.split('!')[rmt_wwpn_idx], host_lines)\n\n            if wwpn in wwpns:\n                # All the wwpns will be the mapping for the same\n                # host from this WWPN-based query. Just pick\n                # the name from first line.\n                hostname = host_lines[0].split('!')[name_idx]\n                return hostname\n\n        # Didn't find a host\n        return None", "func_src_after": "    def _find_host_from_wwpn(self, connector):\n        for wwpn in connector['wwpns']:\n            ssh_cmd = ['svcinfo', 'lsfabric', '-wwpn', wwpn, '-delim', '!']\n            out, err = self._run_ssh(ssh_cmd)\n\n            if not len(out.strip()):\n                # This WWPN is not in use\n                continue\n\n            host_lines = out.strip().split('\\n')\n            header = host_lines.pop(0).split('!')\n            self._assert_ssh_return('remote_wwpn' in header and\n                                    'name' in header,\n                                    '_find_host_from_wwpn',\n                                    ssh_cmd, out, err)\n            rmt_wwpn_idx = header.index('remote_wwpn')\n            name_idx = header.index('name')\n\n            wwpns = map(lambda x: x.split('!')[rmt_wwpn_idx], host_lines)\n\n            if wwpn in wwpns:\n                # All the wwpns will be the mapping for the same\n                # host from this WWPN-based query. Just pick\n                # the name from first line.\n                hostname = host_lines[0].split('!')[name_idx]\n                return hostname\n\n        # Didn't find a host\n        return None", "line_changes": {"deleted": [{"line_no": 3, "char_start": 87, "char_end": 153, "line": "            ssh_cmd = 'svcinfo lsfabric -wwpn %s -delim !' % wwpn\n"}], "added": [{"line_no": 3, "char_start": 87, "char_end": 163, "line": "            ssh_cmd = ['svcinfo', 'lsfabric', '-wwpn', wwpn, '-delim', '!']\n"}]}, "char_changes": {"deleted": [{"char_start": 133, "char_end": 135, "chars": "%s"}, {"char_start": 145, "char_end": 152, "chars": " % wwpn"}], "added": [{"char_start": 109, "char_end": 110, "chars": "["}, {"char_start": 118, "char_end": 120, "chars": "',"}, {"char_start": 121, "char_end": 122, "chars": "'"}, {"char_start": 130, "char_end": 132, "chars": "',"}, {"char_start": 133, "char_end": 134, "chars": "'"}, {"char_start": 139, "char_end": 141, "chars": "',"}, {"char_start": 142, "char_end": 147, "chars": "wwpn,"}, {"char_start": 148, "char_end": 149, "chars": "'"}, {"char_start": 155, "char_end": 157, "chars": "',"}, {"char_start": 158, "char_end": 159, "chars": "'"}, {"char_start": 161, "char_end": 162, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "extend_volume", "func_src_before": "    def extend_volume(self, volume, new_size):\n        LOG.debug(_('enter: extend_volume: volume %s') % volume['id'])\n        ret = self._ensure_vdisk_no_fc_mappings(volume['name'],\n                                                allow_snaps=False)\n        if not ret:\n            exception_message = (_('extend_volume: Extending a volume with '\n                                   'snapshots is not supported.'))\n            raise exception.VolumeBackendAPIException(data=exception_message)\n\n        extend_amt = int(new_size) - volume['size']\n        ssh_cmd = ('svctask expandvdisksize -size %(amt)d -unit gb %(name)s'\n                   % {'amt': extend_amt, 'name': volume['name']})\n        out, err = self._run_ssh(ssh_cmd)\n        # No output should be returned from expandvdisksize\n        self._assert_ssh_return(len(out.strip()) == 0, 'extend_volume',\n                                ssh_cmd, out, err)\n        LOG.debug(_('leave: extend_volume: volume %s') % volume['id'])", "func_src_after": "    def extend_volume(self, volume, new_size):\n        LOG.debug(_('enter: extend_volume: volume %s') % volume['id'])\n        ret = self._ensure_vdisk_no_fc_mappings(volume['name'],\n                                                allow_snaps=False)\n        if not ret:\n            exception_message = (_('extend_volume: Extending a volume with '\n                                   'snapshots is not supported.'))\n            raise exception.VolumeBackendAPIException(data=exception_message)\n\n        extend_amt = int(new_size) - volume['size']\n        ssh_cmd = (['svctask', 'expandvdisksize', '-size', str(extend_amt),\n                    '-unit', 'gb', volume['name']])\n        out, err = self._run_ssh(ssh_cmd)\n        # No output should be returned from expandvdisksize\n        self._assert_ssh_return(len(out.strip()) == 0, 'extend_volume',\n                                ssh_cmd, out, err)\n        LOG.debug(_('leave: extend_volume: volume %s') % volume['id'])", "line_changes": {"deleted": [{"line_no": 11, "char_start": 544, "char_end": 621, "line": "        ssh_cmd = ('svctask expandvdisksize -size %(amt)d -unit gb %(name)s'\n"}, {"line_no": 12, "char_start": 621, "char_end": 687, "line": "                   % {'amt': extend_amt, 'name': volume['name']})\n"}], "added": [{"line_no": 11, "char_start": 544, "char_end": 620, "line": "        ssh_cmd = (['svctask', 'expandvdisksize', '-size', str(extend_amt),\n"}, {"line_no": 12, "char_start": 620, "char_end": 672, "line": "                    '-unit', 'gb', volume['name']])\n"}]}, "char_changes": {"deleted": [{"char_start": 594, "char_end": 595, "chars": "%"}, {"char_start": 596, "char_end": 598, "chars": "am"}, {"char_start": 599, "char_end": 600, "chars": ")"}, {"char_start": 601, "char_end": 614, "chars": " -unit gb %(n"}, {"char_start": 616, "char_end": 617, "chars": "e"}, {"char_start": 618, "char_end": 620, "chars": "s'"}, {"char_start": 640, "char_end": 641, "chars": "%"}, {"char_start": 642, "char_end": 643, "chars": "{"}, {"char_start": 644, "char_end": 654, "chars": "amt': exte"}, {"char_start": 655, "char_end": 659, "chars": "d_am"}, {"char_start": 663, "char_end": 667, "chars": "name"}, {"char_start": 668, "char_end": 669, "chars": ":"}, {"char_start": 684, "char_end": 685, "chars": "}"}], "added": [{"char_start": 563, "char_end": 564, "chars": "["}, {"char_start": 572, "char_end": 574, "chars": "',"}, {"char_start": 575, "char_end": 576, "chars": "'"}, {"char_start": 591, "char_end": 593, "chars": "',"}, {"char_start": 594, "char_end": 595, "chars": "'"}, {"char_start": 600, "char_end": 602, "chars": "',"}, {"char_start": 603, "char_end": 604, "chars": "s"}, {"char_start": 605, "char_end": 606, "chars": "r"}, {"char_start": 607, "char_end": 611, "chars": "exte"}, {"char_start": 612, "char_end": 614, "chars": "d_"}, {"char_start": 616, "char_end": 617, "chars": "t"}, {"char_start": 618, "char_end": 619, "chars": ","}, {"char_start": 641, "char_end": 645, "chars": "-uni"}, {"char_start": 650, "char_end": 652, "chars": "gb"}, {"char_start": 653, "char_end": 654, "chars": ","}, {"char_start": 669, "char_end": 670, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "_get_host_from_connector", "func_src_before": "    def _get_host_from_connector(self, connector):\n        \"\"\"List the hosts defined in the storage.\n\n        Return the host name with the given connection info, or None if there\n        is no host fitting that information.\n\n        \"\"\"\n\n        prefix = self._connector_to_hostname_prefix(connector)\n        LOG.debug(_('enter: _get_host_from_connector: prefix %s') % prefix)\n\n        # Get list of host in the storage\n        ssh_cmd = 'svcinfo lshost -delim !'\n        out, err = self._run_ssh(ssh_cmd)\n\n        if not len(out.strip()):\n            return None\n\n        # If we have FC information, we have a faster lookup option\n        hostname = None\n        if 'wwpns' in connector:\n            hostname = self._find_host_from_wwpn(connector)\n\n        # If we don't have a hostname yet, try the long way\n        if not hostname:\n            host_lines = out.strip().split('\\n')\n            self._assert_ssh_return(len(host_lines),\n                                    '_get_host_from_connector',\n                                    ssh_cmd, out, err)\n            header = host_lines.pop(0).split('!')\n            self._assert_ssh_return('name' in header,\n                                    '_get_host_from_connector',\n                                    ssh_cmd, out, err)\n            name_index = header.index('name')\n            hosts = map(lambda x: x.split('!')[name_index], host_lines)\n            hostname = self._find_host_exhaustive(connector, hosts)\n\n        LOG.debug(_('leave: _get_host_from_connector: host %s') % hostname)\n\n        return hostname", "func_src_after": "    def _get_host_from_connector(self, connector):\n        \"\"\"List the hosts defined in the storage.\n\n        Return the host name with the given connection info, or None if there\n        is no host fitting that information.\n\n        \"\"\"\n\n        prefix = self._connector_to_hostname_prefix(connector)\n        LOG.debug(_('enter: _get_host_from_connector: prefix %s') % prefix)\n\n        # Get list of host in the storage\n        ssh_cmd = ['svcinfo', 'lshost', '-delim', '!']\n        out, err = self._run_ssh(ssh_cmd)\n\n        if not len(out.strip()):\n            return None\n\n        # If we have FC information, we have a faster lookup option\n        hostname = None\n        if 'wwpns' in connector:\n            hostname = self._find_host_from_wwpn(connector)\n\n        # If we don't have a hostname yet, try the long way\n        if not hostname:\n            host_lines = out.strip().split('\\n')\n            self._assert_ssh_return(len(host_lines),\n                                    '_get_host_from_connector',\n                                    ssh_cmd, out, err)\n            header = host_lines.pop(0).split('!')\n            self._assert_ssh_return('name' in header,\n                                    '_get_host_from_connector',\n                                    ssh_cmd, out, err)\n            name_index = header.index('name')\n            hosts = map(lambda x: x.split('!')[name_index], host_lines)\n            hostname = self._find_host_exhaustive(connector, hosts)\n\n        LOG.debug(_('leave: _get_host_from_connector: host %s') % hostname)\n\n        return hostname", "line_changes": {"deleted": [{"line_no": 13, "char_start": 421, "char_end": 465, "line": "        ssh_cmd = 'svcinfo lshost -delim !'\n"}], "added": [{"line_no": 13, "char_start": 421, "char_end": 476, "line": "        ssh_cmd = ['svcinfo', 'lshost', '-delim', '!']\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 439, "char_end": 440, "chars": "["}, {"char_start": 448, "char_end": 450, "chars": "',"}, {"char_start": 451, "char_end": 452, "chars": "'"}, {"char_start": 458, "char_end": 460, "chars": "',"}, {"char_start": 461, "char_end": 462, "chars": "'"}, {"char_start": 468, "char_end": 470, "chars": "',"}, {"char_start": 471, "char_end": 472, "chars": "'"}, {"char_start": 474, "char_end": 475, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "_get_hostvdisk_mappings", "func_src_before": "    def _get_hostvdisk_mappings(self, host_name):\n        \"\"\"Return the defined storage mappings for a host.\"\"\"\n\n        return_data = {}\n        ssh_cmd = 'svcinfo lshostvdiskmap -delim ! %s' % host_name\n        out, err = self._run_ssh(ssh_cmd)\n\n        mappings = out.strip().split('\\n')\n        if len(mappings):\n            header = mappings.pop(0)\n            for mapping_line in mappings:\n                mapping_data = self._get_hdr_dic(header, mapping_line, '!')\n                return_data[mapping_data['vdisk_name']] = mapping_data\n\n        return return_data", "func_src_after": "    def _get_hostvdisk_mappings(self, host_name):\n        \"\"\"Return the defined storage mappings for a host.\"\"\"\n\n        return_data = {}\n        ssh_cmd = ['svcinfo', 'lshostvdiskmap', '-delim', '!', host_name]\n        out, err = self._run_ssh(ssh_cmd)\n\n        mappings = out.strip().split('\\n')\n        if len(mappings):\n            header = mappings.pop(0)\n            for mapping_line in mappings:\n                mapping_data = self._get_hdr_dic(header, mapping_line, '!')\n                return_data[mapping_data['vdisk_name']] = mapping_data\n\n        return return_data", "line_changes": {"deleted": [{"line_no": 5, "char_start": 138, "char_end": 205, "line": "        ssh_cmd = 'svcinfo lshostvdiskmap -delim ! %s' % host_name\n"}], "added": [{"line_no": 5, "char_start": 138, "char_end": 212, "line": "        ssh_cmd = ['svcinfo', 'lshostvdiskmap', '-delim', '!', host_name]\n"}]}, "char_changes": {"deleted": [{"char_start": 188, "char_end": 191, "chars": " %s"}, {"char_start": 192, "char_end": 194, "chars": " %"}], "added": [{"char_start": 156, "char_end": 157, "chars": "["}, {"char_start": 165, "char_end": 167, "chars": "',"}, {"char_start": 168, "char_end": 169, "chars": "'"}, {"char_start": 183, "char_end": 185, "chars": "',"}, {"char_start": 186, "char_end": 187, "chars": "'"}, {"char_start": 193, "char_end": 195, "chars": "',"}, {"char_start": 196, "char_end": 197, "chars": "'"}, {"char_start": 199, "char_end": 200, "chars": ","}, {"char_start": 210, "char_end": 211, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "main", "func_src_before": "def main():\n    global word\n    print(\"Starting script... press 'ctrl+c' in terminal to turn off\")\n    while True:\n        if pyperclip.paste() != word and len(pyperclip.paste().split())<5:\n            word = pyperclip.paste()\n            wordChc=False\n            req = requests.get(\"https://api-portal.dictionary.com/dcom/pageData/%s\" % word)\n            wordChcURB = False\n            reqURB=requests.get('https://api.urbandictionary.com/v0/define?term=%s' % word)\n            try:    \n                data = json.loads(req.text)['data']['content'][0]['entries'][0]['posBlocks'][0]['definitions']\n            except TypeError:\n                os.system('notify-send \"Cant find |%s| on dictionary.com!\"' % word)\n                wordChc = True\n            except KeyError:\n                os.system('notify-send \"Cant find |%s| on dictionary.com!\"' % word)\n                wordChc = True\n\n            if not wordChc:\n                definitions = []\n                try:\n                    for definition in data[:3]:\n                        definitions.append(cleanhtml(definition['definition']))\n                        definitions.append(\"------------\")\n                    os.system('notify-send \"definitions from dictionary.com:[{}\\n{}\"'\\\n                    .format(word+\"]\\n------------\",'\\n'.join(definitions)))\n                except KeyError:\n                    os.system('notify-send \"no results in dictionary.com\"')\n            try:    \n                dataURB = json.loads(reqURB.text)['list']\n            except TypeError:\n                os.system('notify-send \"Cant find |%s| on urbandictionary.com!\"' % word)\n                wordChcURB = True\n            except KeyError:\n                os.system('notify-send \"Cant find |%s| on urbandictionary.com!\"' % word)\n                wordChcURB = True\n\n            if not wordChcURB:    \n                definitionsURB = []\n                for definition in dataURB[:3]:\n                    definitionsURB.append(definition['definition'])\n                    definitionsURB.append(\"------------\")\n                os.system('notify-send \"definitions from urbandictionary.com:[{}\\n{}\"'\\\n                .format(word+\"]\\n------------\",'\\n'.join(definitionsURB)))\n    os.system('notify-send \"Thank you for using define.py made by kelj0\"')", "func_src_after": "def main():\n    global word\n    print(\"Starting script... press 'ctrl+c' in terminal to turn off\")\n    while True:\n        if pyperclip.paste() != word and len(pyperclip.paste().split())<5:\n            word = pyperclip.paste()\n            wordChc=False\n            req = requests.get(\"https://api-portal.dictionary.com/dcom/pageData/%s\" % word)\n            wordChcURB = False\n            reqURB=requests.get('https://api.urbandictionary.com/v0/define?term=%s' % word)\n            try:    \n                data = json.loads(req.text)['data']['content'][0]['entries'][0]['posBlocks'][0]['definitions']\n            except TypeError:\n                os.system('notify-send \"Cant find that word on dictionary.com!\"')\n                wordChc = True\n            except KeyError:\n                os.system('notify-send \"Cant find that word on dictionary.com!\"')\n                wordChc = True\n\n            if not wordChc:\n                definitions = []\n                try:\n                    for definition in data[:3]:\n                        definitions.append(cleanhtml(definition['definition']))\n                        definitions.append(\"------------\")\n                    os.system('notify-send \"definitions from dictionary.com:\\n{}\"'.format('\\n'.join(definitions)))\n                except KeyError:\n                    os.system('notify-send \"no results in dictionary.com\"')\n            try:    \n                dataURB = json.loads(reqURB.text)['list']\n            except TypeError:\n                os.system('notify-send \"Cant find that word on urbandictionary.com!\"' % word)\n                wordChcURB = True\n            except KeyError:\n                os.system('notify-send \"Cant find that word on urbandictionary.com!\"' % word)\n                wordChcURB = True\n\n            if not wordChcURB:    \n                definitionsURB = []\n                for definition in dataURB[:3]:\n                    definitionsURB.append(definition['definition'])\n                    definitionsURB.append(\"------------\")\n                os.system('notify-send \"definitions from urbandictionary.com:\\n{}\"'.format('\\n'.join(definitionsURB)))\n    os.system('notify-send \"Thank you for using define.py made by kelj0\"')", "line_changes": {"deleted": [{"line_no": 14, "char_start": 630, "char_end": 714, "line": "                os.system('notify-send \"Cant find |%s| on dictionary.com!\"' % word)\n"}, {"line_no": 17, "char_start": 774, "char_end": 858, "line": "                os.system('notify-send \"Cant find |%s| on dictionary.com!\"' % word)\n"}, {"line_no": 26, "char_start": 1159, "char_end": 1246, "line": "                    os.system('notify-send \"definitions from dictionary.com:[{}\\n{}\"'\\\n"}, {"line_no": 27, "char_start": 1246, "char_end": 1322, "line": "                    .format(word+\"]\\n------------\",'\\n'.join(definitions)))\n"}, {"line_no": 33, "char_start": 1540, "char_end": 1629, "line": "                os.system('notify-send \"Cant find |%s| on urbandictionary.com!\"' % word)\n"}, {"line_no": 36, "char_start": 1692, "char_end": 1781, "line": "                os.system('notify-send \"Cant find |%s| on urbandictionary.com!\"' % word)\n"}, {"line_no": 44, "char_start": 2060, "char_end": 2148, "line": "                os.system('notify-send \"definitions from urbandictionary.com:[{}\\n{}\"'\\\n"}, {"line_no": 45, "char_start": 2148, "char_end": 2223, "line": "                .format(word+\"]\\n------------\",'\\n'.join(definitionsURB)))\n"}], "added": [{"line_no": 14, "char_start": 630, "char_end": 712, "line": "                os.system('notify-send \"Cant find that word on dictionary.com!\"')\n"}, {"line_no": 17, "char_start": 772, "char_end": 854, "line": "                os.system('notify-send \"Cant find that word on dictionary.com!\"')\n"}, {"line_no": 26, "char_start": 1155, "char_end": 1270, "line": "                    os.system('notify-send \"definitions from dictionary.com:\\n{}\"'.format('\\n'.join(definitions)))\n"}, {"line_no": 32, "char_start": 1488, "char_end": 1582, "line": "                os.system('notify-send \"Cant find that word on urbandictionary.com!\"' % word)\n"}, {"line_no": 35, "char_start": 1645, "char_end": 1739, "line": "                os.system('notify-send \"Cant find that word on urbandictionary.com!\"' % word)\n"}, {"line_no": 43, "char_start": 2018, "char_end": 2137, "line": "                os.system('notify-send \"definitions from urbandictionary.com:\\n{}\"'.format('\\n'.join(definitionsURB)))\n"}]}, "char_changes": {"deleted": [{"char_start": 680, "char_end": 684, "chars": "|%s|"}, {"char_start": 705, "char_end": 712, "chars": " % word"}, {"char_start": 824, "char_end": 828, "chars": "|%s|"}, {"char_start": 849, "char_end": 856, "chars": " % word"}, {"char_start": 1235, "char_end": 1238, "chars": "[{}"}, {"char_start": 1244, "char_end": 1266, "chars": "\\\n                    "}, {"char_start": 1274, "char_end": 1297, "chars": "word+\"]\\n------------\","}, {"char_start": 1590, "char_end": 1594, "chars": "|%s|"}, {"char_start": 1742, "char_end": 1746, "chars": "|%s|"}, {"char_start": 2137, "char_end": 2140, "chars": "[{}"}, {"char_start": 2146, "char_end": 2164, "chars": "\\\n                "}, {"char_start": 2172, "char_end": 2195, "chars": "word+\"]\\n------------\","}], "added": [{"char_start": 680, "char_end": 689, "chars": "that word"}, {"char_start": 822, "char_end": 831, "chars": "that word"}, {"char_start": 1538, "char_end": 1547, "chars": "that word"}, {"char_start": 1695, "char_end": 1704, "chars": "that word"}]}, "commit_link": "github.com/kelj0/LearningPython/commit/2563088bf44f4d5e7f7d65f3c41f12fdaef4a1e4", "file_name": "SmallProjects/Define/define.py", "vul_type": "cwe-078"}
{"func_name": "_get_vvset_from_3par", "func_src_before": "    def _get_vvset_from_3par(self, volume_name):\n        \"\"\"Get Virtual Volume Set from 3PAR.\n\n        The only way to do this currently is to try and delete the volume\n        to get the error message.\n\n        NOTE(walter-boring): don't call this unless you know the volume is\n        already in a vvset!\n        \"\"\"\n        cmd = \"removevv -f %s\" % volume_name\n        LOG.debug(\"Issuing remove command to find vvset name %s\" % cmd)\n        out = self._cli_run(cmd, None)\n        vvset_name = None\n        if out and len(out) > 1:\n            if out[1].startswith(\"Attempt to delete \"):\n                words = out[1].split(\" \")\n                vvset_name = words[len(words) - 1]\n\n        return vvset_name", "func_src_after": "    def _get_vvset_from_3par(self, volume_name):\n        \"\"\"Get Virtual Volume Set from 3PAR.\n\n        The only way to do this currently is to try and delete the volume\n        to get the error message.\n\n        NOTE(walter-boring): don't call this unless you know the volume is\n        already in a vvset!\n        \"\"\"\n        cmd = ['removevv', '-f', volume_name]\n        LOG.debug(\"Issuing remove command to find vvset name %s\" % cmd)\n        out = self._cli_run(cmd)\n        vvset_name = None\n        if out and len(out) > 1:\n            if out[1].startswith(\"Attempt to delete \"):\n                words = out[1].split(\" \")\n                vvset_name = words[len(words) - 1]\n\n        return vvset_name", "line_changes": {"deleted": [{"line_no": 10, "char_start": 319, "char_end": 364, "line": "        cmd = \"removevv -f %s\" % volume_name\n"}, {"line_no": 12, "char_start": 436, "char_end": 475, "line": "        out = self._cli_run(cmd, None)\n"}], "added": [{"line_no": 10, "char_start": 319, "char_end": 365, "line": "        cmd = ['removevv', '-f', volume_name]\n"}, {"line_no": 12, "char_start": 437, "char_end": 470, "line": "        out = self._cli_run(cmd)\n"}]}, "char_changes": {"deleted": [{"char_start": 333, "char_end": 334, "chars": "\""}, {"char_start": 345, "char_end": 351, "chars": " %s\" %"}, {"char_start": 467, "char_end": 473, "chars": ", None"}], "added": [{"char_start": 333, "char_end": 335, "chars": "['"}, {"char_start": 343, "char_end": 345, "chars": "',"}, {"char_start": 346, "char_end": 347, "chars": "'"}, {"char_start": 349, "char_end": 351, "chars": "',"}, {"char_start": 363, "char_end": 364, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_common.py", "vul_type": "cwe-078"}
{"func_name": "_get_flashcopy_mapping_attributes", "func_src_before": "    def _get_flashcopy_mapping_attributes(self, fc_map_id):\n        LOG.debug(_('enter: _get_flashcopy_mapping_attributes: mapping %s')\n                  % fc_map_id)\n\n        fc_ls_map_cmd = 'svcinfo lsfcmap -filtervalue id=%s -delim !' % \\\n            fc_map_id\n        out, err = self._run_ssh(fc_ls_map_cmd)\n        if not len(out.strip()):\n            return None\n\n        # Get list of FlashCopy mappings\n        # We expect zero or one line if mapping does not exist,\n        # two lines if it does exist, otherwise error\n        lines = out.strip().split('\\n')\n        self._assert_ssh_return(len(lines) <= 2,\n                                '_get_flashcopy_mapping_attributes',\n                                fc_ls_map_cmd, out, err)\n\n        if len(lines) == 2:\n            attributes = self._get_hdr_dic(lines[0], lines[1], '!')\n        else:  # 0 or 1 lines\n            attributes = None\n\n        LOG.debug(_('leave: _get_flashcopy_mapping_attributes: mapping '\n                    '%(fc_map_id)s, attributes %(attributes)s') %\n                  {'fc_map_id': fc_map_id, 'attributes': attributes})\n\n        return attributes", "func_src_after": "    def _get_flashcopy_mapping_attributes(self, fc_map_id):\n        LOG.debug(_('enter: _get_flashcopy_mapping_attributes: mapping %s')\n                  % fc_map_id)\n\n        fc_ls_map_cmd = ['svcinfo', 'lsfcmap', '-filtervalue',\n                         'id=%s' % fc_map_id, '-delim', '!']\n        out, err = self._run_ssh(fc_ls_map_cmd)\n        if not len(out.strip()):\n            return None\n\n        # Get list of FlashCopy mappings\n        # We expect zero or one line if mapping does not exist,\n        # two lines if it does exist, otherwise error\n        lines = out.strip().split('\\n')\n        self._assert_ssh_return(len(lines) <= 2,\n                                '_get_flashcopy_mapping_attributes',\n                                fc_ls_map_cmd, out, err)\n\n        if len(lines) == 2:\n            attributes = self._get_hdr_dic(lines[0], lines[1], '!')\n        else:  # 0 or 1 lines\n            attributes = None\n\n        LOG.debug(_('leave: _get_flashcopy_mapping_attributes: mapping '\n                    '%(fc_map_id)s, attributes %(attributes)s') %\n                  {'fc_map_id': fc_map_id, 'attributes': attributes})\n\n        return attributes", "line_changes": {"deleted": [{"line_no": 5, "char_start": 168, "char_end": 242, "line": "        fc_ls_map_cmd = 'svcinfo lsfcmap -filtervalue id=%s -delim !' % \\\n"}, {"line_no": 6, "char_start": 242, "char_end": 264, "line": "            fc_map_id\n"}], "added": [{"line_no": 5, "char_start": 168, "char_end": 231, "line": "        fc_ls_map_cmd = ['svcinfo', 'lsfcmap', '-filtervalue',\n"}, {"line_no": 6, "char_start": 231, "char_end": 292, "line": "                         'id=%s' % fc_map_id, '-delim', '!']\n"}]}, "char_changes": {"deleted": [{"char_start": 222, "char_end": 227, "chars": "id=%s"}, {"char_start": 228, "char_end": 234, "chars": "-delim"}, {"char_start": 235, "char_end": 237, "chars": "!'"}, {"char_start": 238, "char_end": 239, "chars": "%"}, {"char_start": 240, "char_end": 242, "chars": "\\\n"}], "added": [{"char_start": 192, "char_end": 193, "chars": "["}, {"char_start": 201, "char_end": 203, "chars": "',"}, {"char_start": 204, "char_end": 205, "chars": "'"}, {"char_start": 212, "char_end": 214, "chars": "',"}, {"char_start": 215, "char_end": 216, "chars": "'"}, {"char_start": 228, "char_end": 236, "chars": "',\n     "}, {"char_start": 238, "char_end": 243, "chars": "     "}, {"char_start": 254, "char_end": 265, "chars": "  'id=%s' %"}, {"char_start": 275, "char_end": 291, "chars": ", '-delim', '!']"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "_add_volume_to_volume_set", "func_src_before": "    def _add_volume_to_volume_set(self, volume, volume_name,\n                                  cpg, vvs_name, qos):\n        if vvs_name is not None:\n            # Admin has set a volume set name to add the volume to\n            self._cli_run('createvvset -add %s %s' % (vvs_name,\n                                                      volume_name), None)\n        else:\n            vvs_name = self._get_3par_vvs_name(volume['id'])\n            domain = self.get_domain(cpg)\n            self._cli_run('createvvset -domain %s %s' % (domain,\n                                                         vvs_name), None)\n            self._set_qos_rule(qos, vvs_name)\n            self._cli_run('createvvset -add %s %s' % (vvs_name,\n                                                      volume_name), None)", "func_src_after": "    def _add_volume_to_volume_set(self, volume, volume_name,\n                                  cpg, vvs_name, qos):\n        if vvs_name is not None:\n            # Admin has set a volume set name to add the volume to\n            self._cli_run(['createvvset', '-add', vvs_name, volume_name])\n        else:\n            vvs_name = self._get_3par_vvs_name(volume['id'])\n            domain = self.get_domain(cpg)\n            self._cli_run(['createvvset', '-domain', domain, vvs_name])\n            self._set_qos_rule(qos, vvs_name)\n            self._cli_run(['createvvset', '-add', vvs_name, volume_name])", "line_changes": {"deleted": [{"line_no": 5, "char_start": 216, "char_end": 280, "line": "            self._cli_run('createvvset -add %s %s' % (vvs_name,\n"}, {"line_no": 6, "char_start": 280, "char_end": 354, "line": "                                                      volume_name), None)\n"}, {"line_no": 10, "char_start": 471, "char_end": 536, "line": "            self._cli_run('createvvset -domain %s %s' % (domain,\n"}, {"line_no": 11, "char_start": 536, "char_end": 610, "line": "                                                         vvs_name), None)\n"}, {"line_no": 13, "char_start": 656, "char_end": 720, "line": "            self._cli_run('createvvset -add %s %s' % (vvs_name,\n"}, {"line_no": 14, "char_start": 720, "char_end": 793, "line": "                                                      volume_name), None)\n"}], "added": [{"line_no": 5, "char_start": 216, "char_end": 290, "line": "            self._cli_run(['createvvset', '-add', vvs_name, volume_name])\n"}, {"line_no": 9, "char_start": 407, "char_end": 479, "line": "            self._cli_run(['createvvset', '-domain', domain, vvs_name])\n"}, {"line_no": 11, "char_start": 525, "char_end": 598, "line": "            self._cli_run(['createvvset', '-add', vvs_name, volume_name])\n"}]}, "char_changes": {"deleted": [{"char_start": 259, "char_end": 265, "chars": " %s %s"}, {"char_start": 266, "char_end": 268, "chars": " %"}, {"char_start": 269, "char_end": 270, "chars": "("}, {"char_start": 279, "char_end": 333, "chars": "\n                                                     "}, {"char_start": 345, "char_end": 352, "chars": "), None"}, {"char_start": 517, "char_end": 523, "chars": " %s %s"}, {"char_start": 524, "char_end": 526, "chars": " %"}, {"char_start": 527, "char_end": 528, "chars": "("}, {"char_start": 535, "char_end": 592, "chars": "\n                                                        "}, {"char_start": 601, "char_end": 608, "chars": "), None"}, {"char_start": 699, "char_end": 705, "chars": " %s %s"}, {"char_start": 706, "char_end": 708, "chars": " %"}, {"char_start": 709, "char_end": 710, "chars": "("}, {"char_start": 719, "char_end": 773, "chars": "\n                                                     "}, {"char_start": 785, "char_end": 792, "chars": "), None"}], "added": [{"char_start": 242, "char_end": 243, "chars": "["}, {"char_start": 255, "char_end": 257, "chars": "',"}, {"char_start": 258, "char_end": 259, "chars": "'"}, {"char_start": 264, "char_end": 265, "chars": ","}, {"char_start": 287, "char_end": 288, "chars": "]"}, {"char_start": 433, "char_end": 434, "chars": "["}, {"char_start": 446, "char_end": 448, "chars": "',"}, {"char_start": 449, "char_end": 450, "chars": "'"}, {"char_start": 458, "char_end": 459, "chars": ","}, {"char_start": 476, "char_end": 477, "chars": "]"}, {"char_start": 551, "char_end": 552, "chars": "["}, {"char_start": 564, "char_end": 566, "chars": "',"}, {"char_start": 567, "char_end": 568, "chars": "'"}, {"char_start": 573, "char_end": 574, "chars": ","}, {"char_start": 596, "char_end": 597, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_common.py", "vul_type": "cwe-078"}
{"func_name": "test_initialize_connection", "func_src_before": "    def test_initialize_connection(self):\n        self.driver._eql_execute = self.mox.\\\n            CreateMock(self.driver._eql_execute)\n        volume = {'name': self.volume_name}\n        self.stubs.Set(self.driver, \"_get_iscsi_properties\",\n                       self._fake_get_iscsi_properties)\n        self.driver._eql_execute('volume', 'select', volume['name'], 'access',\n                                 'create', 'initiator',\n                                 self.connector['initiator'],\n                                 'authmethod chap',\n                                 'username',\n                                 self.configuration.eqlx_chap_login)\n        self.mox.ReplayAll()\n        iscsi_properties = self.driver.initialize_connection(volume,\n                                                             self.connector)\n        self.assertEqual(iscsi_properties['data'],\n                         self._fake_get_iscsi_properties(volume))", "func_src_after": "    def test_initialize_connection(self):\n        self.driver._eql_execute = self.mox.\\\n            CreateMock(self.driver._eql_execute)\n        volume = {'name': self.volume_name}\n        self.stubs.Set(self.driver, \"_get_iscsi_properties\",\n                       self._fake_get_iscsi_properties)\n        self.driver._eql_execute('volume', 'select', volume['name'], 'access',\n                                 'create', 'initiator',\n                                 self.connector['initiator'],\n                                 'authmethod', 'chap',\n                                 'username',\n                                 self.configuration.eqlx_chap_login)\n        self.mox.ReplayAll()\n        iscsi_properties = self.driver.initialize_connection(volume,\n                                                             self.connector)\n        self.assertEqual(iscsi_properties['data'],\n                         self._fake_get_iscsi_properties(volume))", "line_changes": {"deleted": [{"line_no": 10, "char_start": 495, "char_end": 547, "line": "                                 'authmethod chap',\n"}], "added": [{"line_no": 10, "char_start": 495, "char_end": 550, "line": "                                 'authmethod', 'chap',\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 539, "char_end": 541, "chars": "',"}, {"char_start": 542, "char_end": 543, "chars": "'"}]}, "commit_link": "github.com/thatsdone/cinder/commit/9e858bebb89de05b1c9ecc27f5bd9fbff95a728e", "file_name": "cinder/tests/test_eqlx.py", "vul_type": "cwe-078"}
{"func_name": "test_create_invalid_host", "func_src_before": "    def test_create_invalid_host(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record\n        self.clear_mox()\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_cpg\",\n                       self.fake_get_cpg)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_domain\",\n                       self.fake_get_domain)\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_host_cmd = 'showhost -verbose fakehost'\n        _run_ssh(show_host_cmd, False).AndReturn([pack('no hosts listed'), ''])\n\n        create_host_cmd = ('createhost -persona 1 -domain (\\'OpenStack\\',) '\n                           'fakehost 123456789012345 123456789054321')\n        create_host_ret = pack(CLI_CR +\n                               'already used by host fakehost.foo (19)')\n        _run_ssh(create_host_cmd, False).AndReturn([create_host_ret, ''])\n\n        show_3par_cmd = 'showhost -verbose fakehost.foo'\n        _run_ssh(show_3par_cmd, False).AndReturn([pack(FC_SHOWHOST_RET), ''])\n        self.mox.ReplayAll()\n\n        host = self.driver._create_host(self.volume, self.connector)\n\n        self.assertEquals(host['name'], 'fakehost.foo')", "func_src_after": "    def test_create_invalid_host(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record\n        self.clear_mox()\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_cpg\",\n                       self.fake_get_cpg)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_domain\",\n                       self.fake_get_domain)\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_host_cmd = ['showhost', '-verbose', 'fakehost']\n        _run_ssh(show_host_cmd, False).AndReturn([pack('no hosts listed'), ''])\n\n        create_host_cmd = (['createhost', '-persona', '1', '-domain',\n                            ('OpenStack',), 'fakehost', '123456789012345',\n                            '123456789054321'])\n        create_host_ret = pack(CLI_CR +\n                               'already used by host fakehost.foo (19)')\n        _run_ssh(create_host_cmd, False).AndReturn([create_host_ret, ''])\n\n        show_3par_cmd = ['showhost', '-verbose', 'fakehost.foo']\n        _run_ssh(show_3par_cmd, False).AndReturn([pack(FC_SHOWHOST_RET), ''])\n        self.mox.ReplayAll()\n\n        host = self.driver._create_host(self.volume, self.connector)\n\n        self.assertEquals(host['name'], 'fakehost.foo')", "line_changes": {"deleted": [{"line_no": 13, "char_start": 505, "char_end": 558, "line": "        show_host_cmd = 'showhost -verbose fakehost'\n"}, {"line_no": 16, "char_start": 639, "char_end": 716, "line": "        create_host_cmd = ('createhost -persona 1 -domain (\\'OpenStack\\',) '\n"}, {"line_no": 17, "char_start": 716, "char_end": 787, "line": "                           'fakehost 123456789012345 123456789054321')\n"}, {"line_no": 22, "char_start": 975, "char_end": 1032, "line": "        show_3par_cmd = 'showhost -verbose fakehost.foo'\n"}], "added": [{"line_no": 13, "char_start": 505, "char_end": 566, "line": "        show_host_cmd = ['showhost', '-verbose', 'fakehost']\n"}, {"line_no": 16, "char_start": 647, "char_end": 717, "line": "        create_host_cmd = (['createhost', '-persona', '1', '-domain',\n"}, {"line_no": 17, "char_start": 717, "char_end": 792, "line": "                            ('OpenStack',), 'fakehost', '123456789012345',\n"}, {"line_no": 18, "char_start": 792, "char_end": 840, "line": "                            '123456789054321'])\n"}, {"line_no": 23, "char_start": 1028, "char_end": 1093, "line": "        show_3par_cmd = ['showhost', '-verbose', 'fakehost.foo']\n"}]}, "char_changes": {"deleted": [{"char_start": 696, "char_end": 710, "chars": " (\\'OpenStack\\"}, {"char_start": 712, "char_end": 715, "chars": ") '"}], "added": [{"char_start": 529, "char_end": 530, "chars": "["}, {"char_start": 539, "char_end": 541, "chars": "',"}, {"char_start": 542, "char_end": 543, "chars": "'"}, {"char_start": 551, "char_end": 553, "chars": "',"}, {"char_start": 554, "char_end": 555, "chars": "'"}, {"char_start": 564, "char_end": 565, "chars": "]"}, {"char_start": 674, "char_end": 675, "chars": "["}, {"char_start": 686, "char_end": 688, "chars": "',"}, {"char_start": 689, "char_end": 690, "chars": "'"}, {"char_start": 698, "char_end": 700, "chars": "',"}, {"char_start": 701, "char_end": 702, "chars": "'"}, {"char_start": 703, "char_end": 705, "chars": "',"}, {"char_start": 706, "char_end": 707, "chars": "'"}, {"char_start": 744, "char_end": 761, "chars": " ('OpenStack',), "}, {"char_start": 770, "char_end": 772, "chars": "',"}, {"char_start": 773, "char_end": 774, "chars": "'"}, {"char_start": 789, "char_end": 802, "chars": "',\n          "}, {"char_start": 803, "char_end": 821, "chars": "                 '"}, {"char_start": 837, "char_end": 838, "chars": "]"}, {"char_start": 1052, "char_end": 1053, "chars": "["}, {"char_start": 1062, "char_end": 1064, "chars": "',"}, {"char_start": 1065, "char_end": 1066, "chars": "'"}, {"char_start": 1074, "char_end": 1076, "chars": "',"}, {"char_start": 1077, "char_end": 1078, "chars": "'"}, {"char_start": 1091, "char_end": 1092, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/tests/test_hp3par.py", "vul_type": "cwe-078"}
{"func_name": "get_logs", "func_src_before": "@app.route('/api/uploads/<sid>/logs')\ndef get_logs(sid):\n    if '/' not in sid:\n        path = os.path.join(app.config['UPLOAD_FOLDER'], sid)\n        if os.path.isfile(os.path.join(path, app.config['LOG_FILE'])):\n            return send_from_directory(directory=path,\n                                        filename=app.config['LOG_FILE'])\n        else:\n            abort(404)\n    else:\n        abort(403)", "func_src_after": "@app.route('/api/uploads/<sid>/logs')\ndef get_logs(sid):\n    if utils.sid_is_valid(sid):\n        path = join(app.config['UPLOAD_FOLDER'], sid)\n\n        if os.path.isfile(join(path, app.config['LOG_FILE'])):\n            return send_from_directory(directory=path,\n                                        filename=app.config['LOG_FILE'])\n        else:\n            abort(404)\n    else:\n        abort(404)", "line_changes": {"deleted": [{"line_no": 3, "char_start": 57, "char_end": 80, "line": "    if '/' not in sid:\n"}, {"line_no": 4, "char_start": 80, "char_end": 142, "line": "        path = os.path.join(app.config['UPLOAD_FOLDER'], sid)\n"}, {"line_no": 5, "char_start": 142, "char_end": 213, "line": "        if os.path.isfile(os.path.join(path, app.config['LOG_FILE'])):\n"}, {"line_no": 11, "char_start": 388, "char_end": 406, "line": "        abort(403)\n"}], "added": [{"line_no": 3, "char_start": 57, "char_end": 89, "line": "    if utils.sid_is_valid(sid):\n"}, {"line_no": 4, "char_start": 89, "char_end": 143, "line": "        path = join(app.config['UPLOAD_FOLDER'], sid)\n"}, {"line_no": 5, "char_start": 143, "char_end": 144, "line": "\n"}, {"line_no": 6, "char_start": 144, "char_end": 207, "line": "        if os.path.isfile(join(path, app.config['LOG_FILE'])):\n"}, {"line_no": 12, "char_start": 382, "char_end": 400, "line": "        abort(404)\n"}]}, "char_changes": {"deleted": [{"char_start": 64, "char_end": 70, "chars": "'/' no"}, {"char_start": 71, "char_end": 72, "chars": " "}, {"char_start": 73, "char_end": 75, "chars": "n "}, {"char_start": 95, "char_end": 103, "chars": "os.path."}, {"char_start": 168, "char_end": 176, "chars": "os.path."}, {"char_start": 404, "char_end": 405, "chars": "3"}], "added": [{"char_start": 64, "char_end": 65, "chars": "u"}, {"char_start": 66, "char_end": 80, "chars": "ils.sid_is_val"}, {"char_start": 81, "char_end": 83, "chars": "d("}, {"char_start": 86, "char_end": 87, "chars": ")"}, {"char_start": 143, "char_end": 144, "chars": "\n"}, {"char_start": 398, "char_end": 399, "chars": "4"}]}, "commit_link": "github.com/cheukyin699/genset-demo-site/commit/abb55b1a6786b0a995c2cdf77a7977a1d51cfc0d", "file_name": "app/views.py", "vul_type": "cwe-078"}
{"func_name": "_make_fc_map", "func_src_before": "    def _make_fc_map(self, source, target, full_copy):\n        copyflag = '' if full_copy else '-copyrate 0'\n        fc_map_cli_cmd = ('svctask mkfcmap -source %(src)s -target %(tgt)s '\n                          '-autodelete %(copyflag)s' %\n                          {'src': source,\n                           'tgt': target,\n                           'copyflag': copyflag})\n        out, err = self._run_ssh(fc_map_cli_cmd)\n        self._driver_assert(\n            len(out.strip()),\n            _('create FC mapping from %(source)s to %(target)s - '\n              'did not find success message in CLI output.\\n'\n              ' stdout: %(out)s\\n stderr: %(err)s\\n')\n            % {'source': source,\n               'target': target,\n               'out': str(out),\n               'err': str(err)})\n\n        # Ensure that the output is as expected\n        match_obj = re.search('FlashCopy Mapping, id \\[([0-9]+)\\], '\n                              'successfully created', out)\n        # Make sure we got a \"successfully created\" message with vdisk id\n        self._driver_assert(\n            match_obj is not None,\n            _('create FC mapping from %(source)s to %(target)s - '\n              'did not find success message in CLI output.\\n'\n              ' stdout: %(out)s\\n stderr: %(err)s\\n')\n            % {'source': source,\n               'target': target,\n               'out': str(out),\n               'err': str(err)})\n\n        try:\n            fc_map_id = match_obj.group(1)\n            self._driver_assert(\n                fc_map_id is not None,\n                _('create FC mapping from %(source)s to %(target)s - '\n                  'did not find mapping id in CLI output.\\n'\n                  ' stdout: %(out)s\\n stderr: %(err)s\\n')\n                % {'source': source,\n                   'target': target,\n                   'out': str(out),\n                   'err': str(err)})\n        except IndexError:\n            self._driver_assert(\n                False,\n                _('create FC mapping from %(source)s to %(target)s - '\n                  'did not find mapping id in CLI output.\\n'\n                  ' stdout: %(out)s\\n stderr: %(err)s\\n')\n                % {'source': source,\n                   'target': target,\n                   'out': str(out),\n                   'err': str(err)})\n        return fc_map_id", "func_src_after": "    def _make_fc_map(self, source, target, full_copy):\n        fc_map_cli_cmd = ['svctask', 'mkfcmap', '-source', source, '-target',\n                          target, '-autodelete']\n        if not full_copy:\n            fc_map_cli_cmd.extend(['-copyrate', '0'])\n        out, err = self._run_ssh(fc_map_cli_cmd)\n        self._driver_assert(\n            len(out.strip()),\n            _('create FC mapping from %(source)s to %(target)s - '\n              'did not find success message in CLI output.\\n'\n              ' stdout: %(out)s\\n stderr: %(err)s\\n')\n            % {'source': source,\n               'target': target,\n               'out': str(out),\n               'err': str(err)})\n\n        # Ensure that the output is as expected\n        match_obj = re.search('FlashCopy Mapping, id \\[([0-9]+)\\], '\n                              'successfully created', out)\n        # Make sure we got a \"successfully created\" message with vdisk id\n        self._driver_assert(\n            match_obj is not None,\n            _('create FC mapping from %(source)s to %(target)s - '\n              'did not find success message in CLI output.\\n'\n              ' stdout: %(out)s\\n stderr: %(err)s\\n')\n            % {'source': source,\n               'target': target,\n               'out': str(out),\n               'err': str(err)})\n\n        try:\n            fc_map_id = match_obj.group(1)\n            self._driver_assert(\n                fc_map_id is not None,\n                _('create FC mapping from %(source)s to %(target)s - '\n                  'did not find mapping id in CLI output.\\n'\n                  ' stdout: %(out)s\\n stderr: %(err)s\\n')\n                % {'source': source,\n                   'target': target,\n                   'out': str(out),\n                   'err': str(err)})\n        except IndexError:\n            self._driver_assert(\n                False,\n                _('create FC mapping from %(source)s to %(target)s - '\n                  'did not find mapping id in CLI output.\\n'\n                  ' stdout: %(out)s\\n stderr: %(err)s\\n')\n                % {'source': source,\n                   'target': target,\n                   'out': str(out),\n                   'err': str(err)})\n        return fc_map_id", "line_changes": {"deleted": [{"line_no": 2, "char_start": 55, "char_end": 109, "line": "        copyflag = '' if full_copy else '-copyrate 0'\n"}, {"line_no": 3, "char_start": 109, "char_end": 186, "line": "        fc_map_cli_cmd = ('svctask mkfcmap -source %(src)s -target %(tgt)s '\n"}, {"line_no": 4, "char_start": 186, "char_end": 241, "line": "                          '-autodelete %(copyflag)s' %\n"}, {"line_no": 5, "char_start": 241, "char_end": 283, "line": "                          {'src': source,\n"}, {"line_no": 6, "char_start": 283, "char_end": 325, "line": "                           'tgt': target,\n"}, {"line_no": 7, "char_start": 325, "char_end": 375, "line": "                           'copyflag': copyflag})\n"}], "added": [{"line_no": 2, "char_start": 55, "char_end": 133, "line": "        fc_map_cli_cmd = ['svctask', 'mkfcmap', '-source', source, '-target',\n"}, {"line_no": 3, "char_start": 133, "char_end": 182, "line": "                          target, '-autodelete']\n"}, {"line_no": 4, "char_start": 182, "char_end": 208, "line": "        if not full_copy:\n"}, {"line_no": 5, "char_start": 208, "char_end": 262, "line": "            fc_map_cli_cmd.extend(['-copyrate', '0'])\n"}]}, "char_changes": {"deleted": [{"char_start": 63, "char_end": 117, "chars": "copyflag = '' if full_copy else '-copyrate 0'\n        "}, {"char_start": 134, "char_end": 135, "chars": "("}, {"char_start": 160, "char_end": 162, "chars": "%("}, {"char_start": 165, "char_end": 167, "chars": ")s"}, {"char_start": 175, "char_end": 184, "chars": " %(tgt)s "}, {"char_start": 224, "char_end": 237, "chars": " %(copyflag)s"}, {"char_start": 238, "char_end": 240, "chars": " %"}, {"char_start": 241, "char_end": 242, "chars": " "}, {"char_start": 252, "char_end": 271, "chars": "               {'sr"}, {"char_start": 272, "char_end": 273, "chars": "'"}, {"char_start": 274, "char_end": 282, "chars": " source,"}, {"char_start": 295, "char_end": 318, "chars": "               'tgt': t"}, {"char_start": 319, "char_end": 321, "chars": "rg"}, {"char_start": 323, "char_end": 352, "chars": ",\n                           "}, {"char_start": 357, "char_end": 359, "chars": "fl"}, {"char_start": 360, "char_end": 361, "chars": "g"}, {"char_start": 362, "char_end": 363, "chars": ":"}, {"char_start": 364, "char_end": 373, "chars": "copyflag}"}], "added": [{"char_start": 80, "char_end": 81, "chars": "["}, {"char_start": 89, "char_end": 91, "chars": "',"}, {"char_start": 92, "char_end": 93, "chars": "'"}, {"char_start": 100, "char_end": 102, "chars": "',"}, {"char_start": 103, "char_end": 104, "chars": "'"}, {"char_start": 111, "char_end": 113, "chars": "',"}, {"char_start": 115, "char_end": 117, "chars": "ou"}, {"char_start": 119, "char_end": 121, "chars": "e,"}, {"char_start": 122, "char_end": 123, "chars": "'"}, {"char_start": 131, "char_end": 132, "chars": ","}, {"char_start": 159, "char_end": 167, "chars": "target, "}, {"char_start": 180, "char_end": 181, "chars": "]"}, {"char_start": 190, "char_end": 192, "chars": "if"}, {"char_start": 193, "char_end": 196, "chars": "not"}, {"char_start": 197, "char_end": 198, "chars": "f"}, {"char_start": 199, "char_end": 202, "chars": "ll_"}, {"char_start": 203, "char_end": 207, "chars": "opy:"}, {"char_start": 220, "char_end": 224, "chars": "fc_m"}, {"char_start": 225, "char_end": 235, "chars": "p_cli_cmd."}, {"char_start": 236, "char_end": 237, "chars": "x"}, {"char_start": 238, "char_end": 243, "chars": "end(["}, {"char_start": 244, "char_end": 245, "chars": "-"}, {"char_start": 249, "char_end": 250, "chars": "r"}, {"char_start": 251, "char_end": 253, "chars": "te"}, {"char_start": 254, "char_end": 255, "chars": ","}, {"char_start": 256, "char_end": 260, "chars": "'0']"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "test_get_iscsi_ip", "func_src_before": "    def test_get_iscsi_ip(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record driver set up\n        self.clear_mox()\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_port_cmd = 'showport'\n        _run_ssh(show_port_cmd, False).AndReturn([pack(PORT_RET), ''])\n\n        show_port_i_cmd = 'showport -iscsi'\n        _run_ssh(show_port_i_cmd, False).AndReturn([pack(READY_ISCSI_PORT_RET),\n                                                    ''])\n\n        show_port_i_cmd = 'showport -iscsiname'\n        _run_ssh(show_port_i_cmd, False).AndReturn([pack(SHOW_PORT_ISCSI), ''])\n\n        #record\n        show_vlun_cmd = 'showvlun -a -host fakehost'\n        show_vlun_ret = 'no vluns listed\\r\\n'\n        _run_ssh(show_vlun_cmd, False).AndReturn([pack(show_vlun_ret), ''])\n        show_vlun_cmd = 'showvlun -a -showcols Port'\n        _run_ssh(show_vlun_cmd, False).AndReturn([pack(SHOW_VLUN_NONE), ''])\n\n        self.mox.ReplayAll()\n\n        config = self.setup_configuration()\n        config.iscsi_ip_address = '10.10.10.10'\n        config.hp3par_iscsi_ips = ['10.10.220.253', '10.10.220.252']\n        self.setup_driver(config, set_up_fakes=False)\n\n        ip = self.driver._get_iscsi_ip('fakehost')\n        self.assertEqual(ip, '10.10.220.252')", "func_src_after": "    def test_get_iscsi_ip(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record driver set up\n        self.clear_mox()\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_port_cmd = ['showport']\n        _run_ssh(show_port_cmd, False).AndReturn([pack(PORT_RET), ''])\n\n        show_port_i_cmd = ['showport', '-iscsi']\n        _run_ssh(show_port_i_cmd, False).AndReturn([pack(READY_ISCSI_PORT_RET),\n                                                    ''])\n\n        show_port_i_cmd = ['showport', '-iscsiname']\n        _run_ssh(show_port_i_cmd, False).AndReturn([pack(SHOW_PORT_ISCSI), ''])\n\n        #record\n        show_vlun_cmd = ['showvlun', '-a', '-host', 'fakehost']\n        show_vlun_ret = 'no vluns listed\\r\\n'\n        _run_ssh(show_vlun_cmd, False).AndReturn([pack(show_vlun_ret), ''])\n        show_vlun_cmd = ['showvlun', '-a', '-showcols', 'Port']\n        _run_ssh(show_vlun_cmd, False).AndReturn([pack(SHOW_VLUN_NONE), ''])\n\n        self.mox.ReplayAll()\n\n        config = self.setup_configuration()\n        config.iscsi_ip_address = '10.10.10.10'\n        config.hp3par_iscsi_ips = ['10.10.220.253', '10.10.220.252']\n        self.setup_driver(config, set_up_fakes=False)\n\n        ip = self.driver._get_iscsi_ip('fakehost')\n        self.assertEqual(ip, '10.10.220.252')", "line_changes": {"deleted": [{"line_no": 9, "char_start": 290, "char_end": 325, "line": "        show_port_cmd = 'showport'\n"}, {"line_no": 12, "char_start": 397, "char_end": 441, "line": "        show_port_i_cmd = 'showport -iscsi'\n"}, {"line_no": 16, "char_start": 579, "char_end": 627, "line": "        show_port_i_cmd = 'showport -iscsiname'\n"}, {"line_no": 20, "char_start": 724, "char_end": 777, "line": "        show_vlun_cmd = 'showvlun -a -host fakehost'\n"}, {"line_no": 23, "char_start": 899, "char_end": 952, "line": "        show_vlun_cmd = 'showvlun -a -showcols Port'\n"}], "added": [{"line_no": 9, "char_start": 290, "char_end": 327, "line": "        show_port_cmd = ['showport']\n"}, {"line_no": 12, "char_start": 399, "char_end": 448, "line": "        show_port_i_cmd = ['showport', '-iscsi']\n"}, {"line_no": 16, "char_start": 586, "char_end": 639, "line": "        show_port_i_cmd = ['showport', '-iscsiname']\n"}, {"line_no": 20, "char_start": 736, "char_end": 800, "line": "        show_vlun_cmd = ['showvlun', '-a', '-host', 'fakehost']\n"}, {"line_no": 23, "char_start": 922, "char_end": 986, "line": "        show_vlun_cmd = ['showvlun', '-a', '-showcols', 'Port']\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 314, "char_end": 315, "chars": "["}, {"char_start": 325, "char_end": 326, "chars": "]"}, {"char_start": 425, "char_end": 426, "chars": "["}, {"char_start": 435, "char_end": 437, "chars": "',"}, {"char_start": 438, "char_end": 439, "chars": "'"}, {"char_start": 446, "char_end": 447, "chars": "]"}, {"char_start": 612, "char_end": 613, "chars": "["}, {"char_start": 622, "char_end": 624, "chars": "',"}, {"char_start": 625, "char_end": 626, "chars": "'"}, {"char_start": 637, "char_end": 638, "chars": "]"}, {"char_start": 760, "char_end": 761, "chars": "["}, {"char_start": 770, "char_end": 772, "chars": "',"}, {"char_start": 773, "char_end": 774, "chars": "'"}, {"char_start": 776, "char_end": 778, "chars": "',"}, {"char_start": 779, "char_end": 780, "chars": "'"}, {"char_start": 785, "char_end": 787, "chars": "',"}, {"char_start": 788, "char_end": 789, "chars": "'"}, {"char_start": 798, "char_end": 799, "chars": "]"}, {"char_start": 946, "char_end": 947, "chars": "["}, {"char_start": 956, "char_end": 958, "chars": "',"}, {"char_start": 959, "char_end": 960, "chars": "'"}, {"char_start": 962, "char_end": 964, "chars": "',"}, {"char_start": 965, "char_end": 966, "chars": "'"}, {"char_start": 975, "char_end": 977, "chars": "',"}, {"char_start": 978, "char_end": 979, "chars": "'"}, {"char_start": 984, "char_end": 985, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/tests/test_hp3par.py", "vul_type": "cwe-078"}
{"func_name": "usage", "func_src_before": "def usage(args=None):\n    '''\n    Return usage information for volumes mounted on this minion\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' disk.usage\n    '''\n    if __grains__['kernel'] == 'Linux':\n        cmd = 'df -P'\n    elif __grains__['kernel'] == 'OpenBSD':\n        cmd = 'df -kP'\n    else:\n        cmd = 'df'\n    if args:\n        cmd = cmd + ' -' + args\n    ret = {}\n    out = __salt__['cmd.run'](cmd).splitlines()\n    for line in out:\n        if not line:\n            continue\n        if line.startswith('Filesystem'):\n            continue\n        comps = line.split()\n        while not comps[1].isdigit():\n            comps[0] = '{0} {1}'.format(comps[0], comps[1])\n            comps.pop(1)\n        try:\n            if __grains__['kernel'] == 'Darwin':\n                ret[comps[8]] = {\n                        'filesystem': comps[0],\n                        '512-blocks': comps[1],\n                        'used': comps[2],\n                        'available': comps[3],\n                        'capacity': comps[4],\n                        'iused': comps[5],\n                        'ifree': comps[6],\n                        '%iused': comps[7],\n                }\n            else:\n                ret[comps[5]] = {\n                        'filesystem': comps[0],\n                        '1K-blocks': comps[1],\n                        'used': comps[2],\n                        'available': comps[3],\n                        'capacity': comps[4],\n                }\n        except IndexError:\n            log.warn(\"Problem parsing disk usage information\")\n            ret = {}\n    return ret", "func_src_after": "def usage(args=None):\n    '''\n    Return usage information for volumes mounted on this minion\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' disk.usage\n    '''\n    flags = ''\n    allowed = ('a', 'B', 'h', 'H', 'i', 'k', 'l', 'P', 't', 'T', 'x', 'v')\n    for flag in args:\n        if flag in allowed:\n            flags += flag\n        else:\n            break\n    if __grains__['kernel'] == 'Linux':\n        cmd = 'df -P'\n    elif __grains__['kernel'] == 'OpenBSD':\n        cmd = 'df -kP'\n    else:\n        cmd = 'df'\n    if args:\n        cmd += ' -{0}'.format(flags)\n    ret = {}\n    out = __salt__['cmd.run'](cmd).splitlines()\n    for line in out:\n        if not line:\n            continue\n        if line.startswith('Filesystem'):\n            continue\n        comps = line.split()\n        while not comps[1].isdigit():\n            comps[0] = '{0} {1}'.format(comps[0], comps[1])\n            comps.pop(1)\n        try:\n            if __grains__['kernel'] == 'Darwin':\n                ret[comps[8]] = {\n                        'filesystem': comps[0],\n                        '512-blocks': comps[1],\n                        'used': comps[2],\n                        'available': comps[3],\n                        'capacity': comps[4],\n                        'iused': comps[5],\n                        'ifree': comps[6],\n                        '%iused': comps[7],\n                }\n            else:\n                ret[comps[5]] = {\n                        'filesystem': comps[0],\n                        '1K-blocks': comps[1],\n                        'used': comps[2],\n                        'available': comps[3],\n                        'capacity': comps[4],\n                }\n        except IndexError:\n            log.warn(\"Problem parsing disk usage information\")\n            ret = {}\n    return ret", "line_changes": {"deleted": [{"line_no": 18, "char_start": 346, "char_end": 378, "line": "        cmd = cmd + ' -' + args\n"}], "added": [{"line_no": 11, "char_start": 175, "char_end": 190, "line": "    flags = ''\n"}, {"line_no": 12, "char_start": 190, "char_end": 265, "line": "    allowed = ('a', 'B', 'h', 'H', 'i', 'k', 'l', 'P', 't', 'T', 'x', 'v')\n"}, {"line_no": 13, "char_start": 265, "char_end": 287, "line": "    for flag in args:\n"}, {"line_no": 14, "char_start": 287, "char_end": 315, "line": "        if flag in allowed:\n"}, {"line_no": 15, "char_start": 315, "char_end": 341, "line": "            flags += flag\n"}, {"line_no": 16, "char_start": 341, "char_end": 355, "line": "        else:\n"}, {"line_no": 17, "char_start": 355, "char_end": 373, "line": "            break\n"}, {"line_no": 25, "char_start": 544, "char_end": 581, "line": "        cmd += ' -{0}'.format(flags)\n"}]}, "char_changes": {"deleted": [{"char_start": 215, "char_end": 215, "chars": ""}, {"char_start": 359, "char_end": 365, "chars": " cmd +"}, {"char_start": 370, "char_end": 373, "chars": " + "}, {"char_start": 374, "char_end": 375, "chars": "r"}], "added": [{"char_start": 179, "char_end": 377, "chars": "flags = ''\n    allowed = ('a', 'B', 'h', 'H', 'i', 'k', 'l', 'P', 't', 'T', 'x', 'v')\n    for flag in args:\n        if flag in allowed:\n            flags += flag\n        else:\n            break\n    "}, {"char_start": 557, "char_end": 558, "chars": "="}, {"char_start": 562, "char_end": 565, "chars": "{0}"}, {"char_start": 566, "char_end": 571, "chars": ".form"}, {"char_start": 572, "char_end": 577, "chars": "t(fla"}, {"char_start": 579, "char_end": 580, "chars": ")"}]}, "commit_link": "github.com/saltstack/salt/commit/ebdef37b7e5d2b95a01d34b211c61c61da67e46a", "file_name": "salt/modules/disk.py", "vul_type": "cwe-078"}
{"func_name": "_get_fc_wwpns", "func_src_before": "    def _get_fc_wwpns(self):\n        for key in self._storage_nodes:\n            node = self._storage_nodes[key]\n            ssh_cmd = 'svcinfo lsnode -delim ! %s' % node['id']\n            raw = self._run_ssh(ssh_cmd)\n            resp = CLIResponse(raw, delim='!', with_header=False)\n            wwpns = set(node['WWPN'])\n            for i, s in resp.select('port_id', 'port_status'):\n                if 'unconfigured' != s:\n                    wwpns.add(i)\n            node['WWPN'] = list(wwpns)\n            LOG.info(_('WWPN on node %(node)s: %(wwpn)s')\n                     % {'node': node['id'], 'wwpn': node['WWPN']})", "func_src_after": "    def _get_fc_wwpns(self):\n        for key in self._storage_nodes:\n            node = self._storage_nodes[key]\n            ssh_cmd = ['svcinfo', 'lsnode', '-delim', '!', node['id']]\n            raw = self._run_ssh(ssh_cmd)\n            resp = CLIResponse(raw, delim='!', with_header=False)\n            wwpns = set(node['WWPN'])\n            for i, s in resp.select('port_id', 'port_status'):\n                if 'unconfigured' != s:\n                    wwpns.add(i)\n            node['WWPN'] = list(wwpns)\n            LOG.info(_('WWPN on node %(node)s: %(wwpn)s')\n                     % {'node': node['id'], 'wwpn': node['WWPN']})", "line_changes": {"deleted": [{"line_no": 4, "char_start": 113, "char_end": 177, "line": "            ssh_cmd = 'svcinfo lsnode -delim ! %s' % node['id']\n"}], "added": [{"line_no": 4, "char_start": 113, "char_end": 184, "line": "            ssh_cmd = ['svcinfo', 'lsnode', '-delim', '!', node['id']]\n"}]}, "char_changes": {"deleted": [{"char_start": 159, "char_end": 162, "chars": " %s"}, {"char_start": 163, "char_end": 165, "chars": " %"}], "added": [{"char_start": 135, "char_end": 136, "chars": "["}, {"char_start": 144, "char_end": 146, "chars": "',"}, {"char_start": 147, "char_end": 148, "chars": "'"}, {"char_start": 154, "char_end": 156, "chars": "',"}, {"char_start": 157, "char_end": 158, "chars": "'"}, {"char_start": 164, "char_end": 166, "chars": "',"}, {"char_start": 167, "char_end": 168, "chars": "'"}, {"char_start": 170, "char_end": 171, "chars": ","}, {"char_start": 181, "char_end": 182, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "ls", "func_src_before": "    def ls(self, data, path):\n        credentials = self._formatCredentials(data, name='current')\n\n        command = (\n            '{credentials} '\n            'rclone lsjson current:{path}'\n        ).format(\n            credentials=credentials,\n            path=path,\n        )\n\n        try:\n            result = self._execute(command)\n            result = json.loads(result)\n            return result\n        except subprocess.CalledProcessError as e:\n            raise RcloneException(sanitize(str(e)))", "func_src_after": "    def ls(self, data, path):\n        credentials = self._formatCredentials(data, name='current')\n        command = [\n            'rclone',\n            'lsjson',\n            'current:{}'.format(path),\n        ]\n\n        try:\n            result = self._execute(command, credentials)\n            result = json.loads(result)\n            return result\n        except subprocess.CalledProcessError as e:\n            raise RcloneException(sanitize(str(e)))", "line_changes": {"deleted": [{"line_no": 3, "char_start": 98, "char_end": 99, "line": "\n"}, {"line_no": 4, "char_start": 99, "char_end": 119, "line": "        command = (\n"}, {"line_no": 5, "char_start": 119, "char_end": 148, "line": "            '{credentials} '\n"}, {"line_no": 6, "char_start": 148, "char_end": 191, "line": "            'rclone lsjson current:{path}'\n"}, {"line_no": 7, "char_start": 191, "char_end": 209, "line": "        ).format(\n"}, {"line_no": 8, "char_start": 209, "char_end": 246, "line": "            credentials=credentials,\n"}, {"line_no": 9, "char_start": 246, "char_end": 269, "line": "            path=path,\n"}, {"line_no": 10, "char_start": 269, "char_end": 279, "line": "        )\n"}, {"line_no": 13, "char_start": 293, "char_end": 337, "line": "            result = self._execute(command)\n"}], "added": [{"line_no": 3, "char_start": 98, "char_end": 118, "line": "        command = [\n"}, {"line_no": 4, "char_start": 118, "char_end": 140, "line": "            'rclone',\n"}, {"line_no": 5, "char_start": 140, "char_end": 162, "line": "            'lsjson',\n"}, {"line_no": 6, "char_start": 162, "char_end": 201, "line": "            'current:{}'.format(path),\n"}, {"line_no": 7, "char_start": 201, "char_end": 211, "line": "        ]\n"}, {"line_no": 10, "char_start": 225, "char_end": 282, "line": "            result = self._execute(command, credentials)\n"}]}, "char_changes": {"deleted": [{"char_start": 98, "char_end": 99, "chars": "\n"}, {"char_start": 117, "char_end": 118, "chars": "("}, {"char_start": 132, "char_end": 134, "chars": "{c"}, {"char_start": 135, "char_end": 142, "chars": "edentia"}, {"char_start": 143, "char_end": 146, "chars": "s} "}, {"char_start": 161, "char_end": 168, "chars": "rclone "}, {"char_start": 174, "char_end": 189, "chars": " current:{path}"}, {"char_start": 199, "char_end": 210, "chars": ").format(\n "}, {"char_start": 214, "char_end": 221, "chars": "       "}, {"char_start": 223, "char_end": 234, "chars": "edentials=c"}, {"char_start": 236, "char_end": 238, "chars": "de"}, {"char_start": 240, "char_end": 259, "chars": "ials,\n            p"}, {"char_start": 261, "char_end": 263, "chars": "h="}, {"char_start": 277, "char_end": 278, "chars": ")"}], "added": [{"char_start": 116, "char_end": 117, "chars": "["}, {"char_start": 131, "char_end": 132, "chars": "r"}, {"char_start": 134, "char_end": 137, "chars": "one"}, {"char_start": 138, "char_end": 139, "chars": ","}, {"char_start": 160, "char_end": 161, "chars": ","}, {"char_start": 174, "char_end": 175, "chars": "'"}, {"char_start": 176, "char_end": 178, "chars": "ur"}, {"char_start": 182, "char_end": 189, "chars": ":{}'.fo"}, {"char_start": 190, "char_end": 191, "chars": "m"}, {"char_start": 193, "char_end": 194, "chars": "("}, {"char_start": 198, "char_end": 199, "chars": ")"}, {"char_start": 209, "char_end": 210, "chars": "]"}, {"char_start": 267, "char_end": 280, "chars": ", credentials"}]}, "commit_link": "github.com/FredHutch/motuz/commit/045468cb9bff47bb3bb72268b6d5a3fe44e383db", "file_name": "src/backend/api/utils/rclone_connection.py", "vul_type": "cwe-078"}
{"func_name": "_run_ssh", "func_src_before": "    def _run_ssh(self, command, check_exit=True, attempts=1):\n        if not self.sshpool:\n            self.sshpool = utils.SSHPool(self.config.san_ip,\n                                         self.config.san_ssh_port,\n                                         self.config.ssh_conn_timeout,\n                                         self.config.san_login,\n                                         password=self.config.san_password,\n                                         privatekey=\n                                         self.config.san_private_key,\n                                         min_size=\n                                         self.config.ssh_min_pool_conn,\n                                         max_size=\n                                         self.config.ssh_max_pool_conn)\n        try:\n            total_attempts = attempts\n            with self.sshpool.item() as ssh:\n                while attempts > 0:\n                    attempts -= 1\n                    try:\n                        return self._ssh_execute(ssh, command,\n                                                 check_exit_code=check_exit)\n                    except Exception as e:\n                        LOG.error(e)\n                        greenthread.sleep(randint(20, 500) / 100.0)\n                msg = (_(\"SSH Command failed after '%(total_attempts)r' \"\n                         \"attempts : '%(command)s'\") %\n                       {'total_attempts': total_attempts, 'command': command})\n                raise paramiko.SSHException(msg)\n        except Exception:\n            with excutils.save_and_reraise_exception():\n                LOG.error(_(\"Error running ssh command: %s\") % command)", "func_src_after": "    def _run_ssh(self, cmd_list, check_exit=True, attempts=1):\n        utils.check_ssh_injection(cmd_list)\n        command = ' '. join(cmd_list)\n\n        if not self.sshpool:\n            self.sshpool = utils.SSHPool(self.config.san_ip,\n                                         self.config.san_ssh_port,\n                                         self.config.ssh_conn_timeout,\n                                         self.config.san_login,\n                                         password=self.config.san_password,\n                                         privatekey=\n                                         self.config.san_private_key,\n                                         min_size=\n                                         self.config.ssh_min_pool_conn,\n                                         max_size=\n                                         self.config.ssh_max_pool_conn)\n        try:\n            total_attempts = attempts\n            with self.sshpool.item() as ssh:\n                while attempts > 0:\n                    attempts -= 1\n                    try:\n                        return self._ssh_execute(ssh, command,\n                                                 check_exit_code=check_exit)\n                    except Exception as e:\n                        LOG.error(e)\n                        greenthread.sleep(randint(20, 500) / 100.0)\n                msg = (_(\"SSH Command failed after '%(total_attempts)r' \"\n                         \"attempts : '%(command)s'\") %\n                       {'total_attempts': total_attempts, 'command': command})\n                raise paramiko.SSHException(msg)\n        except Exception:\n            with excutils.save_and_reraise_exception():\n                LOG.error(_(\"Error running ssh command: %s\") % command)", "line_changes": {"deleted": [{"line_no": 1, "char_start": 0, "char_end": 62, "line": "    def _run_ssh(self, command, check_exit=True, attempts=1):\n"}], "added": [{"line_no": 1, "char_start": 0, "char_end": 63, "line": "    def _run_ssh(self, cmd_list, check_exit=True, attempts=1):\n"}, {"line_no": 2, "char_start": 63, "char_end": 107, "line": "        utils.check_ssh_injection(cmd_list)\n"}, {"line_no": 3, "char_start": 107, "char_end": 145, "line": "        command = ' '. join(cmd_list)\n"}, {"line_no": 4, "char_start": 145, "char_end": 146, "line": "\n"}]}, "char_changes": {"deleted": [{"char_start": 24, "char_end": 25, "chars": "o"}, {"char_start": 26, "char_end": 29, "chars": "man"}], "added": [{"char_start": 26, "char_end": 31, "chars": "_list"}, {"char_start": 62, "char_end": 145, "chars": "\n        utils.check_ssh_injection(cmd_list)\n        command = ' '. join(cmd_list)\n"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_common.py", "vul_type": "cwe-078"}
{"func_name": "verify", "func_src_before": "    def verify(self, data):\n        credentials = self._formatCredentials(data, name='current')\n        command = '{} rclone lsjson current:'.format(credentials)\n\n        try:\n            result = self._execute(command)\n            return {\n                'result': True,\n                'message': 'Success',\n            }\n        except subprocess.CalledProcessError as e:\n            returncode = e.returncode\n            return {\n                'result': False,\n                'message': 'Exit status {}'.format(returncode),\n            }", "func_src_after": "    def verify(self, data):\n        credentials = self._formatCredentials(data, name='current')\n        command = [\n            'rclone',\n            'lsjson',\n            'current:',\n        ]\n\n        try:\n            result = self._execute(command, credentials)\n            return {\n                'result': True,\n                'message': 'Success',\n            }\n        except subprocess.CalledProcessError as e:\n            returncode = e.returncode\n            return {\n                'result': False,\n                'message': 'Exit status {}'.format(returncode),\n            }", "line_changes": {"deleted": [{"line_no": 3, "char_start": 96, "char_end": 162, "line": "        command = '{} rclone lsjson current:'.format(credentials)\n"}, {"line_no": 6, "char_start": 176, "char_end": 220, "line": "            result = self._execute(command)\n"}], "added": [{"line_no": 3, "char_start": 96, "char_end": 116, "line": "        command = [\n"}, {"line_no": 4, "char_start": 116, "char_end": 138, "line": "            'rclone',\n"}, {"line_no": 5, "char_start": 138, "char_end": 160, "line": "            'lsjson',\n"}, {"line_no": 6, "char_start": 160, "char_end": 184, "line": "            'current:',\n"}, {"line_no": 7, "char_start": 184, "char_end": 194, "line": "        ]\n"}, {"line_no": 10, "char_start": 208, "char_end": 265, "line": "            result = self._execute(command, credentials)\n"}]}, "char_changes": {"deleted": [{"char_start": 115, "char_end": 118, "chars": "{} "}, {"char_start": 141, "char_end": 161, "chars": ".format(credentials)"}], "added": [{"char_start": 114, "char_end": 123, "chars": "[\n       "}, {"char_start": 124, "char_end": 129, "chars": "    '"}, {"char_start": 135, "char_end": 141, "chars": "',\n   "}, {"char_start": 142, "char_end": 151, "chars": "        '"}, {"char_start": 157, "char_end": 171, "chars": "',\n           "}, {"char_start": 172, "char_end": 173, "chars": "'"}, {"char_start": 182, "char_end": 193, "chars": ",\n        ]"}, {"char_start": 250, "char_end": 263, "chars": ", credentials"}]}, "commit_link": "github.com/FredHutch/motuz/commit/045468cb9bff47bb3bb72268b6d5a3fe44e383db", "file_name": "src/backend/api/utils/rclone_connection.py", "vul_type": "cwe-078"}
{"func_name": "add_extra_args", "func_src_before": "    def add_extra_args(self, args=None):\n        \"\"\"Add more args depending on how known args are set.\"\"\"\n        parsed = vars(self.parse_known_args(nohelp=True)[0])\n\n        # find which image mode specified if any, and add additional arguments\n        image_mode = parsed.get('image_mode', None)\n        if image_mode is not None and image_mode != 'none':\n            self.add_image_args(image_mode)\n\n        # find which task specified if any, and add its specific arguments\n        task = parsed.get('task', None)\n        if task is not None:\n            self.add_task_args(task)\n        evaltask = parsed.get('evaltask', None)\n        if evaltask is not None:\n            self.add_task_args(evaltask)\n\n        # find which model specified if any, and add its specific arguments\n        model = parsed.get('model', None)\n        if model is not None:\n            self.add_model_subargs(model)\n\n        # reset parser-level defaults over any model-level defaults\n        try:\n            self.set_defaults(**self._defaults)\n        except AttributeError:\n            raise RuntimeError('Please file an issue on github that argparse '\n                               'got an attribute error when parsing.')", "func_src_after": "    def add_extra_args(self, args=None):\n        \"\"\"Add more args depending on how known args are set.\"\"\"\n        parsed = vars(self.parse_known_args(args, nohelp=True)[0])\n\n        # find which image mode specified if any, and add additional arguments\n        image_mode = parsed.get('image_mode', None)\n        if image_mode is not None and image_mode != 'none':\n            self.add_image_args(image_mode)\n\n        # find which task specified if any, and add its specific arguments\n        task = parsed.get('task', None)\n        if task is not None:\n            self.add_task_args(task)\n        evaltask = parsed.get('evaltask', None)\n        if evaltask is not None:\n            self.add_task_args(evaltask)\n\n        # find which model specified if any, and add its specific arguments\n        model = parsed.get('model', None)\n        if model is not None:\n            self.add_model_subargs(model)\n\n        # reset parser-level defaults over any model-level defaults\n        try:\n            self.set_defaults(**self._defaults)\n        except AttributeError:\n            raise RuntimeError('Please file an issue on github that argparse '\n                               'got an attribute error when parsing.')", "line_changes": {"deleted": [{"line_no": 3, "char_start": 106, "char_end": 167, "line": "        parsed = vars(self.parse_known_args(nohelp=True)[0])\n"}], "added": [{"line_no": 3, "char_start": 106, "char_end": 173, "line": "        parsed = vars(self.parse_known_args(args, nohelp=True)[0])\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 150, "char_end": 156, "chars": "args, "}]}, "commit_link": "github.com/freedombenLiu/ParlAI/commit/601668d569e1276e0b8bf2bf8fb43e391e10d170", "file_name": "parlai/core/params.py", "vul_type": "cwe-078"}
{"func_name": "_get_vdisk_fc_mappings", "func_src_before": "    def _get_vdisk_fc_mappings(self, vdisk_name):\n        \"\"\"Return FlashCopy mappings that this vdisk is associated with.\"\"\"\n\n        ssh_cmd = 'svcinfo lsvdiskfcmappings -nohdr %s' % vdisk_name\n        out, err = self._run_ssh(ssh_cmd)\n\n        mapping_ids = []\n        if (len(out.strip())):\n            lines = out.strip().split('\\n')\n            mapping_ids = [line.split()[0] for line in lines]\n        return mapping_ids", "func_src_after": "    def _get_vdisk_fc_mappings(self, vdisk_name):\n        \"\"\"Return FlashCopy mappings that this vdisk is associated with.\"\"\"\n\n        ssh_cmd = ['svcinfo', 'lsvdiskfcmappings', '-nohdr', vdisk_name]\n        out, err = self._run_ssh(ssh_cmd)\n\n        mapping_ids = []\n        if (len(out.strip())):\n            lines = out.strip().split('\\n')\n            mapping_ids = [line.split()[0] for line in lines]\n        return mapping_ids", "line_changes": {"deleted": [{"line_no": 4, "char_start": 127, "char_end": 196, "line": "        ssh_cmd = 'svcinfo lsvdiskfcmappings -nohdr %s' % vdisk_name\n"}], "added": [{"line_no": 4, "char_start": 127, "char_end": 200, "line": "        ssh_cmd = ['svcinfo', 'lsvdiskfcmappings', '-nohdr', vdisk_name]\n"}]}, "char_changes": {"deleted": [{"char_start": 178, "char_end": 181, "chars": " %s"}, {"char_start": 182, "char_end": 184, "chars": " %"}], "added": [{"char_start": 145, "char_end": 146, "chars": "["}, {"char_start": 154, "char_end": 156, "chars": "',"}, {"char_start": 157, "char_end": 158, "chars": "'"}, {"char_start": 175, "char_end": 177, "chars": "',"}, {"char_start": 178, "char_end": 179, "chars": "'"}, {"char_start": 186, "char_end": 187, "chars": ","}, {"char_start": 198, "char_end": 199, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "test_create_host", "func_src_before": "    def test_create_host(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record\n        self.clear_mox()\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_cpg\",\n                       self.fake_get_cpg)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_domain\",\n                       self.fake_get_domain)\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_host_cmd = 'showhost -verbose fakehost'\n        _run_ssh(show_host_cmd, False).AndReturn([pack('no hosts listed'), ''])\n\n        create_host_cmd = ('createhost -iscsi -persona 1 -domain '\n                           '(\\'OpenStack\\',) '\n                           'fakehost iqn.1993-08.org.debian:01:222')\n        _run_ssh(create_host_cmd, False).AndReturn([CLI_CR, ''])\n\n        _run_ssh(show_host_cmd, False).AndReturn([pack(ISCSI_HOST_RET), ''])\n        self.mox.ReplayAll()\n\n        host = self.driver._create_host(self.volume, self.connector)\n        self.assertEqual(host['name'], self.FAKE_HOST)", "func_src_after": "    def test_create_host(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record\n        self.clear_mox()\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_cpg\",\n                       self.fake_get_cpg)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_domain\",\n                       self.fake_get_domain)\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_host_cmd = ['showhost', '-verbose', 'fakehost']\n        _run_ssh(show_host_cmd, False).AndReturn([pack('no hosts listed'), ''])\n\n        create_host_cmd = (['createhost', '-iscsi', '-persona', '1', '-domain',\n                            ('OpenStack',), 'fakehost',\n                            'iqn.1993-08.org.debian:01:222'])\n        _run_ssh(create_host_cmd, False).AndReturn([CLI_CR, ''])\n\n        _run_ssh(show_host_cmd, False).AndReturn([pack(ISCSI_HOST_RET), ''])\n        self.mox.ReplayAll()\n\n        host = self.driver._create_host(self.volume, self.connector)\n        self.assertEqual(host['name'], self.FAKE_HOST)", "line_changes": {"deleted": [{"line_no": 13, "char_start": 497, "char_end": 550, "line": "        show_host_cmd = 'showhost -verbose fakehost'\n"}, {"line_no": 16, "char_start": 631, "char_end": 698, "line": "        create_host_cmd = ('createhost -iscsi -persona 1 -domain '\n"}, {"line_no": 17, "char_start": 698, "char_end": 745, "line": "                           '(\\'OpenStack\\',) '\n"}, {"line_no": 18, "char_start": 745, "char_end": 814, "line": "                           'fakehost iqn.1993-08.org.debian:01:222')\n"}], "added": [{"line_no": 13, "char_start": 497, "char_end": 558, "line": "        show_host_cmd = ['showhost', '-verbose', 'fakehost']\n"}, {"line_no": 16, "char_start": 639, "char_end": 719, "line": "        create_host_cmd = (['createhost', '-iscsi', '-persona', '1', '-domain',\n"}, {"line_no": 17, "char_start": 719, "char_end": 775, "line": "                            ('OpenStack',), 'fakehost',\n"}, {"line_no": 18, "char_start": 775, "char_end": 837, "line": "                            'iqn.1993-08.org.debian:01:222'])\n"}]}, "char_changes": {"deleted": [{"char_start": 695, "char_end": 696, "chars": " "}, {"char_start": 725, "char_end": 726, "chars": "'"}, {"char_start": 727, "char_end": 728, "chars": "\\"}, {"char_start": 738, "char_end": 739, "chars": "\\"}, {"char_start": 772, "char_end": 781, "chars": "'fakehost"}], "added": [{"char_start": 521, "char_end": 522, "chars": "["}, {"char_start": 531, "char_end": 533, "chars": "',"}, {"char_start": 534, "char_end": 535, "chars": "'"}, {"char_start": 543, "char_end": 545, "chars": "',"}, {"char_start": 546, "char_end": 547, "chars": "'"}, {"char_start": 556, "char_end": 557, "chars": "]"}, {"char_start": 666, "char_end": 667, "chars": "["}, {"char_start": 678, "char_end": 680, "chars": "',"}, {"char_start": 681, "char_end": 682, "chars": "'"}, {"char_start": 688, "char_end": 690, "chars": "',"}, {"char_start": 691, "char_end": 692, "chars": "'"}, {"char_start": 700, "char_end": 702, "chars": "',"}, {"char_start": 703, "char_end": 704, "chars": "'"}, {"char_start": 705, "char_end": 707, "chars": "',"}, {"char_start": 708, "char_end": 709, "chars": "'"}, {"char_start": 717, "char_end": 718, "chars": ","}, {"char_start": 719, "char_end": 720, "chars": " "}, {"char_start": 761, "char_end": 762, "chars": ","}, {"char_start": 764, "char_end": 774, "chars": "fakehost',"}, {"char_start": 775, "char_end": 776, "chars": " "}, {"char_start": 834, "char_end": 835, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/tests/test_hp3par.py", "vul_type": "cwe-078"}
{"func_name": "_copy_volume", "func_src_before": "    def _copy_volume(self, src_name, dest_name, cpg=None, snap_cpg=None,\n                     tpvv=True):\n        # Virtual volume sets are not supported with the -online option\n        cmd = 'createvvcopy -p %s -online ' % src_name\n        if snap_cpg:\n            cmd += '-snp_cpg %s ' % snap_cpg\n        if tpvv:\n            cmd += '-tpvv '\n        if cpg:\n            cmd += cpg + ' '\n        cmd += dest_name\n        LOG.debug('Creating clone of a volume with %s' % cmd)\n        self._cli_run(cmd, None)", "func_src_after": "    def _copy_volume(self, src_name, dest_name, cpg=None, snap_cpg=None,\n                     tpvv=True):\n        # Virtual volume sets are not supported with the -online option\n        cmd = ['createvvcopy', '-p', src_name, '-online']\n        if snap_cpg:\n            cmd.extend(['-snp_cpg', snap_cpg])\n        if tpvv:\n            cmd.append('-tpvv')\n        if cpg:\n            cmd.append(cpg)\n        cmd.append(dest_name)\n        LOG.debug('Creating clone of a volume with %s' % cmd)\n        self._cli_run(cmd)", "line_changes": {"deleted": [{"line_no": 4, "char_start": 178, "char_end": 233, "line": "        cmd = 'createvvcopy -p %s -online ' % src_name\n"}, {"line_no": 6, "char_start": 254, "char_end": 299, "line": "            cmd += '-snp_cpg %s ' % snap_cpg\n"}, {"line_no": 8, "char_start": 316, "char_end": 344, "line": "            cmd += '-tpvv '\n"}, {"line_no": 10, "char_start": 360, "char_end": 389, "line": "            cmd += cpg + ' '\n"}, {"line_no": 11, "char_start": 389, "char_end": 414, "line": "        cmd += dest_name\n"}, {"line_no": 13, "char_start": 476, "char_end": 508, "line": "        self._cli_run(cmd, None)\n"}], "added": [{"line_no": 4, "char_start": 178, "char_end": 236, "line": "        cmd = ['createvvcopy', '-p', src_name, '-online']\n"}, {"line_no": 6, "char_start": 257, "char_end": 304, "line": "            cmd.extend(['-snp_cpg', snap_cpg])\n"}, {"line_no": 8, "char_start": 321, "char_end": 353, "line": "            cmd.append('-tpvv')\n"}, {"line_no": 10, "char_start": 369, "char_end": 397, "line": "            cmd.append(cpg)\n"}, {"line_no": 11, "char_start": 397, "char_end": 427, "line": "        cmd.append(dest_name)\n"}, {"line_no": 13, "char_start": 489, "char_end": 515, "line": "        self._cli_run(cmd)\n"}]}, "char_changes": {"deleted": [{"char_start": 209, "char_end": 210, "chars": "%"}, {"char_start": 219, "char_end": 220, "chars": " "}, {"char_start": 221, "char_end": 232, "chars": " % src_name"}, {"char_start": 269, "char_end": 273, "chars": " += "}, {"char_start": 282, "char_end": 286, "chars": " %s "}, {"char_start": 287, "char_end": 289, "chars": " %"}, {"char_start": 331, "char_end": 335, "chars": " += "}, {"char_start": 341, "char_end": 342, "chars": " "}, {"char_start": 375, "char_end": 379, "chars": " += "}, {"char_start": 382, "char_end": 388, "chars": " + ' '"}, {"char_start": 400, "char_end": 404, "chars": " += "}, {"char_start": 501, "char_end": 507, "chars": ", None"}], "added": [{"char_start": 192, "char_end": 193, "chars": "["}, {"char_start": 206, "char_end": 208, "chars": "',"}, {"char_start": 209, "char_end": 210, "chars": "'"}, {"char_start": 212, "char_end": 214, "chars": "',"}, {"char_start": 216, "char_end": 224, "chars": "rc_name,"}, {"char_start": 225, "char_end": 226, "chars": "'"}, {"char_start": 234, "char_end": 235, "chars": "]"}, {"char_start": 272, "char_end": 281, "chars": ".extend(["}, {"char_start": 291, "char_end": 292, "chars": ","}, {"char_start": 301, "char_end": 303, "chars": "])"}, {"char_start": 336, "char_end": 344, "chars": ".append("}, {"char_start": 351, "char_end": 352, "chars": ")"}, {"char_start": 384, "char_end": 392, "chars": ".append("}, {"char_start": 395, "char_end": 396, "chars": ")"}, {"char_start": 408, "char_end": 416, "chars": ".append("}, {"char_start": 425, "char_end": 426, "chars": ")"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_common.py", "vul_type": "cwe-078"}
{"func_name": "_get_active_nsp", "func_src_before": "    def _get_active_nsp(self, hostname):\n        \"\"\"Return the active nsp, if one exists, for the given host.\"\"\"\n        result = self.common._cli_run('showvlun -a -host %s' % hostname, None)\n        if result:\n            # first line is header\n            result = result[1:]\n            for line in result:\n                info = line.split(\",\")\n                if info and len(info) > 4:\n                    return info[4]", "func_src_after": "    def _get_active_nsp(self, hostname):\n        \"\"\"Return the active nsp, if one exists, for the given host.\"\"\"\n        result = self.common._cli_run(['showvlun', '-a', '-host', hostname])\n        if result:\n            # first line is header\n            result = result[1:]\n            for line in result:\n                info = line.split(\",\")\n                if info and len(info) > 4:\n                    return info[4]", "line_changes": {"deleted": [{"line_no": 3, "char_start": 113, "char_end": 192, "line": "        result = self.common._cli_run('showvlun -a -host %s' % hostname, None)\n"}], "added": [{"line_no": 3, "char_start": 113, "char_end": 190, "line": "        result = self.common._cli_run(['showvlun', '-a', '-host', hostname])\n"}]}, "char_changes": {"deleted": [{"char_start": 169, "char_end": 172, "chars": " %s"}, {"char_start": 173, "char_end": 175, "chars": " %"}, {"char_start": 184, "char_end": 190, "chars": ", None"}], "added": [{"char_start": 151, "char_end": 152, "chars": "["}, {"char_start": 161, "char_end": 163, "chars": "',"}, {"char_start": 164, "char_end": 165, "chars": "'"}, {"char_start": 167, "char_end": 169, "chars": "',"}, {"char_start": 170, "char_end": 171, "chars": "'"}, {"char_start": 177, "char_end": 178, "chars": ","}, {"char_start": 187, "char_end": 188, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_iscsi.py", "vul_type": "cwe-078"}
{"func_name": "initialize_connection", "func_src_before": "    def initialize_connection(self, volume, connector):\n        \"\"\"Restrict access to a volume.\"\"\"\n        try:\n            cmd = ['volume', 'select', volume['name'], 'access', 'create',\n                   'initiator', connector['initiator']]\n            if self.configuration.eqlx_use_chap:\n                cmd.extend(['authmethod chap', 'username',\n                            self.configuration.eqlx_chap_login])\n            self._eql_execute(*cmd)\n            iscsi_properties = self._get_iscsi_properties(volume)\n            return {\n                'driver_volume_type': 'iscsi',\n                'data': iscsi_properties\n            }\n        except Exception:\n            with excutils.save_and_reraise_exception():\n                LOG.error(_('Failed to initialize connection to volume %s'),\n                          volume['name'])", "func_src_after": "    def initialize_connection(self, volume, connector):\n        \"\"\"Restrict access to a volume.\"\"\"\n        try:\n            cmd = ['volume', 'select', volume['name'], 'access', 'create',\n                   'initiator', connector['initiator']]\n            if self.configuration.eqlx_use_chap:\n                cmd.extend(['authmethod', 'chap', 'username',\n                            self.configuration.eqlx_chap_login])\n            self._eql_execute(*cmd)\n            iscsi_properties = self._get_iscsi_properties(volume)\n            return {\n                'driver_volume_type': 'iscsi',\n                'data': iscsi_properties\n            }\n        except Exception:\n            with excutils.save_and_reraise_exception():\n                LOG.error(_('Failed to initialize connection to volume %s'),\n                          volume['name'])", "line_changes": {"deleted": [{"line_no": 7, "char_start": 292, "char_end": 351, "line": "                cmd.extend(['authmethod chap', 'username',\n"}], "added": [{"line_no": 7, "char_start": 292, "char_end": 354, "line": "                cmd.extend(['authmethod', 'chap', 'username',\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 331, "char_end": 333, "chars": "',"}, {"char_start": 334, "char_end": 335, "chars": "'"}]}, "commit_link": "github.com/thatsdone/cinder/commit/9e858bebb89de05b1c9ecc27f5bd9fbff95a728e", "file_name": "cinder/volume/drivers/eqlx.py", "vul_type": "cwe-078"}
{"func_name": "mkdir", "func_src_before": "    def mkdir(self, data, path):\n        credentials = self._formatCredentials(data, name='current')\n\n        command = (\n            '{credentials} '\n            'rclone touch current:{path}/.keep'\n        ).format(\n            credentials=credentials,\n            path=path,\n        )\n\n        try:\n            result = self._execute(command)\n            return {\n                'message': 'Success',\n            }\n        except subprocess.CalledProcessError as e:\n            raise RcloneException(sanitize(str(e)))", "func_src_after": "    def mkdir(self, data, path):\n        credentials = self._formatCredentials(data, name='current')\n        command = [\n            'rclone',\n            'touch',\n            'current:{}/.keep'.format(path),\n        ]\n\n        try:\n            result = self._execute(command, credentials)\n            return {\n                'message': 'Success',\n            }\n        except subprocess.CalledProcessError as e:\n            raise RcloneException(sanitize(str(e)))", "line_changes": {"deleted": [{"line_no": 3, "char_start": 101, "char_end": 102, "line": "\n"}, {"line_no": 4, "char_start": 102, "char_end": 122, "line": "        command = (\n"}, {"line_no": 5, "char_start": 122, "char_end": 151, "line": "            '{credentials} '\n"}, {"line_no": 6, "char_start": 151, "char_end": 199, "line": "            'rclone touch current:{path}/.keep'\n"}, {"line_no": 7, "char_start": 199, "char_end": 217, "line": "        ).format(\n"}, {"line_no": 8, "char_start": 217, "char_end": 254, "line": "            credentials=credentials,\n"}, {"line_no": 9, "char_start": 254, "char_end": 277, "line": "            path=path,\n"}, {"line_no": 10, "char_start": 277, "char_end": 287, "line": "        )\n"}, {"line_no": 13, "char_start": 301, "char_end": 345, "line": "            result = self._execute(command)\n"}], "added": [{"line_no": 3, "char_start": 101, "char_end": 121, "line": "        command = [\n"}, {"line_no": 4, "char_start": 121, "char_end": 143, "line": "            'rclone',\n"}, {"line_no": 5, "char_start": 143, "char_end": 164, "line": "            'touch',\n"}, {"line_no": 6, "char_start": 164, "char_end": 209, "line": "            'current:{}/.keep'.format(path),\n"}, {"line_no": 7, "char_start": 209, "char_end": 219, "line": "        ]\n"}, {"line_no": 10, "char_start": 233, "char_end": 290, "line": "            result = self._execute(command, credentials)\n"}]}, "char_changes": {"deleted": [{"char_start": 101, "char_end": 102, "chars": "\n"}, {"char_start": 120, "char_end": 121, "chars": "("}, {"char_start": 135, "char_end": 137, "chars": "{c"}, {"char_start": 138, "char_end": 145, "chars": "edentia"}, {"char_start": 146, "char_end": 149, "chars": "s} "}, {"char_start": 164, "char_end": 171, "chars": "rclone "}, {"char_start": 186, "char_end": 190, "chars": "path"}, {"char_start": 198, "char_end": 208, "chars": "\n        )"}, {"char_start": 216, "char_end": 266, "chars": "\n            credentials=credentials,\n            "}, {"char_start": 270, "char_end": 275, "chars": "=path"}, {"char_start": 285, "char_end": 286, "chars": ")"}], "added": [{"char_start": 119, "char_end": 120, "chars": "["}, {"char_start": 134, "char_end": 135, "chars": "r"}, {"char_start": 136, "char_end": 139, "chars": "lon"}, {"char_start": 141, "char_end": 142, "chars": ","}, {"char_start": 161, "char_end": 166, "chars": "',\n  "}, {"char_start": 167, "char_end": 177, "chars": "         '"}, {"char_start": 206, "char_end": 207, "chars": ")"}, {"char_start": 217, "char_end": 218, "chars": "]"}, {"char_start": 275, "char_end": 288, "chars": ", credentials"}]}, "commit_link": "github.com/FredHutch/motuz/commit/045468cb9bff47bb3bb72268b6d5a3fe44e383db", "file_name": "src/backend/api/utils/rclone_connection.py", "vul_type": "cwe-078"}
{"func_name": "populate_custom_grains_and_pillar", "func_src_before": "def populate_custom_grains_and_pillar():\n    '''\n    Populate local salt-minion grains and pillar fields values as specified in\n    config file.\n\n    For example:\n\n        custom_grains_pillar:\n          grains:\n            - selinux: selinux:enabled\n            - release: osrelease\n          pillar:\n            - ntpserver: network_services:ntpserver\n\n    Note that the core grains are already included in hubble grains -- this\n    is only necessary for custom grains and pillar data.\n    '''\n    log.debug('Fetching custom grains and pillar details')\n    grains = {}\n    salt.modules.config.__opts__ = __opts__\n    custom_grains = __salt__['config.get']('custom_grains_pillar:grains', [])\n    for grain in custom_grains:\n        for key in grain:\n            if _valid_command(grain[key]):\n                value = __salt__['cmd.run']('salt-call grains.get {0}'.format(grain[key])).split('\\n')[1].strip()\n                grains[key] = value\n    custom_pillar = __salt__['config.get']('custom_grains_pillar:pillar', [])\n    for pillar in custom_pillar:\n        for key in pillar:\n            if _valid_command(pillar[key]):\n                value = __salt__['cmd.run']('salt-call pillar.get {0}'.format(pillar[key])).split('\\n')[1].strip()\n                grains[key] = value\n    log.debug('Done with fetching custom grains and pillar details')\n    return grains", "func_src_after": "def populate_custom_grains_and_pillar():\n    '''\n    Populate local salt-minion grains and pillar fields values as specified in\n    config file.\n\n    For example:\n\n        custom_grains_pillar:\n          grains:\n            - selinux: selinux:enabled\n            - release: osrelease\n          pillar:\n            - ntpserver: network_services:ntpserver\n\n    Note that the core grains are already included in hubble grains -- this\n    is only necessary for custom grains and pillar data.\n    '''\n    log.debug('Fetching custom grains and pillar details')\n    grains = {}\n    salt.modules.config.__opts__ = __opts__\n    custom_grains = __salt__['config.get']('custom_grains_pillar:grains', [])\n    for grain in custom_grains:\n        for key in grain:\n            value = __salt__['cmd.run'](['salt-call', 'grains.get', grain[key]]).split('\\n')[1].strip()\n            grains[key] = value\n    custom_pillar = __salt__['config.get']('custom_grains_pillar:pillar', [])\n    for pillar in custom_pillar:\n        for key in pillar:\n            value = __salt__['cmd.run'](['salt-call', 'pillar.get', pillar[key]]).split('\\n')[1].strip()\n            grains[key] = value\n    log.debug('Done with fetching custom grains and pillar details')\n    return grains", "line_changes": {"deleted": [{"line_no": 24, "char_start": 751, "char_end": 794, "line": "            if _valid_command(grain[key]):\n"}, {"line_no": 25, "char_start": 794, "char_end": 908, "line": "                value = __salt__['cmd.run']('salt-call grains.get {0}'.format(grain[key])).split('\\n')[1].strip()\n"}, {"line_no": 26, "char_start": 908, "char_end": 944, "line": "                grains[key] = value\n"}, {"line_no": 30, "char_start": 1082, "char_end": 1126, "line": "            if _valid_command(pillar[key]):\n"}, {"line_no": 31, "char_start": 1126, "char_end": 1241, "line": "                value = __salt__['cmd.run']('salt-call pillar.get {0}'.format(pillar[key])).split('\\n')[1].strip()\n"}, {"line_no": 32, "char_start": 1241, "char_end": 1277, "line": "                grains[key] = value\n"}], "added": [{"line_no": 24, "char_start": 751, "char_end": 855, "line": "            value = __salt__['cmd.run'](['salt-call', 'grains.get', grain[key]]).split('\\n')[1].strip()\n"}, {"line_no": 25, "char_start": 855, "char_end": 887, "line": "            grains[key] = value\n"}, {"line_no": 29, "char_start": 1025, "char_end": 1130, "line": "            value = __salt__['cmd.run'](['salt-call', 'pillar.get', pillar[key]]).split('\\n')[1].strip()\n"}, {"line_no": 30, "char_start": 1130, "char_end": 1162, "line": "            grains[key] = value\n"}]}, "char_changes": {"deleted": [{"char_start": 763, "char_end": 810, "chars": "if _valid_command(grain[key]):\n                "}, {"char_start": 860, "char_end": 872, "chars": "{0}'.format("}, {"char_start": 882, "char_end": 883, "chars": ")"}, {"char_start": 908, "char_end": 912, "chars": "    "}, {"char_start": 1094, "char_end": 1142, "chars": "if _valid_command(pillar[key]):\n                "}, {"char_start": 1192, "char_end": 1204, "chars": "{0}'.format("}, {"char_start": 1215, "char_end": 1216, "chars": ")"}, {"char_start": 1241, "char_end": 1245, "chars": "    "}], "added": [{"char_start": 791, "char_end": 792, "chars": "["}, {"char_start": 802, "char_end": 804, "chars": "',"}, {"char_start": 805, "char_end": 806, "chars": "'"}, {"char_start": 817, "char_end": 819, "chars": ", "}, {"char_start": 829, "char_end": 830, "chars": "]"}, {"char_start": 1065, "char_end": 1066, "chars": "["}, {"char_start": 1076, "char_end": 1078, "chars": "',"}, {"char_start": 1079, "char_end": 1080, "chars": "'"}, {"char_start": 1091, "char_end": 1093, "chars": ", "}, {"char_start": 1104, "char_end": 1105, "chars": "]"}]}, "commit_link": "github.com/hubblestack/hubble/commit/d9ca4a93ea5aabb1298c5b3dbfb23e94203428b9", "file_name": "hubblestack/extmods/grains/custom_grains_pillar.py", "vul_type": "cwe-078"}
{"func_name": "copy", "func_src_before": "    def copy(self, src_data, src_path, dst_data, dst_path, job_id=None):\n        credentials = ''\n\n        if src_data is None: # Local\n            src = src_path\n        else:\n            credentials += self._formatCredentials(src_data, name='src')\n            src = 'src:{}'.format(src_path)\n\n        if dst_data is None: # Local\n            dst = dst_path\n        else:\n            credentials += self._formatCredentials(dst_data, name='dst')\n            dst = 'dst:{}'.format(dst_path)\n\n\n        command = (\n            '{credentials} '\n            'rclone copy {src} {dst} '\n            '--progress '\n            '--stats 2s '\n        ).format(\n            credentials=credentials,\n            src=src,\n            dst=dst,\n        )\n\n        logging.info(sanitize(command))\n\n        if job_id is None:\n            job_id = self._get_next_job_id()\n        else:\n            if self._job_id_exists(job_id):\n                raise ValueError('rclone copy job with ID {} already exists'.fromat(job_id))\n\n        self._stop_events[job_id] = threading.Event()\n\n        try:\n            self._execute_interactive(command, job_id)\n        except subprocess.CalledProcessError as e:\n            raise RcloneException(sanitize(str(e)))\n\n        return job_id", "func_src_after": "    def copy(self, src_data, src_path, dst_data, dst_path, job_id=None):\n        credentials = {}\n\n        if src_data is None: # Local\n            src = src_path\n        else:\n            credentials.update(self._formatCredentials(src_data, name='src'))\n            src = 'src:{}'.format(src_path)\n\n        if dst_data is None: # Local\n            dst = dst_path\n        else:\n            credentials.update(self._formatCredentials(dst_data, name='dst'))\n            dst = 'dst:{}'.format(dst_path)\n\n        command = [\n            'rclone',\n            'copy',\n            src,\n            dst,\n            '--progress',\n            '--stats', '2s',\n        ]\n\n        bash_command = \"{} {}\".format(\n            ' '.join(\"{}='{}'\".format(key, value) for key, value in credentials.items()),\n            ' '.join(command),\n        )\n\n        logging.info(sanitize(bash_command))\n\n        if job_id is None:\n            job_id = self._get_next_job_id()\n        else:\n            if self._job_id_exists(job_id):\n                raise ValueError('rclone copy job with ID {} already exists'.fromat(job_id))\n\n        self._stop_events[job_id] = threading.Event()\n\n        try:\n            self._execute_interactive(command, credentials, job_id)\n        except subprocess.CalledProcessError as e:\n            raise RcloneException(sanitize(str(e)))\n\n        return job_id", "line_changes": {"deleted": [{"line_no": 2, "char_start": 73, "char_end": 98, "line": "        credentials = ''\n"}, {"line_no": 7, "char_start": 177, "char_end": 250, "line": "            credentials += self._formatCredentials(src_data, name='src')\n"}, {"line_no": 13, "char_start": 373, "char_end": 446, "line": "            credentials += self._formatCredentials(dst_data, name='dst')\n"}, {"line_no": 17, "char_start": 492, "char_end": 512, "line": "        command = (\n"}, {"line_no": 18, "char_start": 512, "char_end": 541, "line": "            '{credentials} '\n"}, {"line_no": 19, "char_start": 541, "char_end": 580, "line": "            'rclone copy {src} {dst} '\n"}, {"line_no": 20, "char_start": 580, "char_end": 606, "line": "            '--progress '\n"}, {"line_no": 21, "char_start": 606, "char_end": 632, "line": "            '--stats 2s '\n"}, {"line_no": 22, "char_start": 632, "char_end": 650, "line": "        ).format(\n"}, {"line_no": 23, "char_start": 650, "char_end": 687, "line": "            credentials=credentials,\n"}, {"line_no": 24, "char_start": 687, "char_end": 708, "line": "            src=src,\n"}, {"line_no": 25, "char_start": 708, "char_end": 729, "line": "            dst=dst,\n"}, {"line_no": 28, "char_start": 740, "char_end": 780, "line": "        logging.info(sanitize(command))\n"}, {"line_no": 39, "char_start": 1073, "char_end": 1128, "line": "            self._execute_interactive(command, job_id)\n"}], "added": [{"line_no": 2, "char_start": 73, "char_end": 98, "line": "        credentials = {}\n"}, {"line_no": 7, "char_start": 177, "char_end": 255, "line": "            credentials.update(self._formatCredentials(src_data, name='src'))\n"}, {"line_no": 13, "char_start": 378, "char_end": 456, "line": "            credentials.update(self._formatCredentials(dst_data, name='dst'))\n"}, {"line_no": 16, "char_start": 501, "char_end": 521, "line": "        command = [\n"}, {"line_no": 17, "char_start": 521, "char_end": 543, "line": "            'rclone',\n"}, {"line_no": 18, "char_start": 543, "char_end": 563, "line": "            'copy',\n"}, {"line_no": 19, "char_start": 563, "char_end": 580, "line": "            src,\n"}, {"line_no": 20, "char_start": 580, "char_end": 597, "line": "            dst,\n"}, {"line_no": 21, "char_start": 597, "char_end": 623, "line": "            '--progress',\n"}, {"line_no": 22, "char_start": 623, "char_end": 652, "line": "            '--stats', '2s',\n"}, {"line_no": 23, "char_start": 652, "char_end": 662, "line": "        ]\n"}, {"line_no": 25, "char_start": 663, "char_end": 702, "line": "        bash_command = \"{} {}\".format(\n"}, {"line_no": 26, "char_start": 702, "char_end": 792, "line": "            ' '.join(\"{}='{}'\".format(key, value) for key, value in credentials.items()),\n"}, {"line_no": 27, "char_start": 792, "char_end": 823, "line": "            ' '.join(command),\n"}, {"line_no": 30, "char_start": 834, "char_end": 879, "line": "        logging.info(sanitize(bash_command))\n"}, {"line_no": 41, "char_start": 1172, "char_end": 1240, "line": "            self._execute_interactive(command, credentials, job_id)\n"}]}, "char_changes": {"deleted": [{"char_start": 95, "char_end": 97, "chars": "''"}, {"char_start": 200, "char_end": 204, "chars": " += "}, {"char_start": 396, "char_end": 400, "chars": " += "}, {"char_start": 491, "char_end": 492, "chars": "\n"}, {"char_start": 510, "char_end": 511, "chars": "("}, {"char_start": 525, "char_end": 526, "chars": "{"}, {"char_start": 527, "char_end": 528, "chars": "r"}, {"char_start": 529, "char_end": 539, "chars": "dentials} "}, {"char_start": 554, "char_end": 561, "chars": "rclone "}, {"char_start": 566, "char_end": 567, "chars": "{"}, {"char_start": 570, "char_end": 571, "chars": "}"}, {"char_start": 572, "char_end": 573, "chars": "{"}, {"char_start": 576, "char_end": 579, "chars": "} '"}, {"char_start": 603, "char_end": 604, "chars": " "}, {"char_start": 630, "char_end": 631, "chars": "'"}, {"char_start": 640, "char_end": 641, "chars": ")"}, {"char_start": 662, "char_end": 663, "chars": "c"}, {"char_start": 665, "char_end": 666, "chars": "d"}, {"char_start": 667, "char_end": 670, "chars": "nti"}, {"char_start": 672, "char_end": 674, "chars": "s="}, {"char_start": 699, "char_end": 701, "chars": "sr"}, {"char_start": 702, "char_end": 720, "chars": "=src,\n            "}, {"char_start": 721, "char_end": 727, "chars": "st=dst"}], "added": [{"char_start": 95, "char_end": 97, "chars": "{}"}, {"char_start": 200, "char_end": 208, "chars": ".update("}, {"char_start": 252, "char_end": 253, "chars": ")"}, {"char_start": 401, "char_end": 409, "chars": ".update("}, {"char_start": 454, "char_end": 455, "chars": ")"}, {"char_start": 519, "char_end": 520, "chars": "["}, {"char_start": 535, "char_end": 536, "chars": "c"}, {"char_start": 537, "char_end": 540, "chars": "one"}, {"char_start": 541, "char_end": 542, "chars": ","}, {"char_start": 560, "char_end": 563, "chars": "',\n"}, {"char_start": 564, "char_end": 575, "chars": "           "}, {"char_start": 578, "char_end": 586, "chars": ",\n      "}, {"char_start": 587, "char_end": 592, "chars": "     "}, {"char_start": 595, "char_end": 596, "chars": ","}, {"char_start": 621, "char_end": 622, "chars": ","}, {"char_start": 643, "char_end": 645, "chars": "',"}, {"char_start": 646, "char_end": 647, "chars": "'"}, {"char_start": 650, "char_end": 651, "chars": ","}, {"char_start": 660, "char_end": 693, "chars": "]\n\n        bash_command = \"{} {}\""}, {"char_start": 714, "char_end": 735, "chars": "' '.join(\"{}='{}'\".fo"}, {"char_start": 736, "char_end": 741, "chars": "mat(k"}, {"char_start": 742, "char_end": 749, "chars": "y, valu"}, {"char_start": 750, "char_end": 762, "chars": ") for key, v"}, {"char_start": 764, "char_end": 770, "chars": "ue in "}, {"char_start": 781, "char_end": 786, "chars": ".item"}, {"char_start": 787, "char_end": 790, "chars": "())"}, {"char_start": 804, "char_end": 819, "chars": "' '.join(comman"}, {"char_start": 820, "char_end": 821, "chars": ")"}, {"char_start": 864, "char_end": 869, "chars": "bash_"}, {"char_start": 1217, "char_end": 1230, "chars": ", credentials"}]}, "commit_link": "github.com/FredHutch/motuz/commit/045468cb9bff47bb3bb72268b6d5a3fe44e383db", "file_name": "src/backend/api/utils/rclone_connection.py", "vul_type": "cwe-078"}
{"func_name": "IsBlacklistedArg", "func_src_before": "bool IsBlacklistedArg(const base::CommandLine::CharType* arg) {\n#if defined(OS_WIN)\n  const auto converted = base::WideToUTF8(arg);\n  const char* a = converted.c_str();\n#else\n  const char* a = arg;\n#endif\n\n  static const char* prefixes[] = {\"--\", \"-\", \"/\"};\n\n  int prefix_length = 0;\n  for (auto& prefix : prefixes) {\n    if (base::StartsWith(a, prefix, base::CompareCase::SENSITIVE)) {\n      prefix_length = strlen(prefix);\n      break;\n    }\n  }\n\n  if (prefix_length > 0) {\n    a += prefix_length;\n    std::string switch_name(a, strcspn(a, \"=\"));\n    auto* iter = std::lower_bound(std::begin(kBlacklist), std::end(kBlacklist),\n                                  switch_name);\n    if (iter != std::end(kBlacklist) && switch_name == *iter) {\n      return true;\n    }\n  }\n\n  return false;\n}", "func_src_after": "bool IsBlacklistedArg(const base::CommandLine::CharType* arg) {\n#if defined(OS_WIN)\n  const auto converted = base::WideToUTF8(arg);\n  const char* a = converted.c_str();\n#else\n  const char* a = arg;\n#endif\n\n  static const char* prefixes[] = {\"--\", \"-\", \"/\"};\n\n  int prefix_length = 0;\n  for (auto& prefix : prefixes) {\n    if (base::StartsWith(a, prefix, base::CompareCase::SENSITIVE)) {\n      prefix_length = strlen(prefix);\n      break;\n    }\n  }\n\n  if (prefix_length > 0) {\n    a += prefix_length;\n    std::string switch_name =\n        base::ToLowerASCII(base::StringPiece(a, strcspn(a, \"=\")));\n    auto* iter = std::lower_bound(std::begin(kBlacklist), std::end(kBlacklist),\n                                  switch_name);\n    if (iter != std::end(kBlacklist) && switch_name == *iter) {\n      return true;\n    }\n  }\n\n  return false;\n}", "line_changes": {"deleted": [{"line_no": 21, "char_start": 500, "char_end": 549, "line": "    std::string switch_name(a, strcspn(a, \"=\"));\n"}], "added": [{"line_no": 21, "char_start": 500, "char_end": 530, "line": "    std::string switch_name =\n"}, {"line_no": 22, "char_start": 530, "char_end": 597, "line": "        base::ToLowerASCII(base::StringPiece(a, strcspn(a, \"=\")));\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 527, "char_end": 574, "chars": " =\n        base::ToLowerASCII(base::StringPiece"}, {"char_start": 592, "char_end": 593, "chars": ")"}]}, "commit_link": "github.com/electron/electron/commit/ce361a12e355f9e1e99c989f1ea056c9e502dbe7", "file_name": "atom/app/command_line_args.cc", "vul_type": "cwe-078"}
{"func_name": "_remove_volume_from_volume_set", "func_src_before": "    def _remove_volume_from_volume_set(self, volume_name, vvs_name):\n        self._cli_run('removevvset -f %s %s' % (vvs_name, volume_name), None)", "func_src_after": "    def _remove_volume_from_volume_set(self, volume_name, vvs_name):\n        self._cli_run(['removevvset', '-f', vvs_name, volume_name])", "line_changes": {"deleted": [{"line_no": 2, "char_start": 69, "char_end": 146, "line": "        self._cli_run('removevvset -f %s %s' % (vvs_name, volume_name), None)\n"}], "added": [{"line_no": 2, "char_start": 69, "char_end": 136, "line": "        self._cli_run(['removevvset', '-f', vvs_name, volume_name])\n"}]}, "char_changes": {"deleted": [{"char_start": 106, "char_end": 112, "chars": " %s %s"}, {"char_start": 113, "char_end": 115, "chars": " %"}, {"char_start": 116, "char_end": 117, "chars": "("}, {"char_start": 138, "char_end": 145, "chars": "), None"}], "added": [{"char_start": 91, "char_end": 92, "chars": "["}, {"char_start": 104, "char_end": 106, "chars": "',"}, {"char_start": 107, "char_end": 108, "chars": "'"}, {"char_start": 111, "char_end": 112, "chars": ","}, {"char_start": 134, "char_end": 135, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_common.py", "vul_type": "cwe-078"}
{"func_name": "handle_message", "func_src_before": "    def handle_message(self, ch, method, properties, body):\n        \"\"\"\n        this is a pika.basic_consumer callback\n        handles client inputs, runs appropriate workflows and views\n\n        Args:\n            ch: amqp channel\n            method: amqp method\n            properties:\n            body: message body\n        \"\"\"\n        input = {}\n        try:\n            self.sessid = method.routing_key\n\n            input = json_decode(body)\n            data = input['data']\n\n            # since this comes as \"path\" we dont know if it's view or workflow yet\n            #TODO: just a workaround till we modify ui to\n            if 'path' in data:\n                if data['path'] in settings.VIEW_URLS:\n                    data['view'] = data['path']\n                else:\n                    data['wf'] = data['path']\n            session = Session(self.sessid)\n\n            headers = {'remote_ip': input['_zops_remote_ip']}\n\n            if 'wf' in data:\n                output = self._handle_workflow(session, data, headers)\n            elif 'job' in data:\n\n                self._handle_job(session, data, headers)\n                return\n            else:\n                output = self._handle_view(session, data, headers)\n\n        except HTTPError as e:\n            import sys\n            if hasattr(sys, '_called_from_test'):\n                raise\n            output = {'cmd': 'error', 'error': self._prepare_error_msg(e.message), \"code\": e.code}\n            log.exception(\"Http error occurred\")\n        except:\n            self.current = Current(session=session, input=data)\n            self.current.headers = headers\n            import sys\n            if hasattr(sys, '_called_from_test'):\n                raise\n            err = traceback.format_exc()\n            output = {'error': self._prepare_error_msg(err), \"code\": 500}\n            log.exception(\"Worker error occurred with messsage body:\\n%s\" % body)\n        if 'callbackID' in input:\n            output['callbackID'] = input['callbackID']\n        log.info(\"OUTPUT for %s: %s\" % (self.sessid, output))\n        output['reply_timestamp'] = time()\n        self.send_output(output)", "func_src_after": "    def handle_message(self, ch, method, properties, body):\n        \"\"\"\n        this is a pika.basic_consumer callback\n        handles client inputs, runs appropriate workflows and views\n\n        Args:\n            ch: amqp channel\n            method: amqp method\n            properties:\n            body: message body\n        \"\"\"\n        input = {}\n        headers = {}\n        try:\n            self.sessid = method.routing_key\n\n            input = json_decode(body)\n            data = input['data']\n\n            # since this comes as \"path\" we dont know if it's view or workflow yet\n            # TODO: just a workaround till we modify ui to\n            if 'path' in data:\n                if data['path'] in settings.VIEW_URLS:\n                    data['view'] = data['path']\n                else:\n                    data['wf'] = data['path']\n            session = Session(self.sessid)\n\n            headers = {'remote_ip': input['_zops_remote_ip'],\n                       'source': input['_zops_source']}\n\n            if 'wf' in data:\n                output = self._handle_workflow(session, data, headers)\n            elif 'job' in data:\n\n                self._handle_job(session, data, headers)\n                return\n            else:\n                output = self._handle_view(session, data, headers)\n\n        except HTTPError as e:\n            import sys\n            if hasattr(sys, '_called_from_test'):\n                raise\n            output = {'cmd': 'error', 'error': self._prepare_error_msg(e.message), \"code\": e.code}\n            log.exception(\"Http error occurred\")\n        except:\n            self.current = Current(session=session, input=data)\n            self.current.headers = headers\n            import sys\n            if hasattr(sys, '_called_from_test'):\n                raise\n            err = traceback.format_exc()\n            output = {'error': self._prepare_error_msg(err), \"code\": 500}\n            log.exception(\"Worker error occurred with messsage body:\\n%s\" % body)\n        if 'callbackID' in input:\n            output['callbackID'] = input['callbackID']\n        log.info(\"OUTPUT for %s: %s\" % (self.sessid, output))\n        output['reply_timestamp'] = time()\n        self.send_output(output)", "line_changes": {"deleted": [{"line_no": 28, "char_start": 867, "char_end": 929, "line": "            headers = {'remote_ip': input['_zops_remote_ip']}\n"}], "added": [{"line_no": 13, "char_start": 349, "char_end": 370, "line": "        headers = {}\n"}, {"line_no": 29, "char_start": 889, "char_end": 951, "line": "            headers = {'remote_ip': input['_zops_remote_ip'],\n"}, {"line_no": 30, "char_start": 951, "char_end": 1007, "line": "                       'source': input['_zops_source']}\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 357, "char_end": 378, "chars": "headers = {}\n        "}, {"char_start": 597, "char_end": 598, "chars": " "}, {"char_start": 947, "char_end": 1003, "chars": "'],\n                       'source': input['_zops_source"}]}, "commit_link": "github.com/zetaops/zengine/commit/52eafbee90f8ddf78be0c7452828d49423246851", "file_name": "zengine/wf_daemon.py", "vul_type": "cwe-078"}
{"func_name": "_add_chapsecret_to_host", "func_src_before": "    def _add_chapsecret_to_host(self, host_name):\n        \"\"\"Generate and store a randomly-generated CHAP secret for the host.\"\"\"\n\n        chap_secret = utils.generate_password()\n        ssh_cmd = ('svctask chhost -chapsecret \"%(chap_secret)s\" %(host_name)s'\n                   % {'chap_secret': chap_secret, 'host_name': host_name})\n        out, err = self._run_ssh(ssh_cmd)\n        # No output should be returned from chhost\n        self._assert_ssh_return(len(out.strip()) == 0,\n                                '_add_chapsecret_to_host', ssh_cmd, out, err)\n        return chap_secret", "func_src_after": "    def _add_chapsecret_to_host(self, host_name):\n        \"\"\"Generate and store a randomly-generated CHAP secret for the host.\"\"\"\n\n        chap_secret = utils.generate_password()\n        ssh_cmd = ['svctask', 'chhost', '-chapsecret', chap_secret, host_name]\n        out, err = self._run_ssh(ssh_cmd)\n        # No output should be returned from chhost\n        self._assert_ssh_return(len(out.strip()) == 0,\n                                '_add_chapsecret_to_host', ssh_cmd, out, err)\n        return chap_secret", "line_changes": {"deleted": [{"line_no": 5, "char_start": 179, "char_end": 259, "line": "        ssh_cmd = ('svctask chhost -chapsecret \"%(chap_secret)s\" %(host_name)s'\n"}, {"line_no": 6, "char_start": 259, "char_end": 334, "line": "                   % {'chap_secret': chap_secret, 'host_name': host_name})\n"}], "added": [{"line_no": 5, "char_start": 179, "char_end": 258, "line": "        ssh_cmd = ['svctask', 'chhost', '-chapsecret', chap_secret, host_name]\n"}]}, "char_changes": {"deleted": [{"char_start": 197, "char_end": 198, "chars": "("}, {"char_start": 206, "char_end": 225, "chars": " chhost -chapsecret"}, {"char_start": 226, "char_end": 229, "chars": "\"%("}, {"char_start": 231, "char_end": 246, "chars": "ap_secret)s\" %("}, {"char_start": 250, "char_end": 257, "chars": "_name)s"}, {"char_start": 258, "char_end": 279, "chars": "\n                   %"}, {"char_start": 280, "char_end": 281, "chars": "{"}, {"char_start": 286, "char_end": 287, "chars": "_"}, {"char_start": 294, "char_end": 295, "chars": ":"}, {"char_start": 309, "char_end": 310, "chars": "'"}, {"char_start": 319, "char_end": 333, "chars": "': host_name})"}], "added": [{"char_start": 197, "char_end": 198, "chars": "["}, {"char_start": 206, "char_end": 208, "chars": "',"}, {"char_start": 209, "char_end": 210, "chars": "'"}, {"char_start": 217, "char_end": 218, "chars": ","}, {"char_start": 220, "char_end": 221, "chars": "-"}, {"char_start": 232, "char_end": 233, "chars": ","}, {"char_start": 256, "char_end": 257, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "_call_prepare_fc_map", "func_src_before": "    def _call_prepare_fc_map(self, fc_map_id, source, target):\n        try:\n            out, err = self._run_ssh('svctask prestartfcmap %s' % fc_map_id)\n        except exception.ProcessExecutionError as e:\n            with excutils.save_and_reraise_exception():\n                LOG.error(_('_prepare_fc_map: Failed to prepare FlashCopy '\n                            'from %(source)s to %(target)s.\\n'\n                            'stdout: %(out)s\\n stderr: %(err)s')\n                          % {'source': source,\n                             'target': target,\n                             'out': e.stdout,\n                             'err': e.stderr})", "func_src_after": "    def _call_prepare_fc_map(self, fc_map_id, source, target):\n        try:\n            out, err = self._run_ssh(['svctask', 'prestartfcmap', fc_map_id])\n        except exception.ProcessExecutionError as e:\n            with excutils.save_and_reraise_exception():\n                LOG.error(_('_prepare_fc_map: Failed to prepare FlashCopy '\n                            'from %(source)s to %(target)s.\\n'\n                            'stdout: %(out)s\\n stderr: %(err)s')\n                          % {'source': source,\n                             'target': target,\n                             'out': e.stdout,\n                             'err': e.stderr})", "line_changes": {"deleted": [{"line_no": 3, "char_start": 76, "char_end": 153, "line": "            out, err = self._run_ssh('svctask prestartfcmap %s' % fc_map_id)\n"}], "added": [{"line_no": 3, "char_start": 76, "char_end": 154, "line": "            out, err = self._run_ssh(['svctask', 'prestartfcmap', fc_map_id])\n"}]}, "char_changes": {"deleted": [{"char_start": 135, "char_end": 138, "chars": " %s"}, {"char_start": 139, "char_end": 141, "chars": " %"}], "added": [{"char_start": 113, "char_end": 114, "chars": "["}, {"char_start": 122, "char_end": 124, "chars": "',"}, {"char_start": 125, "char_end": 126, "chars": "'"}, {"char_start": 140, "char_end": 141, "chars": ","}, {"char_start": 151, "char_end": 152, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "bin_symbols", "func_src_before": "static int bin_symbols(RCore *r, int mode, ut64 laddr, int va, ut64 at, const char *name, bool exponly, const char *args) {\n\tRBinInfo *info = r_bin_get_info (r->bin);\n\tRList *entries = r_bin_get_entries (r->bin);\n\tRBinSymbol *symbol;\n\tRBinAddr *entry;\n\tRListIter *iter;\n\tbool firstexp = true;\n\tbool printHere = false;\n\tint i = 0, lastfs = 's';\n\tbool bin_demangle = r_config_get_i (r->config, \"bin.demangle\");\n\tif (!info) {\n\t\treturn 0;\n\t}\n\n\tif (args && *args == '.') {\n\t\tprintHere = true;\n\t}\n\n\tbool is_arm = info && info->arch && !strncmp (info->arch, \"arm\", 3);\n\tconst char *lang = bin_demangle ? r_config_get (r->config, \"bin.lang\") : NULL;\n\n\tRList *symbols = r_bin_get_symbols (r->bin);\n\tr_spaces_push (&r->anal->meta_spaces, \"bin\");\n\n\tif (IS_MODE_JSON (mode) && !printHere) {\n\t\tr_cons_printf (\"[\");\n\t} else if (IS_MODE_SET (mode)) {\n\t\tr_flag_space_set (r->flags, R_FLAGS_FS_SYMBOLS);\n\t} else if (!at && exponly) {\n\t\tif (IS_MODE_RAD (mode)) {\n\t\t\tr_cons_printf (\"fs exports\\n\");\n\t\t} else if (IS_MODE_NORMAL (mode)) {\n\t\t\tr_cons_printf (printHere ? \"\" : \"[Exports]\\n\");\n\t\t}\n\t} else if (!at && !exponly) {\n\t\tif (IS_MODE_RAD (mode)) {\n\t\t\tr_cons_printf (\"fs symbols\\n\");\n\t\t} else if (IS_MODE_NORMAL (mode)) {\n\t\t\tr_cons_printf (printHere ? \"\" : \"[Symbols]\\n\");\n\t\t}\n\t}\n\tif (IS_MODE_NORMAL (mode)) {\n\t\tr_cons_printf (\"Num Paddr      Vaddr      Bind     Type Size Name\\n\");\n\t}\n\n\n\tsize_t count = 0;\n\tr_list_foreach (symbols, iter, symbol) {\n\t\tif (!symbol->name) {\n\t\t\tcontinue;\n\t\t}\n\t\tchar *r_symbol_name = r_str_escape_utf8 (symbol->name, false, true);\n\t\tut64 addr = compute_addr (r->bin, symbol->paddr, symbol->vaddr, va);\n\t\tint len = symbol->size ? symbol->size : 32;\n\t\tSymName sn = {0};\n\n\t\tif (exponly && !isAnExport (symbol)) {\n\t\t\tfree (r_symbol_name);\n\t\t\tcontinue;\n\t\t}\n\t\tif (name && strcmp (r_symbol_name, name)) {\n\t\t\tfree (r_symbol_name);\n\t\t\tcontinue;\n\t\t}\n\t\tif (at && (!symbol->size || !is_in_range (at, addr, symbol->size))) {\n\t\t\tfree (r_symbol_name);\n\t\t\tcontinue;\n\t\t}\n\t\tif ((printHere && !is_in_range (r->offset, symbol->paddr, len))\n\t\t\t\t&& (printHere && !is_in_range (r->offset, addr, len))) {\n\t\t\tfree (r_symbol_name);\n\t\t\tcontinue;\n\t\t}\n\t\tcount ++;\n\t\tsnInit (r, &sn, symbol, lang);\n\n\t\tif (IS_MODE_SET (mode) && (is_section_symbol (symbol) || is_file_symbol (symbol))) {\n\t\t\t/*\n\t\t\t * Skip section symbols because they will have their own flag.\n\t\t\t * Skip also file symbols because not useful for now.\n\t\t\t */\n\t\t} else if (IS_MODE_SET (mode) && is_special_symbol (symbol)) {\n\t\t\tif (is_arm) {\n\t\t\t\thandle_arm_special_symbol (r, symbol, va);\n\t\t\t}\n\t\t} else if (IS_MODE_SET (mode)) {\n\t\t\t// TODO: provide separate API in RBinPlugin to let plugins handle anal hints/metadata\n\t\t\tif (is_arm) {\n\t\t\t\thandle_arm_symbol (r, symbol, info, va);\n\t\t\t}\n\t\t\tselect_flag_space (r, symbol);\n\t\t\t/* If that's a Classed symbol (method or so) */\n\t\t\tif (sn.classname) {\n\t\t\t\tRFlagItem *fi = r_flag_get (r->flags, sn.methflag);\n\t\t\t\tif (r->bin->prefix) {\n\t\t\t\t\tchar *prname = r_str_newf (\"%s.%s\", r->bin->prefix, sn.methflag);\n\t\t\t\t\tr_name_filter (sn.methflag, -1);\n\t\t\t\t\tfree (sn.methflag);\n\t\t\t\t\tsn.methflag = prname;\n\t\t\t\t}\n\t\t\t\tif (fi) {\n\t\t\t\t\tr_flag_item_set_realname (fi, sn.methname);\n\t\t\t\t\tif ((fi->offset - r->flags->base) == addr) {\n\t\t\t\t//\t\tchar *comment = fi->comment ? strdup (fi->comment) : NULL;\n\t\t\t\t\t\tr_flag_unset (r->flags, fi);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfi = r_flag_set (r->flags, sn.methflag, addr, symbol->size);\n\t\t\t\t\tchar *comment = fi->comment ? strdup (fi->comment) : NULL;\n\t\t\t\t\tif (comment) {\n\t\t\t\t\t\tr_flag_item_set_comment (fi, comment);\n\t\t\t\t\t\tR_FREE (comment);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst char *n = sn.demname ? sn.demname : sn.name;\n\t\t\t\tconst char *fn = sn.demflag ? sn.demflag : sn.nameflag;\n\t\t\t\tchar *fnp = (r->bin->prefix) ?\n\t\t\t\t\tr_str_newf (\"%s.%s\", r->bin->prefix, fn):\n\t\t\t\t\tstrdup (fn);\n\t\t\t\tRFlagItem *fi = r_flag_set (r->flags, fnp, addr, symbol->size);\n\t\t\t\tif (fi) {\n\t\t\t\t\tr_flag_item_set_realname (fi, n);\n\t\t\t\t\tfi->demangled = (bool)(size_t)sn.demname;\n\t\t\t\t} else {\n\t\t\t\t\tif (fn) {\n\t\t\t\t\t\teprintf (\"[Warning] Can't find flag (%s)\\n\", fn);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfree (fnp);\n\t\t\t}\n\t\t\tif (sn.demname) {\n\t\t\t\tr_meta_add (r->anal, R_META_TYPE_COMMENT,\n\t\t\t\t\taddr, symbol->size, sn.demname);\n\t\t\t}\n\t\t\tr_flag_space_pop (r->flags);\n\t\t} else if (IS_MODE_JSON (mode)) {\n\t\t\tchar *str = r_str_escape_utf8_for_json (r_symbol_name, -1);\n\t\t\t// str = r_str_replace (str, \"\\\"\", \"\\\\\\\"\", 1);\n\t\t\tr_cons_printf (\"%s{\\\"name\\\":\\\"%s\\\",\"\n\t\t\t\t\"\\\"demname\\\":\\\"%s\\\",\"\n\t\t\t\t\"\\\"flagname\\\":\\\"%s\\\",\"\n\t\t\t\t\"\\\"ordinal\\\":%d,\"\n\t\t\t\t\"\\\"bind\\\":\\\"%s\\\",\"\n\t\t\t\t\"\\\"size\\\":%d,\"\n\t\t\t\t\"\\\"type\\\":\\\"%s\\\",\"\n\t\t\t\t\"\\\"vaddr\\\":%\"PFMT64d\",\"\n\t\t\t\t\"\\\"paddr\\\":%\"PFMT64d\"}\",\n\t\t\t\t((exponly && firstexp) || printHere) ? \"\" : (iter->p ? \",\" : \"\"),\n\t\t\t\tstr,\n\t\t\t\tsn.demname? sn.demname: \"\",\n\t\t\t\tsn.nameflag,\n\t\t\t\tsymbol->ordinal,\n\t\t\t\tsymbol->bind,\n\t\t\t\t(int)symbol->size,\n\t\t\t\tsymbol->type,\n\t\t\t\t(ut64)addr, (ut64)symbol->paddr);\n\t\t\tfree (str);\n\t\t} else if (IS_MODE_SIMPLE (mode)) {\n\t\t\tconst char *name = sn.demname? sn.demname: r_symbol_name;\n\t\t\tr_cons_printf (\"0x%08\"PFMT64x\" %d %s\\n\",\n\t\t\t\taddr, (int)symbol->size, name);\n\t\t} else if (IS_MODE_SIMPLEST (mode)) {\n\t\t\tconst char *name = sn.demname? sn.demname: r_symbol_name;\n\t\t\tr_cons_printf (\"%s\\n\", name);\n\t\t} else if (IS_MODE_RAD (mode)) {\n\t\t\t/* Skip special symbols because we do not flag them and\n\t\t\t * they shouldn't be printed in the rad format either */\n\t\t\tif (is_special_symbol (symbol)) {\n\t\t\t\tgoto next;\n\t\t\t}\n\t\t\tRBinFile *binfile;\n\t\t\tRBinPlugin *plugin;\n\t\t\tconst char *name = sn.demname? sn.demname: r_symbol_name;\n\t\t\tif (!name) {\n\t\t\t\tgoto next;\n\t\t\t}\n\t\t\tif (!strncmp (name, \"imp.\", 4)) {\n\t\t\t\tif (lastfs != 'i') {\n\t\t\t\t\tr_cons_printf (\"fs imports\\n\");\n\t\t\t\t}\n\t\t\t\tlastfs = 'i';\n\t\t\t} else {\n\t\t\t\tif (lastfs != 's') {\n\t\t\t\t\tconst char *fs = exponly? \"exports\": \"symbols\";\n\t\t\t\t\tr_cons_printf (\"fs %s\\n\", fs);\n\t\t\t\t}\n\t\t\t\tlastfs = 's';\n\t\t\t}\n\t\t\tif (r->bin->prefix || *name) { // we don't want unnamed symbol flags\n\t\t\t\tchar *flagname = construct_symbol_flagname (\"sym\", name, MAXFLAG_LEN_DEFAULT);\n\t\t\t\tif (!flagname) {\n\t\t\t\t\tgoto next;\n\t\t\t\t}\n\t\t\t\tr_cons_printf (\"\\\"f %s%s%s %u 0x%08\" PFMT64x \"\\\"\\n\",\n\t\t\t\t\tr->bin->prefix ? r->bin->prefix : \"\", r->bin->prefix ? \".\" : \"\",\n\t\t\t\t\tflagname, symbol->size, addr);\n\t\t\t\tfree (flagname);\n\t\t\t}\n\t\t\tbinfile = r_bin_cur (r->bin);\n\t\t\tplugin = r_bin_file_cur_plugin (binfile);\n\t\t\tif (plugin && plugin->name) {\n\t\t\t\tif (r_str_startswith (plugin->name, \"pe\")) {\n\t\t\t\t\tchar *module = strdup (r_symbol_name);\n\t\t\t\t\tchar *p = strstr (module, \".dll_\");\n\t\t\t\t\tif (p && strstr (module, \"imp.\")) {\n\t\t\t\t\t\tchar *symname = __filterShell (p + 5);\n\t\t\t\t\t\tchar *m = __filterShell (module);\n\t\t\t\t\t\t*p = 0;\n\t\t\t\t\t\tif (r->bin->prefix) {\n\t\t\t\t\t\t\tr_cons_printf (\"k bin/pe/%s/%d=%s.%s\\n\",\n\t\t\t\t\t\t\t\tmodule, symbol->ordinal, r->bin->prefix, symname);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tr_cons_printf (\"k bin/pe/%s/%d=%s\\n\",\n\t\t\t\t\t\t\t\tmodule, symbol->ordinal, symname);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfree (symname);\n\t\t\t\t\t\tfree (m);\n\t\t\t\t\t}\n\t\t\t\t\tfree (module);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst char *bind = symbol->bind? symbol->bind: \"NONE\";\n\t\t\tconst char *type = symbol->type? symbol->type: \"NONE\";\n\t\t\tconst char *name = r_str_get (sn.demname? sn.demname: r_symbol_name);\n\t\t\t// const char *fwd = r_str_get (symbol->forwarder);\n\t\t\tr_cons_printf (\"%03u\", symbol->ordinal);\n\t\t\tif (symbol->paddr == UT64_MAX) {\n\t\t\t\tr_cons_printf (\" ----------\");\n\t\t\t} else {\n\t\t\t\tr_cons_printf (\" 0x%08\"PFMT64x, symbol->paddr);\n\t\t\t}\n\t\t\tr_cons_printf (\" 0x%08\"PFMT64x\" %6s %6s %4d%s%s\\n\",\n\t\t\t               addr, bind, type, symbol->size, *name? \" \": \"\", name);\n\t\t}\nnext:\n\t\tsnFini (&sn);\n\t\ti++;\n\t\tfree (r_symbol_name);\n\t\tif (exponly && firstexp) {\n\t\t\tfirstexp = false;\n\t\t}\n\t\tif (printHere) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (count == 0 && IS_MODE_JSON (mode)) {\n\t\tr_cons_printf (\"{}\");\n\t}\n\n\n\t//handle thumb and arm for entry point since they are not present in symbols\n\tif (is_arm) {\n\t\tr_list_foreach (entries, iter, entry) {\n\t\t\tif (IS_MODE_SET (mode)) {\n\t\t\t\thandle_arm_entry (r, entry, info, va);\n\t\t\t}\n\t\t}\n\t}\n\tif (IS_MODE_JSON (mode) && !printHere) {\n\t\tr_cons_printf (\"]\");\n\t}\n\n\tr_spaces_pop (&r->anal->meta_spaces);\n\treturn true;\n}", "func_src_after": "static int bin_symbols(RCore *r, int mode, ut64 laddr, int va, ut64 at, const char *name, bool exponly, const char *args) {\n\tRBinInfo *info = r_bin_get_info (r->bin);\n\tRList *entries = r_bin_get_entries (r->bin);\n\tRBinSymbol *symbol;\n\tRBinAddr *entry;\n\tRListIter *iter;\n\tbool firstexp = true;\n\tbool printHere = false;\n\tint i = 0, lastfs = 's';\n\tbool bin_demangle = r_config_get_i (r->config, \"bin.demangle\");\n\tif (!info) {\n\t\treturn 0;\n\t}\n\n\tif (args && *args == '.') {\n\t\tprintHere = true;\n\t}\n\n\tbool is_arm = info && info->arch && !strncmp (info->arch, \"arm\", 3);\n\tconst char *lang = bin_demangle ? r_config_get (r->config, \"bin.lang\") : NULL;\n\n\tRList *symbols = r_bin_get_symbols (r->bin);\n\tr_spaces_push (&r->anal->meta_spaces, \"bin\");\n\n\tif (IS_MODE_JSON (mode) && !printHere) {\n\t\tr_cons_printf (\"[\");\n\t} else if (IS_MODE_SET (mode)) {\n\t\tr_flag_space_set (r->flags, R_FLAGS_FS_SYMBOLS);\n\t} else if (!at && exponly) {\n\t\tif (IS_MODE_RAD (mode)) {\n\t\t\tr_cons_printf (\"fs exports\\n\");\n\t\t} else if (IS_MODE_NORMAL (mode)) {\n\t\t\tr_cons_printf (printHere ? \"\" : \"[Exports]\\n\");\n\t\t}\n\t} else if (!at && !exponly) {\n\t\tif (IS_MODE_RAD (mode)) {\n\t\t\tr_cons_printf (\"fs symbols\\n\");\n\t\t} else if (IS_MODE_NORMAL (mode)) {\n\t\t\tr_cons_printf (printHere ? \"\" : \"[Symbols]\\n\");\n\t\t}\n\t}\n\tif (IS_MODE_NORMAL (mode)) {\n\t\tr_cons_printf (\"Num Paddr      Vaddr      Bind     Type Size Name\\n\");\n\t}\n\n\n\tsize_t count = 0;\n\tr_list_foreach (symbols, iter, symbol) {\n\t\tif (!symbol->name) {\n\t\t\tcontinue;\n\t\t}\n\t\tchar *r_symbol_name = r_str_escape_utf8 (symbol->name, false, true);\n\t\tut64 addr = compute_addr (r->bin, symbol->paddr, symbol->vaddr, va);\n\t\tint len = symbol->size ? symbol->size : 32;\n\t\tSymName sn = {0};\n\n\t\tif (exponly && !isAnExport (symbol)) {\n\t\t\tfree (r_symbol_name);\n\t\t\tcontinue;\n\t\t}\n\t\tif (name && strcmp (r_symbol_name, name)) {\n\t\t\tfree (r_symbol_name);\n\t\t\tcontinue;\n\t\t}\n\t\tif (at && (!symbol->size || !is_in_range (at, addr, symbol->size))) {\n\t\t\tfree (r_symbol_name);\n\t\t\tcontinue;\n\t\t}\n\t\tif ((printHere && !is_in_range (r->offset, symbol->paddr, len))\n\t\t\t\t&& (printHere && !is_in_range (r->offset, addr, len))) {\n\t\t\tfree (r_symbol_name);\n\t\t\tcontinue;\n\t\t}\n\t\tcount ++;\n\t\tsnInit (r, &sn, symbol, lang);\n\n\t\tif (IS_MODE_SET (mode) && (is_section_symbol (symbol) || is_file_symbol (symbol))) {\n\t\t\t/*\n\t\t\t * Skip section symbols because they will have their own flag.\n\t\t\t * Skip also file symbols because not useful for now.\n\t\t\t */\n\t\t} else if (IS_MODE_SET (mode) && is_special_symbol (symbol)) {\n\t\t\tif (is_arm) {\n\t\t\t\thandle_arm_special_symbol (r, symbol, va);\n\t\t\t}\n\t\t} else if (IS_MODE_SET (mode)) {\n\t\t\t// TODO: provide separate API in RBinPlugin to let plugins handle anal hints/metadata\n\t\t\tif (is_arm) {\n\t\t\t\thandle_arm_symbol (r, symbol, info, va);\n\t\t\t}\n\t\t\tselect_flag_space (r, symbol);\n\t\t\t/* If that's a Classed symbol (method or so) */\n\t\t\tif (sn.classname) {\n\t\t\t\tRFlagItem *fi = r_flag_get (r->flags, sn.methflag);\n\t\t\t\tif (r->bin->prefix) {\n\t\t\t\t\tchar *prname = r_str_newf (\"%s.%s\", r->bin->prefix, sn.methflag);\n\t\t\t\t\tr_name_filter (sn.methflag, -1);\n\t\t\t\t\tfree (sn.methflag);\n\t\t\t\t\tsn.methflag = prname;\n\t\t\t\t}\n\t\t\t\tif (fi) {\n\t\t\t\t\tr_flag_item_set_realname (fi, sn.methname);\n\t\t\t\t\tif ((fi->offset - r->flags->base) == addr) {\n\t\t\t\t//\t\tchar *comment = fi->comment ? strdup (fi->comment) : NULL;\n\t\t\t\t\t\tr_flag_unset (r->flags, fi);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfi = r_flag_set (r->flags, sn.methflag, addr, symbol->size);\n\t\t\t\t\tchar *comment = fi->comment ? strdup (fi->comment) : NULL;\n\t\t\t\t\tif (comment) {\n\t\t\t\t\t\tr_flag_item_set_comment (fi, comment);\n\t\t\t\t\t\tR_FREE (comment);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst char *n = sn.demname ? sn.demname : sn.name;\n\t\t\t\tconst char *fn = sn.demflag ? sn.demflag : sn.nameflag;\n\t\t\t\tchar *fnp = (r->bin->prefix) ?\n\t\t\t\t\tr_str_newf (\"%s.%s\", r->bin->prefix, fn):\n\t\t\t\t\tstrdup (fn);\n\t\t\t\tRFlagItem *fi = r_flag_set (r->flags, fnp, addr, symbol->size);\n\t\t\t\tif (fi) {\n\t\t\t\t\tr_flag_item_set_realname (fi, n);\n\t\t\t\t\tfi->demangled = (bool)(size_t)sn.demname;\n\t\t\t\t} else {\n\t\t\t\t\tif (fn) {\n\t\t\t\t\t\teprintf (\"[Warning] Can't find flag (%s)\\n\", fn);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfree (fnp);\n\t\t\t}\n\t\t\tif (sn.demname) {\n\t\t\t\tr_meta_add (r->anal, R_META_TYPE_COMMENT,\n\t\t\t\t\taddr, symbol->size, sn.demname);\n\t\t\t}\n\t\t\tr_flag_space_pop (r->flags);\n\t\t} else if (IS_MODE_JSON (mode)) {\n\t\t\tchar *str = r_str_escape_utf8_for_json (r_symbol_name, -1);\n\t\t\t// str = r_str_replace (str, \"\\\"\", \"\\\\\\\"\", 1);\n\t\t\tr_cons_printf (\"%s{\\\"name\\\":\\\"%s\\\",\"\n\t\t\t\t\"\\\"demname\\\":\\\"%s\\\",\"\n\t\t\t\t\"\\\"flagname\\\":\\\"%s\\\",\"\n\t\t\t\t\"\\\"ordinal\\\":%d,\"\n\t\t\t\t\"\\\"bind\\\":\\\"%s\\\",\"\n\t\t\t\t\"\\\"size\\\":%d,\"\n\t\t\t\t\"\\\"type\\\":\\\"%s\\\",\"\n\t\t\t\t\"\\\"vaddr\\\":%\"PFMT64d\",\"\n\t\t\t\t\"\\\"paddr\\\":%\"PFMT64d\"}\",\n\t\t\t\t((exponly && firstexp) || printHere) ? \"\" : (iter->p ? \",\" : \"\"),\n\t\t\t\tstr,\n\t\t\t\tsn.demname? sn.demname: \"\",\n\t\t\t\tsn.nameflag,\n\t\t\t\tsymbol->ordinal,\n\t\t\t\tsymbol->bind,\n\t\t\t\t(int)symbol->size,\n\t\t\t\tsymbol->type,\n\t\t\t\t(ut64)addr, (ut64)symbol->paddr);\n\t\t\tfree (str);\n\t\t} else if (IS_MODE_SIMPLE (mode)) {\n\t\t\tconst char *name = sn.demname? sn.demname: r_symbol_name;\n\t\t\tr_cons_printf (\"0x%08\"PFMT64x\" %d %s\\n\",\n\t\t\t\taddr, (int)symbol->size, name);\n\t\t} else if (IS_MODE_SIMPLEST (mode)) {\n\t\t\tconst char *name = sn.demname? sn.demname: r_symbol_name;\n\t\t\tr_cons_printf (\"%s\\n\", name);\n\t\t} else if (IS_MODE_RAD (mode)) {\n\t\t\t/* Skip special symbols because we do not flag them and\n\t\t\t * they shouldn't be printed in the rad format either */\n\t\t\tif (is_special_symbol (symbol)) {\n\t\t\t\tgoto next;\n\t\t\t}\n\t\t\tRBinFile *binfile;\n\t\t\tRBinPlugin *plugin;\n\t\t\tconst char *name = sn.demname? sn.demname: r_symbol_name;\n\t\t\tif (!name) {\n\t\t\t\tgoto next;\n\t\t\t}\n\t\t\tif (!strncmp (name, \"imp.\", 4)) {\n\t\t\t\tif (lastfs != 'i') {\n\t\t\t\t\tr_cons_printf (\"fs imports\\n\");\n\t\t\t\t}\n\t\t\t\tlastfs = 'i';\n\t\t\t} else {\n\t\t\t\tif (lastfs != 's') {\n\t\t\t\t\tconst char *fs = exponly? \"exports\": \"symbols\";\n\t\t\t\t\tr_cons_printf (\"fs %s\\n\", fs);\n\t\t\t\t}\n\t\t\t\tlastfs = 's';\n\t\t\t}\n\t\t\tif (r->bin->prefix || *name) { // we don't want unnamed symbol flags\n\t\t\t\tchar *flagname = construct_symbol_flagname (\"sym\", name, MAXFLAG_LEN_DEFAULT);\n\t\t\t\tif (!flagname) {\n\t\t\t\t\tgoto next;\n\t\t\t\t}\n\t\t\t\tr_cons_printf (\"\\\"f %s%s%s %u 0x%08\" PFMT64x \"\\\"\\n\",\n\t\t\t\t\tr->bin->prefix ? r->bin->prefix : \"\", r->bin->prefix ? \".\" : \"\",\n\t\t\t\t\tflagname, symbol->size, addr);\n\t\t\t\tfree (flagname);\n\t\t\t}\n\t\t\tbinfile = r_bin_cur (r->bin);\n\t\t\tplugin = r_bin_file_cur_plugin (binfile);\n\t\t\tif (plugin && plugin->name) {\n\t\t\t\tif (r_str_startswith (plugin->name, \"pe\")) {\n\t\t\t\t\tchar *module = strdup (r_symbol_name);\n\t\t\t\t\tchar *p = strstr (module, \".dll_\");\n\t\t\t\t\tif (p && strstr (module, \"imp.\")) {\n\t\t\t\t\t\tchar *symname = __filterShell (p + 5);\n\t\t\t\t\t\tchar *m = __filterShell (module);\n\t\t\t\t\t\t*p = 0;\n\t\t\t\t\t\tif (r->bin->prefix) {\n\t\t\t\t\t\t\tr_cons_printf (\"\\\"k bin/pe/%s/%d=%s.%s\\\"\\n\",\n\t\t\t\t\t\t\t\tmodule, symbol->ordinal, r->bin->prefix, symname);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tr_cons_printf (\"\\\"k bin/pe/%s/%d=%s\\\"\\n\",\n\t\t\t\t\t\t\t\tmodule, symbol->ordinal, symname);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfree (symname);\n\t\t\t\t\t\tfree (m);\n\t\t\t\t\t}\n\t\t\t\t\tfree (module);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst char *bind = symbol->bind? symbol->bind: \"NONE\";\n\t\t\tconst char *type = symbol->type? symbol->type: \"NONE\";\n\t\t\tconst char *name = r_str_get (sn.demname? sn.demname: r_symbol_name);\n\t\t\t// const char *fwd = r_str_get (symbol->forwarder);\n\t\t\tr_cons_printf (\"%03u\", symbol->ordinal);\n\t\t\tif (symbol->paddr == UT64_MAX) {\n\t\t\t\tr_cons_printf (\" ----------\");\n\t\t\t} else {\n\t\t\t\tr_cons_printf (\" 0x%08\"PFMT64x, symbol->paddr);\n\t\t\t}\n\t\t\tr_cons_printf (\" 0x%08\"PFMT64x\" %6s %6s %4d%s%s\\n\",\n\t\t\t               addr, bind, type, symbol->size, *name? \" \": \"\", name);\n\t\t}\nnext:\n\t\tsnFini (&sn);\n\t\ti++;\n\t\tfree (r_symbol_name);\n\t\tif (exponly && firstexp) {\n\t\t\tfirstexp = false;\n\t\t}\n\t\tif (printHere) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (count == 0 && IS_MODE_JSON (mode)) {\n\t\tr_cons_printf (\"{}\");\n\t}\n\n\n\t//handle thumb and arm for entry point since they are not present in symbols\n\tif (is_arm) {\n\t\tr_list_foreach (entries, iter, entry) {\n\t\t\tif (IS_MODE_SET (mode)) {\n\t\t\t\thandle_arm_entry (r, entry, info, va);\n\t\t\t}\n\t\t}\n\t}\n\tif (IS_MODE_JSON (mode) && !printHere) {\n\t\tr_cons_printf (\"]\");\n\t}\n\n\tr_spaces_pop (&r->anal->meta_spaces);\n\treturn true;\n}", "line_changes": {"deleted": [{"line_no": 211, "char_start": 6599, "char_end": 6647, "line": "\t\t\t\t\t\t\tr_cons_printf (\"k bin/pe/%s/%d=%s.%s\\n\",\n"}, {"line_no": 214, "char_start": 6721, "char_end": 6766, "line": "\t\t\t\t\t\t\tr_cons_printf (\"k bin/pe/%s/%d=%s\\n\",\n"}], "added": [{"line_no": 211, "char_start": 6599, "char_end": 6651, "line": "\t\t\t\t\t\t\tr_cons_printf (\"\\\"k bin/pe/%s/%d=%s.%s\\\"\\n\",\n"}, {"line_no": 214, "char_start": 6725, "char_end": 6774, "line": "\t\t\t\t\t\t\tr_cons_printf (\"\\\"k bin/pe/%s/%d=%s\\\"\\n\",\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 6622, "char_end": 6624, "chars": "\\\""}, {"char_start": 6644, "char_end": 6646, "chars": "\\\""}, {"char_start": 6748, "char_end": 6750, "chars": "\\\""}, {"char_start": 6767, "char_end": 6769, "chars": "\\\""}]}, "commit_link": "github.com/radareorg/radare2/commit/5411543a310a470b1257fb93273cdd6e8dfcb3af", "file_name": "libr/core/cbin.c", "vul_type": "cwe-078"}
{"func_name": "on_message", "func_src_before": "    def on_message( self, profile_id, profile_name, level, message, timeout ):\n        if 1 == level:\n            cmd = \"notify-send \"\n            if timeout > 0:\n                cmd = cmd + \" -t %s\" % (1000 * timeout)\n\n            title = \"Back In Time (%s) : %s\" % (self.user, profile_name)\n            message = message.replace(\"\\n\", ' ')\n            message = message.replace(\"\\r\", '')\n\n            cmd = cmd + \" \\\"%s\\\" \\\"%s\\\"\" % (title, message)\n            print(cmd)\n            os.system(cmd)\n        return", "func_src_after": "    def on_message( self, profile_id, profile_name, level, message, timeout ):\n        if 1 == level:\n            cmd = ['notify-send']\n            if timeout > 0:\n                cmd.extend(['-t', str(1000 * timeout)])\n\n            title = \"Back In Time (%s) : %s\" % (self.user, profile_name)\n            message = message.replace(\"\\n\", ' ')\n            message = message.replace(\"\\r\", '')\n\n            cmd.append(title)\n            cmd.append(message)\n            subprocess.Popen(cmd).communicate()\n        return", "line_changes": {"deleted": [{"line_no": 3, "char_start": 102, "char_end": 135, "line": "            cmd = \"notify-send \"\n"}, {"line_no": 5, "char_start": 163, "char_end": 219, "line": "                cmd = cmd + \" -t %s\" % (1000 * timeout)\n"}, {"line_no": 11, "char_start": 391, "char_end": 451, "line": "            cmd = cmd + \" \\\"%s\\\" \\\"%s\\\"\" % (title, message)\n"}, {"line_no": 12, "char_start": 451, "char_end": 474, "line": "            print(cmd)\n"}, {"line_no": 13, "char_start": 474, "char_end": 501, "line": "            os.system(cmd)\n"}], "added": [{"line_no": 3, "char_start": 102, "char_end": 136, "line": "            cmd = ['notify-send']\n"}, {"line_no": 5, "char_start": 164, "char_end": 220, "line": "                cmd.extend(['-t', str(1000 * timeout)])\n"}, {"line_no": 11, "char_start": 392, "char_end": 422, "line": "            cmd.append(title)\n"}, {"line_no": 12, "char_start": 422, "char_end": 454, "line": "            cmd.append(message)\n"}, {"line_no": 13, "char_start": 454, "char_end": 502, "line": "            subprocess.Popen(cmd).communicate()\n"}]}, "char_changes": {"deleted": [{"char_start": 120, "char_end": 121, "chars": "\""}, {"char_start": 132, "char_end": 134, "chars": " \""}, {"char_start": 182, "char_end": 187, "chars": " = cm"}, {"char_start": 188, "char_end": 193, "chars": " + \" "}, {"char_start": 196, "char_end": 197, "chars": "%"}, {"char_start": 198, "char_end": 202, "chars": "\" % "}, {"char_start": 406, "char_end": 411, "chars": " = cm"}, {"char_start": 412, "char_end": 434, "chars": " + \" \\\"%s\\\" \\\"%s\\\"\" % "}, {"char_start": 440, "char_end": 449, "chars": ", message"}, {"char_start": 464, "char_end": 466, "chars": "ri"}, {"char_start": 467, "char_end": 468, "chars": "t"}, {"char_start": 469, "char_end": 470, "chars": "c"}, {"char_start": 471, "char_end": 472, "chars": "d"}, {"char_start": 486, "char_end": 487, "chars": "o"}, {"char_start": 488, "char_end": 489, "chars": "."}, {"char_start": 490, "char_end": 491, "chars": "y"}, {"char_start": 492, "char_end": 493, "chars": "t"}, {"char_start": 494, "char_end": 495, "chars": "m"}], "added": [{"char_start": 120, "char_end": 122, "chars": "['"}, {"char_start": 133, "char_end": 135, "chars": "']"}, {"char_start": 183, "char_end": 189, "chars": ".exten"}, {"char_start": 190, "char_end": 193, "chars": "(['"}, {"char_start": 195, "char_end": 197, "chars": "',"}, {"char_start": 199, "char_end": 201, "chars": "tr"}, {"char_start": 216, "char_end": 218, "chars": ")]"}, {"char_start": 407, "char_end": 413, "chars": ".appen"}, {"char_start": 434, "char_end": 439, "chars": "cmd.a"}, {"char_start": 440, "char_end": 442, "chars": "pe"}, {"char_start": 443, "char_end": 444, "chars": "d"}, {"char_start": 446, "char_end": 452, "chars": "essage"}, {"char_start": 466, "char_end": 471, "chars": "subpr"}, {"char_start": 472, "char_end": 475, "chars": "ces"}, {"char_start": 477, "char_end": 480, "chars": "Pop"}, {"char_start": 481, "char_end": 482, "chars": "n"}, {"char_start": 486, "char_end": 500, "chars": ").communicate("}]}, "commit_link": "github.com/bit-team/backintime/commit/cef81d0da93ff601252607df3db1a48f7f6f01b3", "file_name": "qt4/plugins/notifyplugin.py", "vul_type": "cwe-078"}
{"func_name": "podbeuter::pb_controller::play_file", "func_src_before": "void pb_controller::play_file(const std::string& file) {\n\tstd::string cmdline;\n\tstd::string player = cfg->get_configvalue(\"player\");\n\tif (player == \"\")\n\t\treturn;\n\tcmdline.append(player);\n\tcmdline.append(\" \\\"\");\n\tcmdline.append(utils::replace_all(file,\"\\\"\", \"\\\\\\\"\"));\n\tcmdline.append(\"\\\"\");\n\tstfl::reset();\n\tutils::run_interactively(cmdline, \"pb_controller::play_file\");\n}", "func_src_after": "void pb_controller::play_file(const std::string& file) {\n\tstd::string cmdline;\n\tstd::string player = cfg->get_configvalue(\"player\");\n\tif (player == \"\")\n\t\treturn;\n\tcmdline.append(player);\n\tcmdline.append(\" '\");\n\tcmdline.append(utils::replace_all(file,\"'\", \"%27\"));\n\tcmdline.append(\"'\");\n\tstfl::reset();\n\tutils::run_interactively(cmdline, \"pb_controller::play_file\");\n}", "line_changes": {"deleted": [{"line_no": 7, "char_start": 187, "char_end": 211, "line": "\tcmdline.append(\" \\\"\");\n"}, {"line_no": 8, "char_start": 211, "char_end": 267, "line": "\tcmdline.append(utils::replace_all(file,\"\\\"\", \"\\\\\\\"\"));\n"}, {"line_no": 9, "char_start": 267, "char_end": 290, "line": "\tcmdline.append(\"\\\"\");\n"}], "added": [{"line_no": 7, "char_start": 187, "char_end": 210, "line": "\tcmdline.append(\" '\");\n"}, {"line_no": 8, "char_start": 210, "char_end": 264, "line": "\tcmdline.append(utils::replace_all(file,\"'\", \"%27\"));\n"}, {"line_no": 9, "char_start": 264, "char_end": 286, "line": "\tcmdline.append(\"'\");\n"}]}, "char_changes": {"deleted": [{"char_start": 205, "char_end": 207, "chars": "\\\""}, {"char_start": 252, "char_end": 254, "chars": "\\\""}, {"char_start": 258, "char_end": 262, "chars": "\\\\\\\""}, {"char_start": 284, "char_end": 286, "chars": "\\\""}], "added": [{"char_start": 205, "char_end": 206, "chars": "'"}, {"char_start": 251, "char_end": 252, "chars": "'"}, {"char_start": 256, "char_end": 259, "chars": "%27"}, {"char_start": 281, "char_end": 282, "chars": "'"}]}, "commit_link": "github.com/akrennmair/newsbeuter/commit/c8fea2f60c18ed30bdd1bb6f798e994e51a58260", "file_name": "src/pb_controller.cpp", "vul_type": "cwe-078"}
{"func_name": "_find_host_exhaustive", "func_src_before": "    def _find_host_exhaustive(self, connector, hosts):\n        for host in hosts:\n            ssh_cmd = 'svcinfo lshost -delim ! %s' % host\n            out, err = self._run_ssh(ssh_cmd)\n            self._assert_ssh_return(len(out.strip()),\n                                    '_find_host_exhaustive',\n                                    ssh_cmd, out, err)\n            for attr_line in out.split('\\n'):\n                # If '!' not found, return the string and two empty strings\n                attr_name, foo, attr_val = attr_line.partition('!')\n                if (attr_name == 'iscsi_name' and\n                        'initiator' in connector and\n                        attr_val == connector['initiator']):\n                    return host\n                elif (attr_name == 'WWPN' and\n                      'wwpns' in connector and\n                      attr_val.lower() in\n                      map(str.lower, map(str, connector['wwpns']))):\n                        return host\n        return None", "func_src_after": "    def _find_host_exhaustive(self, connector, hosts):\n        for host in hosts:\n            ssh_cmd = ['svcinfo', 'lshost', '-delim', '!', host]\n            out, err = self._run_ssh(ssh_cmd)\n            self._assert_ssh_return(len(out.strip()),\n                                    '_find_host_exhaustive',\n                                    ssh_cmd, out, err)\n            for attr_line in out.split('\\n'):\n                # If '!' not found, return the string and two empty strings\n                attr_name, foo, attr_val = attr_line.partition('!')\n                if (attr_name == 'iscsi_name' and\n                        'initiator' in connector and\n                        attr_val == connector['initiator']):\n                    return host\n                elif (attr_name == 'WWPN' and\n                      'wwpns' in connector and\n                      attr_val.lower() in\n                      map(str.lower, map(str, connector['wwpns']))):\n                        return host\n        return None", "line_changes": {"deleted": [{"line_no": 3, "char_start": 82, "char_end": 140, "line": "            ssh_cmd = 'svcinfo lshost -delim ! %s' % host\n"}], "added": [{"line_no": 3, "char_start": 82, "char_end": 147, "line": "            ssh_cmd = ['svcinfo', 'lshost', '-delim', '!', host]\n"}]}, "char_changes": {"deleted": [{"char_start": 128, "char_end": 131, "chars": " %s"}, {"char_start": 132, "char_end": 134, "chars": " %"}], "added": [{"char_start": 104, "char_end": 105, "chars": "["}, {"char_start": 113, "char_end": 115, "chars": "',"}, {"char_start": 116, "char_end": 117, "chars": "'"}, {"char_start": 123, "char_end": 125, "chars": "',"}, {"char_start": 126, "char_end": 127, "chars": "'"}, {"char_start": 133, "char_end": 135, "chars": "',"}, {"char_start": 136, "char_end": 137, "chars": "'"}, {"char_start": 139, "char_end": 140, "chars": ","}, {"char_start": 145, "char_end": 146, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "_create_vdisk", "func_src_before": "    def _create_vdisk(self, name, size, units, opts):\n        \"\"\"Create a new vdisk.\"\"\"\n\n        LOG.debug(_('enter: _create_vdisk: vdisk %s ') % name)\n\n        model_update = None\n        autoex = '-autoexpand' if opts['autoexpand'] else ''\n        easytier = '-easytier on' if opts['easytier'] else '-easytier off'\n\n        # Set space-efficient options\n        if opts['rsize'] == -1:\n            ssh_cmd_se_opt = ''\n        else:\n            ssh_cmd_se_opt = (\n                '-rsize %(rsize)d%% %(autoex)s -warning %(warn)d%%' %\n                {'rsize': opts['rsize'],\n                 'autoex': autoex,\n                 'warn': opts['warning']})\n            if opts['compression']:\n                ssh_cmd_se_opt = ssh_cmd_se_opt + ' -compressed'\n            else:\n                ssh_cmd_se_opt = ssh_cmd_se_opt + (\n                    ' -grainsize %d' % opts['grainsize'])\n\n        ssh_cmd = ('svctask mkvdisk -name %(name)s -mdiskgrp %(mdiskgrp)s '\n                   '-iogrp 0 -size %(size)s -unit '\n                   '%(unit)s %(easytier)s %(ssh_cmd_se_opt)s'\n                   % {'name': name,\n                   'mdiskgrp': self.configuration.storwize_svc_volpool_name,\n                   'size': size, 'unit': units, 'easytier': easytier,\n                   'ssh_cmd_se_opt': ssh_cmd_se_opt})\n        out, err = self._run_ssh(ssh_cmd)\n        self._assert_ssh_return(len(out.strip()), '_create_vdisk',\n                                ssh_cmd, out, err)\n\n        # Ensure that the output is as expected\n        match_obj = re.search('Virtual Disk, id \\[([0-9]+)\\], '\n                              'successfully created', out)\n        # Make sure we got a \"successfully created\" message with vdisk id\n        self._driver_assert(\n            match_obj is not None,\n            _('_create_vdisk %(name)s - did not find '\n              'success message in CLI output.\\n '\n              'stdout: %(out)s\\n stderr: %(err)s')\n            % {'name': name, 'out': str(out), 'err': str(err)})\n\n        LOG.debug(_('leave: _create_vdisk: volume %s ') % name)", "func_src_after": "    def _create_vdisk(self, name, size, units, opts):\n        \"\"\"Create a new vdisk.\"\"\"\n\n        LOG.debug(_('enter: _create_vdisk: vdisk %s ') % name)\n\n        model_update = None\n        easytier = 'on' if opts['easytier'] else 'off'\n\n        # Set space-efficient options\n        if opts['rsize'] == -1:\n            ssh_cmd_se_opt = []\n        else:\n            ssh_cmd_se_opt = ['-rsize', '%s%%' % str(opts['rsize']),\n                              '-autoexpand', '-warning',\n                              '%s%%' % str(opts['warning'])]\n            if not opts['autoexpand']:\n                ssh_cmd_se_opt.remove('-autoexpand')\n\n            if opts['compression']:\n                ssh_cmd_se_opt.append('-compressed')\n            else:\n                ssh_cmd_se_opt.extend(['-grainsize', str(opts['grainsize'])])\n\n        ssh_cmd = ['svctask', 'mkvdisk', '-name', name, '-mdiskgrp',\n                   self.configuration.storwize_svc_volpool_name,\n                   '-iogrp', '0', '-size', size, '-unit',\n                   units, '-easytier', easytier] + ssh_cmd_se_opt\n        out, err = self._run_ssh(ssh_cmd)\n        self._assert_ssh_return(len(out.strip()), '_create_vdisk',\n                                ssh_cmd, out, err)\n\n        # Ensure that the output is as expected\n        match_obj = re.search('Virtual Disk, id \\[([0-9]+)\\], '\n                              'successfully created', out)\n        # Make sure we got a \"successfully created\" message with vdisk id\n        self._driver_assert(\n            match_obj is not None,\n            _('_create_vdisk %(name)s - did not find '\n              'success message in CLI output.\\n '\n              'stdout: %(out)s\\n stderr: %(err)s')\n            % {'name': name, 'out': str(out), 'err': str(err)})\n\n        LOG.debug(_('leave: _create_vdisk: volume %s ') % name)", "line_changes": {"deleted": [{"line_no": 7, "char_start": 181, "char_end": 242, "line": "        autoex = '-autoexpand' if opts['autoexpand'] else ''\n"}, {"line_no": 8, "char_start": 242, "char_end": 317, "line": "        easytier = '-easytier on' if opts['easytier'] else '-easytier off'\n"}, {"line_no": 12, "char_start": 388, "char_end": 420, "line": "            ssh_cmd_se_opt = ''\n"}, {"line_no": 14, "char_start": 434, "char_end": 465, "line": "            ssh_cmd_se_opt = (\n"}, {"line_no": 15, "char_start": 465, "char_end": 535, "line": "                '-rsize %(rsize)d%% %(autoex)s -warning %(warn)d%%' %\n"}, {"line_no": 16, "char_start": 535, "char_end": 576, "line": "                {'rsize': opts['rsize'],\n"}, {"line_no": 17, "char_start": 576, "char_end": 611, "line": "                 'autoex': autoex,\n"}, {"line_no": 18, "char_start": 611, "char_end": 654, "line": "                 'warn': opts['warning']})\n"}, {"line_no": 20, "char_start": 690, "char_end": 755, "line": "                ssh_cmd_se_opt = ssh_cmd_se_opt + ' -compressed'\n"}, {"line_no": 22, "char_start": 773, "char_end": 825, "line": "                ssh_cmd_se_opt = ssh_cmd_se_opt + (\n"}, {"line_no": 23, "char_start": 825, "char_end": 883, "line": "                    ' -grainsize %d' % opts['grainsize'])\n"}, {"line_no": 24, "char_start": 883, "char_end": 884, "line": "\n"}, {"line_no": 25, "char_start": 884, "char_end": 960, "line": "        ssh_cmd = ('svctask mkvdisk -name %(name)s -mdiskgrp %(mdiskgrp)s '\n"}, {"line_no": 26, "char_start": 960, "char_end": 1012, "line": "                   '-iogrp 0 -size %(size)s -unit '\n"}, {"line_no": 27, "char_start": 1012, "char_end": 1074, "line": "                   '%(unit)s %(easytier)s %(ssh_cmd_se_opt)s'\n"}, {"line_no": 28, "char_start": 1074, "char_end": 1110, "line": "                   % {'name': name,\n"}, {"line_no": 29, "char_start": 1110, "char_end": 1187, "line": "                   'mdiskgrp': self.configuration.storwize_svc_volpool_name,\n"}, {"line_no": 30, "char_start": 1187, "char_end": 1257, "line": "                   'size': size, 'unit': units, 'easytier': easytier,\n"}, {"line_no": 31, "char_start": 1257, "char_end": 1311, "line": "                   'ssh_cmd_se_opt': ssh_cmd_se_opt})\n"}], "added": [{"line_no": 7, "char_start": 181, "char_end": 236, "line": "        easytier = 'on' if opts['easytier'] else 'off'\n"}, {"line_no": 11, "char_start": 307, "char_end": 339, "line": "            ssh_cmd_se_opt = []\n"}, {"line_no": 13, "char_start": 353, "char_end": 422, "line": "            ssh_cmd_se_opt = ['-rsize', '%s%%' % str(opts['rsize']),\n"}, {"line_no": 14, "char_start": 422, "char_end": 479, "line": "                              '-autoexpand', '-warning',\n"}, {"line_no": 15, "char_start": 479, "char_end": 540, "line": "                              '%s%%' % str(opts['warning'])]\n"}, {"line_no": 16, "char_start": 540, "char_end": 579, "line": "            if not opts['autoexpand']:\n"}, {"line_no": 17, "char_start": 579, "char_end": 632, "line": "                ssh_cmd_se_opt.remove('-autoexpand')\n"}, {"line_no": 18, "char_start": 632, "char_end": 633, "line": "\n"}, {"line_no": 20, "char_start": 669, "char_end": 722, "line": "                ssh_cmd_se_opt.append('-compressed')\n"}, {"line_no": 22, "char_start": 740, "char_end": 818, "line": "                ssh_cmd_se_opt.extend(['-grainsize', str(opts['grainsize'])])\n"}, {"line_no": 23, "char_start": 818, "char_end": 819, "line": "\n"}, {"line_no": 24, "char_start": 819, "char_end": 888, "line": "        ssh_cmd = ['svctask', 'mkvdisk', '-name', name, '-mdiskgrp',\n"}, {"line_no": 25, "char_start": 888, "char_end": 953, "line": "                   self.configuration.storwize_svc_volpool_name,\n"}, {"line_no": 26, "char_start": 953, "char_end": 1011, "line": "                   '-iogrp', '0', '-size', size, '-unit',\n"}, {"line_no": 27, "char_start": 1011, "char_end": 1077, "line": "                   units, '-easytier', easytier] + ssh_cmd_se_opt\n"}]}, "char_changes": {"deleted": [{"char_start": 189, "char_end": 250, "chars": "autoex = '-autoexpand' if opts['autoexpand'] else ''\n        "}, {"char_start": 262, "char_end": 272, "chars": "-easytier "}, {"char_start": 302, "char_end": 312, "chars": "-easytier "}, {"char_start": 417, "char_end": 419, "chars": "''"}, {"char_start": 483, "char_end": 503, "chars": "rsize %(rsize)d%% %("}, {"char_start": 509, "char_end": 511, "chars": ")s"}, {"char_start": 521, "char_end": 535, "chars": "%(warn)d%%' %\n"}, {"char_start": 551, "char_end": 552, "chars": "{"}, {"char_start": 553, "char_end": 554, "chars": "r"}, {"char_start": 555, "char_end": 558, "chars": "ize"}, {"char_start": 559, "char_end": 560, "chars": ":"}, {"char_start": 568, "char_end": 569, "chars": "s"}, {"char_start": 570, "char_end": 572, "chars": "ze"}, {"char_start": 574, "char_end": 575, "chars": ","}, {"char_start": 590, "char_end": 593, "chars": "   "}, {"char_start": 602, "char_end": 610, "chars": " autoex,"}, {"char_start": 627, "char_end": 628, "chars": " "}, {"char_start": 629, "char_end": 630, "chars": "w"}, {"char_start": 631, "char_end": 636, "chars": "rn': "}, {"char_start": 638, "char_end": 643, "chars": "ts['w"}, {"char_start": 644, "char_end": 645, "chars": "r"}, {"char_start": 646, "char_end": 649, "chars": "ing"}, {"char_start": 650, "char_end": 652, "chars": "]}"}, {"char_start": 720, "char_end": 735, "chars": " = ssh_cmd_se_o"}, {"char_start": 736, "char_end": 740, "chars": "t + "}, {"char_start": 741, "char_end": 742, "chars": " "}, {"char_start": 803, "char_end": 815, "chars": " = ssh_cmd_s"}, {"char_start": 816, "char_end": 819, "chars": "_op"}, {"char_start": 820, "char_end": 823, "chars": " + "}, {"char_start": 824, "char_end": 845, "chars": "\n                    "}, {"char_start": 846, "char_end": 847, "chars": " "}, {"char_start": 857, "char_end": 860, "chars": " %d"}, {"char_start": 862, "char_end": 864, "chars": "% "}, {"char_start": 902, "char_end": 903, "chars": "("}, {"char_start": 926, "char_end": 928, "chars": "%("}, {"char_start": 932, "char_end": 934, "chars": ")s"}, {"char_start": 944, "char_end": 958, "chars": " %(mdiskgrp)s "}, {"char_start": 959, "char_end": 1108, "chars": "\n                   '-iogrp 0 -size %(size)s -unit '\n                   '%(unit)s %(easytier)s %(ssh_cmd_se_opt)s'\n                   % {'name': name"}, {"char_start": 1128, "char_end": 1140, "chars": " 'mdiskgrp':"}, {"char_start": 1212, "char_end": 1213, "chars": ":"}, {"char_start": 1226, "char_end": 1227, "chars": ":"}, {"char_start": 1245, "char_end": 1246, "chars": ":"}, {"char_start": 1255, "char_end": 1275, "chars": ",\n                  "}, {"char_start": 1276, "char_end": 1293, "chars": "'ssh_cmd_se_opt':"}, {"char_start": 1308, "char_end": 1310, "chars": "})"}], "added": [{"char_start": 336, "char_end": 338, "chars": "[]"}, {"char_start": 382, "char_end": 405, "chars": "['-rsize', '%s%%' % str"}, {"char_start": 406, "char_end": 421, "chars": "opts['rsize']),"}, {"char_start": 439, "char_end": 440, "chars": " "}, {"char_start": 441, "char_end": 454, "chars": "           '-"}, {"char_start": 460, "char_end": 466, "chars": "pand',"}, {"char_start": 467, "char_end": 468, "chars": "'"}, {"char_start": 477, "char_end": 478, "chars": ","}, {"char_start": 495, "char_end": 509, "chars": "              "}, {"char_start": 510, "char_end": 511, "chars": "%"}, {"char_start": 512, "char_end": 514, "chars": "%%"}, {"char_start": 515, "char_end": 517, "chars": " %"}, {"char_start": 518, "char_end": 522, "chars": "str("}, {"char_start": 528, "char_end": 530, "chars": "wa"}, {"char_start": 531, "char_end": 532, "chars": "n"}, {"char_start": 533, "char_end": 535, "chars": "ng"}, {"char_start": 537, "char_end": 539, "chars": ")]"}, {"char_start": 552, "char_end": 554, "chars": "if"}, {"char_start": 555, "char_end": 558, "chars": "not"}, {"char_start": 559, "char_end": 564, "chars": "opts["}, {"char_start": 571, "char_end": 575, "chars": "pand"}, {"char_start": 576, "char_end": 577, "chars": "]"}, {"char_start": 595, "char_end": 606, "chars": "ssh_cmd_se_"}, {"char_start": 609, "char_end": 617, "chars": ".remove("}, {"char_start": 618, "char_end": 619, "chars": "-"}, {"char_start": 620, "char_end": 627, "chars": "utoexpa"}, {"char_start": 628, "char_end": 629, "chars": "d"}, {"char_start": 631, "char_end": 632, "chars": "\n"}, {"char_start": 699, "char_end": 705, "chars": ".appen"}, {"char_start": 706, "char_end": 707, "chars": "("}, {"char_start": 720, "char_end": 721, "chars": ")"}, {"char_start": 770, "char_end": 771, "chars": "."}, {"char_start": 772, "char_end": 773, "chars": "x"}, {"char_start": 774, "char_end": 777, "chars": "end"}, {"char_start": 778, "char_end": 779, "chars": "["}, {"char_start": 791, "char_end": 792, "chars": ","}, {"char_start": 793, "char_end": 797, "chars": "str("}, {"char_start": 813, "char_end": 815, "chars": "])"}, {"char_start": 837, "char_end": 838, "chars": "["}, {"char_start": 846, "char_end": 848, "chars": "',"}, {"char_start": 849, "char_end": 850, "chars": "'"}, {"char_start": 857, "char_end": 859, "chars": "',"}, {"char_start": 860, "char_end": 861, "chars": "'"}, {"char_start": 866, "char_end": 868, "chars": "',"}, {"char_start": 873, "char_end": 874, "chars": ","}, {"char_start": 875, "char_end": 876, "chars": "'"}, {"char_start": 973, "char_end": 989, "chars": "-iogrp', '0', '-"}, {"char_start": 994, "char_end": 995, "chars": ","}, {"char_start": 1003, "char_end": 1004, "chars": "-"}, {"char_start": 1009, "char_end": 1029, "chars": ",\n                  "}, {"char_start": 1038, "char_end": 1039, "chars": "-"}, {"char_start": 1048, "char_end": 1049, "chars": ","}, {"char_start": 1058, "char_end": 1059, "chars": "]"}, {"char_start": 1060, "char_end": 1061, "chars": "+"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "test_invalid_iscsi_ip", "func_src_before": "    def test_invalid_iscsi_ip(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record driver set up\n        self.clear_mox()\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_port_cmd = 'showport'\n        _run_ssh(show_port_cmd, False).AndReturn([pack(PORT_RET), ''])\n\n        show_port_i_cmd = 'showport -iscsi'\n        _run_ssh(show_port_i_cmd, False).AndReturn([pack(READY_ISCSI_PORT_RET),\n                                                    ''])\n\n        show_port_i_cmd = 'showport -iscsiname'\n        _run_ssh(show_port_i_cmd, False).AndReturn([pack(SHOW_PORT_ISCSI), ''])\n\n        config = self.setup_configuration()\n        config.hp3par_iscsi_ips = ['10.10.220.250', '10.10.220.251']\n        config.iscsi_ip_address = '10.10.10.10'\n        self.mox.ReplayAll()\n\n        # no valid ip addr should be configured.\n        self.assertRaises(exception.InvalidInput,\n                          self.setup_driver,\n                          config,\n                          set_up_fakes=False)", "func_src_after": "    def test_invalid_iscsi_ip(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record driver set up\n        self.clear_mox()\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_port_cmd = ['showport']\n        _run_ssh(show_port_cmd, False).AndReturn([pack(PORT_RET), ''])\n\n        show_port_i_cmd = ['showport', '-iscsi']\n        _run_ssh(show_port_i_cmd, False).AndReturn([pack(READY_ISCSI_PORT_RET),\n                                                    ''])\n\n        show_port_i_cmd = ['showport', '-iscsiname']\n        _run_ssh(show_port_i_cmd, False).AndReturn([pack(SHOW_PORT_ISCSI), ''])\n\n        config = self.setup_configuration()\n        config.hp3par_iscsi_ips = ['10.10.220.250', '10.10.220.251']\n        config.iscsi_ip_address = '10.10.10.10'\n        self.mox.ReplayAll()\n\n        # no valid ip addr should be configured.\n        self.assertRaises(exception.InvalidInput,\n                          self.setup_driver,\n                          config,\n                          set_up_fakes=False)", "line_changes": {"deleted": [{"line_no": 9, "char_start": 294, "char_end": 329, "line": "        show_port_cmd = 'showport'\n"}, {"line_no": 12, "char_start": 401, "char_end": 445, "line": "        show_port_i_cmd = 'showport -iscsi'\n"}, {"line_no": 16, "char_start": 583, "char_end": 631, "line": "        show_port_i_cmd = 'showport -iscsiname'\n"}], "added": [{"line_no": 9, "char_start": 294, "char_end": 331, "line": "        show_port_cmd = ['showport']\n"}, {"line_no": 12, "char_start": 403, "char_end": 452, "line": "        show_port_i_cmd = ['showport', '-iscsi']\n"}, {"line_no": 16, "char_start": 590, "char_end": 643, "line": "        show_port_i_cmd = ['showport', '-iscsiname']\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 318, "char_end": 319, "chars": "["}, {"char_start": 329, "char_end": 330, "chars": "]"}, {"char_start": 429, "char_end": 430, "chars": "["}, {"char_start": 439, "char_end": 441, "chars": "',"}, {"char_start": 442, "char_end": 443, "chars": "'"}, {"char_start": 450, "char_end": 451, "chars": "]"}, {"char_start": 616, "char_end": 617, "chars": "["}, {"char_start": 626, "char_end": 628, "chars": "',"}, {"char_start": 629, "char_end": 630, "chars": "'"}, {"char_start": 641, "char_end": 642, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/tests/test_hp3par.py", "vul_type": "cwe-078"}
{"func_name": "get_output", "func_src_before": "def get_output(command: str) -> bytes:\n    \"\"\"\n    Run a command and return raw output\n\n    :param str command: the command to run\n    :returns: the stdout output of the command\n    \"\"\"\n    return subprocess.check_output(command.split())", "func_src_after": "def get_output(command: List[str]) -> str:\n    \"\"\"\n    Run a command and return raw output\n\n    :param str command: the command to run\n    :returns: the stdout output of the command\n    \"\"\"\n    result = subprocess.run(command, stdout=subprocess.PIPE, check=True)\n    return result.stdout.decode()", "line_changes": {"deleted": [{"line_no": 1, "char_start": 0, "char_end": 39, "line": "def get_output(command: str) -> bytes:\n"}, {"line_no": 8, "char_start": 186, "char_end": 237, "line": "    return subprocess.check_output(command.split())\n"}], "added": [{"line_no": 1, "char_start": 0, "char_end": 43, "line": "def get_output(command: List[str]) -> str:\n"}, {"line_no": 8, "char_start": 190, "char_end": 263, "line": "    result = subprocess.run(command, stdout=subprocess.PIPE, check=True)\n"}, {"line_no": 9, "char_start": 263, "char_end": 296, "line": "    return result.stdout.decode()\n"}]}, "char_changes": {"deleted": [{"char_start": 32, "char_end": 36, "chars": "byte"}, {"char_start": 213, "char_end": 215, "chars": "_o"}, {"char_start": 217, "char_end": 218, "chars": "p"}, {"char_start": 220, "char_end": 221, "chars": "("}, {"char_start": 223, "char_end": 227, "chars": "mman"}, {"char_start": 228, "char_end": 234, "chars": ".split"}, {"char_start": 236, "char_end": 237, "chars": ")"}], "added": [{"char_start": 24, "char_end": 29, "chars": "List["}, {"char_start": 32, "char_end": 33, "chars": "]"}, {"char_start": 38, "char_end": 39, "chars": "s"}, {"char_start": 40, "char_end": 41, "chars": "r"}, {"char_start": 196, "char_end": 199, "chars": "sul"}, {"char_start": 200, "char_end": 204, "chars": " = s"}, {"char_start": 205, "char_end": 207, "chars": "bp"}, {"char_start": 208, "char_end": 216, "chars": "ocess.ru"}, {"char_start": 217, "char_end": 226, "chars": "(command,"}, {"char_start": 227, "char_end": 234, "chars": "stdout="}, {"char_start": 245, "char_end": 251, "chars": "PIPE, "}, {"char_start": 256, "char_end": 259, "chars": "=Tr"}, {"char_start": 260, "char_end": 269, "chars": "e)\n    re"}, {"char_start": 270, "char_end": 285, "chars": "urn result.stdo"}, {"char_start": 287, "char_end": 290, "chars": ".de"}, {"char_start": 293, "char_end": 294, "chars": "e"}]}, "commit_link": "github.com/timothycrosley/isort/commit/1ab38f4f7840a3c19bf961a24630a992a8373a76", "file_name": "isort/hooks.py", "vul_type": "cwe-078"}
{"func_name": "openscript", "func_src_before": "openscript(\n    char_u\t*name,\n    int\t\tdirectly)\t/* when TRUE execute directly */\n{\n    if (curscript + 1 == NSCRIPT)\n    {\n\temsg(_(e_nesting));\n\treturn;\n    }\n#ifdef FEAT_EVAL\n    if (ignore_script)\n\t/* Not reading from script, also don't open one.  Warning message? */\n\treturn;\n#endif\n\n    if (scriptin[curscript] != NULL)\t/* already reading script */\n\t++curscript;\n\t\t\t\t/* use NameBuff for expanded name */\n    expand_env(name, NameBuff, MAXPATHL);\n    if ((scriptin[curscript] = mch_fopen((char *)NameBuff, READBIN)) == NULL)\n    {\n\tsemsg(_(e_notopen), name);\n\tif (curscript)\n\t    --curscript;\n\treturn;\n    }\n    if (save_typebuf() == FAIL)\n\treturn;\n\n    /*\n     * Execute the commands from the file right now when using \":source!\"\n     * after \":global\" or \":argdo\" or in a loop.  Also when another command\n     * follows.  This means the display won't be updated.  Don't do this\n     * always, \"make test\" would fail.\n     */\n    if (directly)\n    {\n\toparg_T\toa;\n\tint\toldcurscript;\n\tint\tsave_State = State;\n\tint\tsave_restart_edit = restart_edit;\n\tint\tsave_insertmode = p_im;\n\tint\tsave_finish_op = finish_op;\n\tint\tsave_msg_scroll = msg_scroll;\n\n\tState = NORMAL;\n\tmsg_scroll = FALSE;\t/* no msg scrolling in Normal mode */\n\trestart_edit = 0;\t/* don't go to Insert mode */\n\tp_im = FALSE;\t\t/* don't use 'insertmode' */\n\tclear_oparg(&oa);\n\tfinish_op = FALSE;\n\n\toldcurscript = curscript;\n\tdo\n\t{\n\t    update_topline_cursor();\t// update cursor position and topline\n\t    normal_cmd(&oa, FALSE);\t// execute one command\n\t    vpeekc();\t\t\t// check for end of file\n\t}\n\twhile (scriptin[oldcurscript] != NULL);\n\n\tState = save_State;\n\tmsg_scroll = save_msg_scroll;\n\trestart_edit = save_restart_edit;\n\tp_im = save_insertmode;\n\tfinish_op = save_finish_op;\n    }\n}", "func_src_after": "openscript(\n    char_u\t*name,\n    int\t\tdirectly)\t/* when TRUE execute directly */\n{\n    if (curscript + 1 == NSCRIPT)\n    {\n\temsg(_(e_nesting));\n\treturn;\n    }\n\n    // Disallow sourcing a file in the sandbox, the commands would be executed\n    // later, possibly outside of the sandbox.\n    if (check_secure())\n\treturn;\n\n#ifdef FEAT_EVAL\n    if (ignore_script)\n\t/* Not reading from script, also don't open one.  Warning message? */\n\treturn;\n#endif\n\n    if (scriptin[curscript] != NULL)\t/* already reading script */\n\t++curscript;\n\t\t\t\t/* use NameBuff for expanded name */\n    expand_env(name, NameBuff, MAXPATHL);\n    if ((scriptin[curscript] = mch_fopen((char *)NameBuff, READBIN)) == NULL)\n    {\n\tsemsg(_(e_notopen), name);\n\tif (curscript)\n\t    --curscript;\n\treturn;\n    }\n    if (save_typebuf() == FAIL)\n\treturn;\n\n    /*\n     * Execute the commands from the file right now when using \":source!\"\n     * after \":global\" or \":argdo\" or in a loop.  Also when another command\n     * follows.  This means the display won't be updated.  Don't do this\n     * always, \"make test\" would fail.\n     */\n    if (directly)\n    {\n\toparg_T\toa;\n\tint\toldcurscript;\n\tint\tsave_State = State;\n\tint\tsave_restart_edit = restart_edit;\n\tint\tsave_insertmode = p_im;\n\tint\tsave_finish_op = finish_op;\n\tint\tsave_msg_scroll = msg_scroll;\n\n\tState = NORMAL;\n\tmsg_scroll = FALSE;\t/* no msg scrolling in Normal mode */\n\trestart_edit = 0;\t/* don't go to Insert mode */\n\tp_im = FALSE;\t\t/* don't use 'insertmode' */\n\tclear_oparg(&oa);\n\tfinish_op = FALSE;\n\n\toldcurscript = curscript;\n\tdo\n\t{\n\t    update_topline_cursor();\t// update cursor position and topline\n\t    normal_cmd(&oa, FALSE);\t// execute one command\n\t    vpeekc();\t\t\t// check for end of file\n\t}\n\twhile (scriptin[oldcurscript] != NULL);\n\n\tState = save_State;\n\tmsg_scroll = save_msg_scroll;\n\trestart_edit = save_restart_edit;\n\tp_im = save_insertmode;\n\tfinish_op = save_finish_op;\n    }\n}", "line_changes": {"deleted": [], "added": [{"line_no": 10, "char_start": 160, "char_end": 161, "line": "\n"}, {"line_no": 13, "char_start": 287, "char_end": 311, "line": "    if (check_secure())\n"}, {"line_no": 14, "char_start": 311, "char_end": 320, "line": "\treturn;\n"}, {"line_no": 15, "char_start": 320, "char_end": 321, "line": "\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 160, "char_end": 321, "chars": "\n    // Disallow sourcing a file in the sandbox, the commands would be executed\n    // later, possibly outside of the sandbox.\n    if (check_secure())\n\treturn;\n\n"}]}, "commit_link": "github.com/vim/vim/commit/53575521406739cf20bbe4e384d88e7dca11f040", "file_name": "src/getchar.c", "vul_type": "cwe-078"}
{"func_name": "add_user", "func_src_before": "def add_user(username, password):\n    encPass = crypt.crypt(password,\"22\")\n    os.system(\"useradd -G docker,wheel -p \"+encPass+\" \"+username)", "func_src_after": "def add_user(username, password):\n    encPass = crypt.crypt(password,\"22\")\n    #subprocess escapes the username stopping code injection\n    subprocess.call(['useradd','-G','docker,wheel','-p',encPass,username])", "line_changes": {"deleted": [{"line_no": 3, "char_start": 75, "char_end": 140, "line": "    os.system(\"useradd -G docker,wheel -p \"+encPass+\" \"+username)\n"}], "added": [{"line_no": 4, "char_start": 136, "char_end": 210, "line": "    subprocess.call(['useradd','-G','docker,wheel','-p',encPass,username])\n"}]}, "char_changes": {"deleted": [{"char_start": 81, "char_end": 82, "chars": "."}, {"char_start": 83, "char_end": 84, "chars": "y"}, {"char_start": 89, "char_end": 90, "chars": "\""}, {"char_start": 97, "char_end": 98, "chars": " "}, {"char_start": 100, "char_end": 101, "chars": " "}, {"char_start": 113, "char_end": 114, "chars": " "}, {"char_start": 116, "char_end": 119, "chars": " \"+"}, {"char_start": 126, "char_end": 131, "chars": "+\" \"+"}], "added": [{"char_start": 79, "char_end": 85, "chars": "#subpr"}, {"char_start": 86, "char_end": 88, "chars": "ce"}, {"char_start": 90, "char_end": 92, "chars": " e"}, {"char_start": 93, "char_end": 99, "chars": "capes "}, {"char_start": 100, "char_end": 101, "chars": "h"}, {"char_start": 102, "char_end": 109, "chars": " userna"}, {"char_start": 110, "char_end": 155, "chars": "e stopping code injection\n    subprocess.call"}, {"char_start": 156, "char_end": 158, "chars": "['"}, {"char_start": 165, "char_end": 168, "chars": "','"}, {"char_start": 170, "char_end": 173, "chars": "','"}, {"char_start": 185, "char_end": 188, "chars": "','"}, {"char_start": 190, "char_end": 192, "chars": "',"}, {"char_start": 199, "char_end": 200, "chars": ","}, {"char_start": 208, "char_end": 209, "chars": "]"}]}, "commit_link": "github.com/Internet-of-People/titania-os/commit/9b7805119938343fcac9dc929d8882f1d97cf14a", "file_name": "vuedj/configtitania/views.py", "vul_type": "cwe-078"}
{"func_name": "write_section", "func_src_before": "    def write_section(self, section_name, section_data):\n        self.write_line(\"\")\n        self.write_line(\"define %s {\" % section_name)\n        sorted_keys = section_data.keys()\n        sorted_keys.sort()\n        for key in sorted_keys:\n            value = section_data[key]\n            self.icinga_lines.append((\"%s%-45s%s\" % (self.indent, key, self.value_to_icinga(value))))\n        self.write_line(\"}\")", "func_src_after": "    def write_section(self, section_name, section_data):\n        self.write_line(\"\")\n        self.write_line(\"define %s {\" % section_name)\n        sorted_keys = section_data.keys()\n        sorted_keys.sort()\n        for key in sorted_keys:\n            value = self.value_to_icinga(section_data[key])\n            icinga_line = \"%s%-45s%s\" % (self.indent, key, value)\n\n            if \"\\n\" in icinga_line or \"}\" in icinga_line:\n                msg = \"Found forbidden newline or '}' character in section %r.\"\n                raise Exception(msg % section_name)\n\n            self.icinga_lines.append(icinga_line)\n        self.write_line(\"}\")", "line_changes": {"deleted": [{"line_no": 7, "char_start": 240, "char_end": 278, "line": "            value = section_data[key]\n"}, {"line_no": 8, "char_start": 278, "char_end": 380, "line": "            self.icinga_lines.append((\"%s%-45s%s\" % (self.indent, key, self.value_to_icinga(value))))\n"}], "added": [{"line_no": 7, "char_start": 240, "char_end": 300, "line": "            value = self.value_to_icinga(section_data[key])\n"}, {"line_no": 8, "char_start": 300, "char_end": 366, "line": "            icinga_line = \"%s%-45s%s\" % (self.indent, key, value)\n"}, {"line_no": 9, "char_start": 366, "char_end": 367, "line": "\n"}, {"line_no": 10, "char_start": 367, "char_end": 425, "line": "            if \"\\n\" in icinga_line or \"}\" in icinga_line:\n"}, {"line_no": 11, "char_start": 425, "char_end": 505, "line": "                msg = \"Found forbidden newline or '}' character in section %r.\"\n"}, {"line_no": 12, "char_start": 505, "char_end": 557, "line": "                raise Exception(msg % section_name)\n"}, {"line_no": 13, "char_start": 557, "char_end": 558, "line": "\n"}, {"line_no": 14, "char_start": 558, "char_end": 608, "line": "            self.icinga_lines.append(icinga_line)\n"}]}, "char_changes": {"deleted": [{"char_start": 290, "char_end": 295, "chars": "self."}, {"char_start": 306, "char_end": 316, "chars": "s.append(("}, {"char_start": 349, "char_end": 350, "chars": "s"}, {"char_start": 351, "char_end": 352, "chars": "l"}, {"char_start": 353, "char_end": 355, "chars": ".v"}, {"char_start": 357, "char_end": 358, "chars": "u"}, {"char_start": 370, "char_end": 371, "chars": "v"}, {"char_start": 373, "char_end": 374, "chars": "u"}, {"char_start": 375, "char_end": 378, "chars": ")))"}], "added": [{"char_start": 262, "char_end": 283, "chars": "lf.value_to_icinga(se"}, {"char_start": 298, "char_end": 299, "chars": ")"}, {"char_start": 323, "char_end": 326, "chars": " = "}, {"char_start": 359, "char_end": 442, "chars": "value)\n\n            if \"\\n\" in icinga_line or \"}\" in icinga_line:\n                m"}, {"char_start": 443, "char_end": 461, "chars": "g = \"Found forbidd"}, {"char_start": 462, "char_end": 467, "chars": "n new"}, {"char_start": 468, "char_end": 502, "chars": "ine or '}' character in section %r"}, {"char_start": 503, "char_end": 522, "chars": "\"\n                r"}, {"char_start": 523, "char_end": 525, "chars": "is"}, {"char_start": 526, "char_end": 532, "chars": " Excep"}, {"char_start": 533, "char_end": 548, "chars": "ion(msg % secti"}, {"char_start": 549, "char_end": 550, "chars": "n"}, {"char_start": 551, "char_end": 575, "chars": "name)\n\n            self."}, {"char_start": 581, "char_end": 594, "chars": "_lines.append"}, {"char_start": 595, "char_end": 600, "chars": "icing"}, {"char_start": 601, "char_end": 602, "chars": "_"}, {"char_start": 603, "char_end": 605, "chars": "in"}]}, "commit_link": "github.com/Scout24/monitoring-config-generator/commit/a4b01b72d2e3d6ec2600c384a77f675fa9bbf6b7", "file_name": "src/main/python/monitoring_config_generator/MonitoringConfigGenerator.py", "vul_type": "cwe-078"}
{"func_name": "_update_volume_stats", "func_src_before": "    def _update_volume_stats(self):\n        \"\"\"Retrieve stats info from volume group.\"\"\"\n\n        LOG.debug(_(\"Updating volume stats\"))\n        data = {}\n\n        data['vendor_name'] = 'IBM'\n        data['driver_version'] = '1.1'\n        data['storage_protocol'] = list(self._enabled_protocols)\n\n        data['total_capacity_gb'] = 0  # To be overwritten\n        data['free_capacity_gb'] = 0   # To be overwritten\n        data['reserved_percentage'] = 0\n        data['QoS_support'] = False\n\n        pool = self.configuration.storwize_svc_volpool_name\n        #Get storage system name\n        ssh_cmd = 'svcinfo lssystem -delim !'\n        attributes = self._execute_command_and_parse_attributes(ssh_cmd)\n        if not attributes or not attributes['name']:\n            exception_message = (_('_update_volume_stats: '\n                                   'Could not get system name'))\n            raise exception.VolumeBackendAPIException(data=exception_message)\n\n        backend_name = self.configuration.safe_get('volume_backend_name')\n        if not backend_name:\n            backend_name = '%s_%s' % (attributes['name'], pool)\n        data['volume_backend_name'] = backend_name\n\n        ssh_cmd = 'svcinfo lsmdiskgrp -bytes -delim ! %s' % pool\n        attributes = self._execute_command_and_parse_attributes(ssh_cmd)\n        if not attributes:\n            LOG.error(_('Could not get pool data from the storage'))\n            exception_message = (_('_update_volume_stats: '\n                                   'Could not get storage pool data'))\n            raise exception.VolumeBackendAPIException(data=exception_message)\n\n        data['total_capacity_gb'] = (float(attributes['capacity']) /\n                                    (1024 ** 3))\n        data['free_capacity_gb'] = (float(attributes['free_capacity']) /\n                                    (1024 ** 3))\n        data['easytier_support'] = attributes['easy_tier'] in ['on', 'auto']\n        data['compression_support'] = self._compression_enabled\n\n        self._stats = data", "func_src_after": "    def _update_volume_stats(self):\n        \"\"\"Retrieve stats info from volume group.\"\"\"\n\n        LOG.debug(_(\"Updating volume stats\"))\n        data = {}\n\n        data['vendor_name'] = 'IBM'\n        data['driver_version'] = '1.1'\n        data['storage_protocol'] = list(self._enabled_protocols)\n\n        data['total_capacity_gb'] = 0  # To be overwritten\n        data['free_capacity_gb'] = 0   # To be overwritten\n        data['reserved_percentage'] = 0\n        data['QoS_support'] = False\n\n        pool = self.configuration.storwize_svc_volpool_name\n        #Get storage system name\n        ssh_cmd = ['svcinfo', 'lssystem', '-delim', '!']\n        attributes = self._execute_command_and_parse_attributes(ssh_cmd)\n        if not attributes or not attributes['name']:\n            exception_message = (_('_update_volume_stats: '\n                                   'Could not get system name'))\n            raise exception.VolumeBackendAPIException(data=exception_message)\n\n        backend_name = self.configuration.safe_get('volume_backend_name')\n        if not backend_name:\n            backend_name = '%s_%s' % (attributes['name'], pool)\n        data['volume_backend_name'] = backend_name\n\n        ssh_cmd = ['svcinfo', 'lsmdiskgrp', '-bytes', '-delim', '!', pool]\n        attributes = self._execute_command_and_parse_attributes(ssh_cmd)\n        if not attributes:\n            LOG.error(_('Could not get pool data from the storage'))\n            exception_message = (_('_update_volume_stats: '\n                                   'Could not get storage pool data'))\n            raise exception.VolumeBackendAPIException(data=exception_message)\n\n        data['total_capacity_gb'] = (float(attributes['capacity']) /\n                                    (1024 ** 3))\n        data['free_capacity_gb'] = (float(attributes['free_capacity']) /\n                                    (1024 ** 3))\n        data['easytier_support'] = attributes['easy_tier'] in ['on', 'auto']\n        data['compression_support'] = self._compression_enabled\n\n        self._stats = data", "line_changes": {"deleted": [{"line_no": 18, "char_start": 584, "char_end": 630, "line": "        ssh_cmd = 'svcinfo lssystem -delim !'\n"}, {"line_no": 30, "char_start": 1179, "char_end": 1244, "line": "        ssh_cmd = 'svcinfo lsmdiskgrp -bytes -delim ! %s' % pool\n"}], "added": [{"line_no": 18, "char_start": 584, "char_end": 641, "line": "        ssh_cmd = ['svcinfo', 'lssystem', '-delim', '!']\n"}, {"line_no": 30, "char_start": 1190, "char_end": 1265, "line": "        ssh_cmd = ['svcinfo', 'lsmdiskgrp', '-bytes', '-delim', '!', pool]\n"}]}, "char_changes": {"deleted": [{"char_start": 1232, "char_end": 1235, "chars": " %s"}, {"char_start": 1236, "char_end": 1238, "chars": " %"}], "added": [{"char_start": 602, "char_end": 603, "chars": "["}, {"char_start": 611, "char_end": 613, "chars": "',"}, {"char_start": 614, "char_end": 615, "chars": "'"}, {"char_start": 623, "char_end": 625, "chars": "',"}, {"char_start": 626, "char_end": 627, "chars": "'"}, {"char_start": 633, "char_end": 635, "chars": "',"}, {"char_start": 636, "char_end": 637, "chars": "'"}, {"char_start": 639, "char_end": 640, "chars": "]"}, {"char_start": 1208, "char_end": 1209, "chars": "["}, {"char_start": 1217, "char_end": 1219, "chars": "',"}, {"char_start": 1220, "char_end": 1221, "chars": "'"}, {"char_start": 1231, "char_end": 1233, "chars": "',"}, {"char_start": 1234, "char_end": 1235, "chars": "'"}, {"char_start": 1241, "char_end": 1243, "chars": "',"}, {"char_start": 1244, "char_end": 1245, "chars": "'"}, {"char_start": 1251, "char_end": 1253, "chars": "',"}, {"char_start": 1254, "char_end": 1255, "chars": "'"}, {"char_start": 1257, "char_end": 1258, "chars": ","}, {"char_start": 1263, "char_end": 1264, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "test_create_modify_host", "func_src_before": "    def test_create_modify_host(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record\n        self.clear_mox()\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_cpg\",\n                       self.fake_get_cpg)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_domain\",\n                       self.fake_get_domain)\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_host_cmd = 'showhost -verbose fakehost'\n        _run_ssh(show_host_cmd, False).AndReturn([pack(NO_FC_HOST_RET), ''])\n\n        create_host_cmd = ('createhost -add fakehost '\n                           '123456789012345 123456789054321')\n        _run_ssh(create_host_cmd, False).AndReturn([CLI_CR, ''])\n\n        show_host_cmd = 'showhost -verbose fakehost'\n        _run_ssh(show_host_cmd, False).AndReturn([pack(FC_HOST_RET), ''])\n        self.mox.ReplayAll()\n\n        host = self.driver._create_host(self.volume, self.connector)\n        self.assertEqual(host['name'], self.FAKE_HOST)", "func_src_after": "    def test_create_modify_host(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record\n        self.clear_mox()\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_cpg\",\n                       self.fake_get_cpg)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_domain\",\n                       self.fake_get_domain)\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_host_cmd = ['showhost', '-verbose', 'fakehost']\n        _run_ssh(show_host_cmd, False).AndReturn([pack(NO_FC_HOST_RET), ''])\n\n        create_host_cmd = ['createhost', '-add', 'fakehost', '123456789012345',\n                           '123456789054321']\n        _run_ssh(create_host_cmd, False).AndReturn([CLI_CR, ''])\n\n        show_host_cmd = ['showhost', '-verbose', 'fakehost']\n        _run_ssh(show_host_cmd, False).AndReturn([pack(FC_HOST_RET), ''])\n        self.mox.ReplayAll()\n\n        host = self.driver._create_host(self.volume, self.connector)\n        self.assertEqual(host['name'], self.FAKE_HOST)", "line_changes": {"deleted": [{"line_no": 13, "char_start": 504, "char_end": 557, "line": "        show_host_cmd = 'showhost -verbose fakehost'\n"}, {"line_no": 16, "char_start": 635, "char_end": 690, "line": "        create_host_cmd = ('createhost -add fakehost '\n"}, {"line_no": 17, "char_start": 690, "char_end": 752, "line": "                           '123456789012345 123456789054321')\n"}, {"line_no": 20, "char_start": 818, "char_end": 871, "line": "        show_host_cmd = 'showhost -verbose fakehost'\n"}], "added": [{"line_no": 13, "char_start": 504, "char_end": 565, "line": "        show_host_cmd = ['showhost', '-verbose', 'fakehost']\n"}, {"line_no": 16, "char_start": 643, "char_end": 723, "line": "        create_host_cmd = ['createhost', '-add', 'fakehost', '123456789012345',\n"}, {"line_no": 17, "char_start": 723, "char_end": 769, "line": "                           '123456789054321']\n"}, {"line_no": 20, "char_start": 835, "char_end": 896, "line": "        show_host_cmd = ['showhost', '-verbose', 'fakehost']\n"}]}, "char_changes": {"deleted": [{"char_start": 661, "char_end": 662, "chars": "("}, {"char_start": 728, "char_end": 744, "chars": "12345 1234567890"}, {"char_start": 750, "char_end": 751, "chars": ")"}], "added": [{"char_start": 528, "char_end": 529, "chars": "["}, {"char_start": 538, "char_end": 540, "chars": "',"}, {"char_start": 541, "char_end": 542, "chars": "'"}, {"char_start": 550, "char_end": 552, "chars": "',"}, {"char_start": 553, "char_end": 554, "chars": "'"}, {"char_start": 563, "char_end": 564, "chars": "]"}, {"char_start": 669, "char_end": 670, "chars": "["}, {"char_start": 681, "char_end": 683, "chars": "',"}, {"char_start": 684, "char_end": 685, "chars": "'"}, {"char_start": 689, "char_end": 691, "chars": "',"}, {"char_start": 692, "char_end": 693, "chars": "'"}, {"char_start": 701, "char_end": 703, "chars": "',"}, {"char_start": 705, "char_end": 722, "chars": "123456789012345',"}, {"char_start": 767, "char_end": 768, "chars": "]"}, {"char_start": 859, "char_end": 860, "chars": "["}, {"char_start": 869, "char_end": 871, "chars": "',"}, {"char_start": 872, "char_end": 873, "chars": "'"}, {"char_start": 881, "char_end": 883, "chars": "',"}, {"char_start": 884, "char_end": 885, "chars": "'"}, {"char_start": 894, "char_end": 895, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/tests/test_hp3par.py", "vul_type": "cwe-078"}
{"func_name": "install", "func_src_before": "def install(filename, target):\n  '''Run a package's installer script against the given target directory.'''\n  print(' Unpacking %s...' % filename)\n  os.system('tar xf ' + filename)\n  basename = filename.split('.tar')[0]\n  print(' Installing %s...' % basename)\n  install_opts = '--prefix=${PWD}/%s --disable-ldconfig' % target\n  os.system('%s/install.sh %s' % (basename, install_opts))\n  print(' Cleaning %s...' % basename)\n  os.system('rm -rf %s' % basename)", "func_src_after": "def install(filename, target):\n  '''Run a package's installer script against the given target directory.'''\n  print(' Unpacking %s...' % filename)\n  subprocess.check_call(['tar', 'xf', filename])\n  basename = filename.split('.tar')[0]\n  print(' Installing %s...' % basename)\n  install_cmd = [os.path.join(basename, 'install.sh')]\n  install_cmd += ['--prefix=' + os.path.abspath(target)]\n  install_cmd += ['--disable-ldconfig']\n  subprocess.check_call(install_cmd)\n  print(' Cleaning %s...' % basename)\n  subprocess.check_call(['rm', '-rf', basename])", "line_changes": {"deleted": [{"line_no": 4, "char_start": 147, "char_end": 181, "line": "  os.system('tar xf ' + filename)\n"}, {"line_no": 7, "char_start": 260, "char_end": 326, "line": "  install_opts = '--prefix=${PWD}/%s --disable-ldconfig' % target\n"}, {"line_no": 8, "char_start": 326, "char_end": 385, "line": "  os.system('%s/install.sh %s' % (basename, install_opts))\n"}, {"line_no": 10, "char_start": 423, "char_end": 458, "line": "  os.system('rm -rf %s' % basename)\n"}], "added": [{"line_no": 4, "char_start": 147, "char_end": 196, "line": "  subprocess.check_call(['tar', 'xf', filename])\n"}, {"line_no": 7, "char_start": 275, "char_end": 330, "line": "  install_cmd = [os.path.join(basename, 'install.sh')]\n"}, {"line_no": 8, "char_start": 330, "char_end": 387, "line": "  install_cmd += ['--prefix=' + os.path.abspath(target)]\n"}, {"line_no": 9, "char_start": 387, "char_end": 427, "line": "  install_cmd += ['--disable-ldconfig']\n"}, {"line_no": 10, "char_start": 427, "char_end": 464, "line": "  subprocess.check_call(install_cmd)\n"}, {"line_no": 12, "char_start": 502, "char_end": 550, "line": "  subprocess.check_call(['rm', '-rf', basename])\n"}]}, "char_changes": {"deleted": [{"char_start": 149, "char_end": 150, "chars": "o"}, {"char_start": 151, "char_end": 152, "chars": "."}, {"char_start": 153, "char_end": 154, "chars": "y"}, {"char_start": 155, "char_end": 156, "chars": "t"}, {"char_start": 157, "char_end": 158, "chars": "m"}, {"char_start": 166, "char_end": 167, "chars": " "}, {"char_start": 168, "char_end": 170, "chars": " +"}, {"char_start": 287, "char_end": 295, "chars": "${PWD}/%"}, {"char_start": 317, "char_end": 318, "chars": "%"}, {"char_start": 319, "char_end": 321, "chars": "ta"}, {"char_start": 322, "char_end": 328, "chars": "get\n  "}, {"char_start": 329, "char_end": 335, "chars": "s.syst"}, {"char_start": 336, "char_end": 340, "chars": "m('%"}, {"char_start": 341, "char_end": 344, "chars": "/in"}, {"char_start": 345, "char_end": 349, "chars": "tall"}, {"char_start": 350, "char_end": 351, "chars": "s"}, {"char_start": 352, "char_end": 363, "chars": " %s' % (bas"}, {"char_start": 364, "char_end": 365, "chars": "n"}, {"char_start": 366, "char_end": 370, "chars": "me, "}, {"char_start": 378, "char_end": 383, "chars": "opts)"}, {"char_start": 426, "char_end": 428, "chars": "s."}, {"char_start": 429, "char_end": 430, "chars": "y"}, {"char_start": 431, "char_end": 432, "chars": "t"}, {"char_start": 433, "char_end": 434, "chars": "m"}, {"char_start": 442, "char_end": 445, "chars": " %s"}, {"char_start": 446, "char_end": 448, "chars": " %"}], "added": [{"char_start": 149, "char_end": 154, "chars": "subpr"}, {"char_start": 155, "char_end": 158, "chars": "ces"}, {"char_start": 160, "char_end": 162, "chars": "ch"}, {"char_start": 163, "char_end": 170, "chars": "ck_call"}, {"char_start": 171, "char_end": 172, "chars": "["}, {"char_start": 176, "char_end": 178, "chars": "',"}, {"char_start": 179, "char_end": 180, "chars": "'"}, {"char_start": 183, "char_end": 184, "chars": ","}, {"char_start": 193, "char_end": 194, "chars": "]"}, {"char_start": 285, "char_end": 292, "chars": "cmd = ["}, {"char_start": 293, "char_end": 295, "chars": "s."}, {"char_start": 296, "char_end": 297, "chars": "a"}, {"char_start": 298, "char_end": 307, "chars": "h.join(ba"}, {"char_start": 308, "char_end": 314, "chars": "ename,"}, {"char_start": 315, "char_end": 345, "chars": "'install.sh')]\n  install_cmd +"}, {"char_start": 347, "char_end": 348, "chars": "["}, {"char_start": 358, "char_end": 391, "chars": "' + os.path.abspath(target)]\n  in"}, {"char_start": 392, "char_end": 400, "chars": "tall_cmd"}, {"char_start": 401, "char_end": 406, "chars": "+= ['"}, {"char_start": 425, "char_end": 427, "chars": "]\n"}, {"char_start": 429, "char_end": 433, "chars": "subp"}, {"char_start": 435, "char_end": 438, "chars": "ces"}, {"char_start": 440, "char_end": 442, "chars": "ch"}, {"char_start": 443, "char_end": 447, "chars": "ck_c"}, {"char_start": 459, "char_end": 462, "chars": "cmd"}, {"char_start": 504, "char_end": 509, "chars": "subpr"}, {"char_start": 510, "char_end": 512, "chars": "ce"}, {"char_start": 514, "char_end": 517, "chars": ".ch"}, {"char_start": 518, "char_end": 525, "chars": "ck_call"}, {"char_start": 526, "char_end": 527, "chars": "["}, {"char_start": 530, "char_end": 532, "chars": "',"}, {"char_start": 533, "char_end": 534, "chars": "'"}, {"char_start": 538, "char_end": 539, "chars": ","}, {"char_start": 548, "char_end": 549, "chars": "]"}]}, "commit_link": "github.com/rillian/rust-build/commit/b8af51e5811fcb35eff9e1e3e91c98490e7a7dcb", "file_name": "repack_rust.py", "vul_type": "cwe-078"}
{"func_name": "_get_least_used_nsp", "func_src_before": "    def _get_least_used_nsp(self, nspss):\n        \"\"\"\"Return the nsp that has the fewest active vluns.\"\"\"\n        # return only the nsp (node:server:port)\n        result = self.common._cli_run('showvlun -a -showcols Port', None)\n\n        # count the number of nsps (there is 1 for each active vlun)\n        nsp_counts = {}\n        for nsp in nspss:\n            # initialize counts to zero\n            nsp_counts[nsp] = 0\n\n        current_least_used_nsp = None\n        if result:\n            # first line is header\n            result = result[1:]\n            for line in result:\n                nsp = line.strip()\n                if nsp in nsp_counts:\n                    nsp_counts[nsp] = nsp_counts[nsp] + 1\n\n            # identify key (nsp) of least used nsp\n            current_smallest_count = sys.maxint\n            for (nsp, count) in nsp_counts.iteritems():\n                if count < current_smallest_count:\n                    current_least_used_nsp = nsp\n                    current_smallest_count = count\n\n        return current_least_used_nsp", "func_src_after": "    def _get_least_used_nsp(self, nspss):\n        \"\"\"\"Return the nsp that has the fewest active vluns.\"\"\"\n        # return only the nsp (node:server:port)\n        result = self.common._cli_run(['showvlun', '-a', '-showcols', 'Port'])\n\n        # count the number of nsps (there is 1 for each active vlun)\n        nsp_counts = {}\n        for nsp in nspss:\n            # initialize counts to zero\n            nsp_counts[nsp] = 0\n\n        current_least_used_nsp = None\n        if result:\n            # first line is header\n            result = result[1:]\n            for line in result:\n                nsp = line.strip()\n                if nsp in nsp_counts:\n                    nsp_counts[nsp] = nsp_counts[nsp] + 1\n\n            # identify key (nsp) of least used nsp\n            current_smallest_count = sys.maxint\n            for (nsp, count) in nsp_counts.iteritems():\n                if count < current_smallest_count:\n                    current_least_used_nsp = nsp\n                    current_smallest_count = count\n\n        return current_least_used_nsp", "line_changes": {"deleted": [{"line_no": 4, "char_start": 155, "char_end": 229, "line": "        result = self.common._cli_run('showvlun -a -showcols Port', None)\n"}], "added": [{"line_no": 4, "char_start": 155, "char_end": 234, "line": "        result = self.common._cli_run(['showvlun', '-a', '-showcols', 'Port'])\n"}]}, "char_changes": {"deleted": [{"char_start": 221, "char_end": 227, "chars": ", None"}], "added": [{"char_start": 193, "char_end": 194, "chars": "["}, {"char_start": 203, "char_end": 205, "chars": "',"}, {"char_start": 206, "char_end": 207, "chars": "'"}, {"char_start": 209, "char_end": 211, "chars": "',"}, {"char_start": 212, "char_end": 213, "chars": "'"}, {"char_start": 222, "char_end": 224, "chars": "',"}, {"char_start": 225, "char_end": 226, "chars": "'"}, {"char_start": 231, "char_end": 232, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_iscsi.py", "vul_type": "cwe-078"}
{"func_name": "_start_fc_map", "func_src_before": "    def _start_fc_map(self, fc_map_id, source, target):\n        try:\n            out, err = self._run_ssh('svctask startfcmap %s' % fc_map_id)\n        except exception.ProcessExecutionError as e:\n            with excutils.save_and_reraise_exception():\n                LOG.error(_('_start_fc_map: Failed to start FlashCopy '\n                            'from %(source)s to %(target)s.\\n'\n                            'stdout: %(out)s\\n stderr: %(err)s')\n                          % {'source': source,\n                             'target': target,\n                             'out': e.stdout,\n                             'err': e.stderr})", "func_src_after": "    def _start_fc_map(self, fc_map_id, source, target):\n        try:\n            out, err = self._run_ssh(['svctask', 'startfcmap', fc_map_id])\n        except exception.ProcessExecutionError as e:\n            with excutils.save_and_reraise_exception():\n                LOG.error(_('_start_fc_map: Failed to start FlashCopy '\n                            'from %(source)s to %(target)s.\\n'\n                            'stdout: %(out)s\\n stderr: %(err)s')\n                          % {'source': source,\n                             'target': target,\n                             'out': e.stdout,\n                             'err': e.stderr})", "line_changes": {"deleted": [{"line_no": 3, "char_start": 69, "char_end": 143, "line": "            out, err = self._run_ssh('svctask startfcmap %s' % fc_map_id)\n"}], "added": [{"line_no": 3, "char_start": 69, "char_end": 144, "line": "            out, err = self._run_ssh(['svctask', 'startfcmap', fc_map_id])\n"}]}, "char_changes": {"deleted": [{"char_start": 125, "char_end": 128, "chars": " %s"}, {"char_start": 129, "char_end": 131, "chars": " %"}], "added": [{"char_start": 106, "char_end": 107, "chars": "["}, {"char_start": 115, "char_end": 117, "chars": "',"}, {"char_start": 118, "char_end": 119, "chars": "'"}, {"char_start": 130, "char_end": 131, "chars": ","}, {"char_start": 141, "char_end": 142, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "resolve_hostname", "func_src_before": "@then(parsers.parse(\"the hostname '{hostname}' should be resolved\"))\ndef resolve_hostname(busybox_pod, host, hostname):\n        with host.sudo():\n            # test dns resolve\n            cmd_nslookup = (\"kubectl --kubeconfig=/etc/kubernetes/admin.conf\"\n                            \" exec -ti {0} nslookup {1}\".format(\n                                pod_name,\n                                hostname))\n            res = host.run(cmd_nslookup)\n            assert res.rc == 0, \"Cannot resolve {}\".format(hostname)", "func_src_after": "@then(parsers.parse(\"the hostname '{hostname}' should be resolved\"))\ndef resolve_hostname(busybox_pod, host, hostname):\n    with host.sudo():\n        # test dns resolve\n        result = host.run(\n            \"kubectl --kubeconfig=/etc/kubernetes/admin.conf \"\n            \"exec -ti %s nslookup %s\",\n            busybox_pod,\n            hostname,\n        )\n\n        assert result.rc == 0, \"Cannot resolve {}\".format(hostname)", "line_changes": {"deleted": [{"line_no": 3, "char_start": 120, "char_end": 146, "line": "        with host.sudo():\n"}, {"line_no": 5, "char_start": 177, "char_end": 255, "line": "            cmd_nslookup = (\"kubectl --kubeconfig=/etc/kubernetes/admin.conf\"\n"}, {"line_no": 6, "char_start": 255, "char_end": 320, "line": "                            \" exec -ti {0} nslookup {1}\".format(\n"}, {"line_no": 7, "char_start": 320, "char_end": 362, "line": "                                pod_name,\n"}, {"line_no": 8, "char_start": 362, "char_end": 405, "line": "                                hostname))\n"}, {"line_no": 9, "char_start": 405, "char_end": 446, "line": "            res = host.run(cmd_nslookup)\n"}, {"line_no": 10, "char_start": 446, "char_end": 514, "line": "            assert res.rc == 0, \"Cannot resolve {}\".format(hostname)\n"}], "added": [{"line_no": 3, "char_start": 120, "char_end": 142, "line": "    with host.sudo():\n"}, {"line_no": 5, "char_start": 169, "char_end": 196, "line": "        result = host.run(\n"}, {"line_no": 6, "char_start": 196, "char_end": 259, "line": "            \"kubectl --kubeconfig=/etc/kubernetes/admin.conf \"\n"}, {"line_no": 7, "char_start": 259, "char_end": 298, "line": "            \"exec -ti %s nslookup %s\",\n"}, {"line_no": 8, "char_start": 298, "char_end": 323, "line": "            busybox_pod,\n"}, {"line_no": 9, "char_start": 323, "char_end": 345, "line": "            hostname,\n"}, {"line_no": 10, "char_start": 345, "char_end": 355, "line": "        )\n"}, {"line_no": 11, "char_start": 355, "char_end": 356, "line": "\n"}, {"line_no": 12, "char_start": 356, "char_end": 423, "line": "        assert result.rc == 0, \"Cannot resolve {}\".format(hostname)"}]}, "char_changes": {"deleted": [{"char_start": 124, "char_end": 128, "chars": "    "}, {"char_start": 146, "char_end": 150, "chars": "    "}, {"char_start": 189, "char_end": 201, "chars": "cmd_nslookup"}, {"char_start": 202, "char_end": 203, "chars": "="}, {"char_start": 204, "char_end": 205, "chars": "("}, {"char_start": 255, "char_end": 265, "chars": "          "}, {"char_start": 277, "char_end": 283, "chars": "      "}, {"char_start": 284, "char_end": 285, "chars": " "}, {"char_start": 294, "char_end": 297, "chars": "{0}"}, {"char_start": 307, "char_end": 310, "chars": "{1}"}, {"char_start": 311, "char_end": 319, "chars": ".format("}, {"char_start": 332, "char_end": 352, "chars": "                    "}, {"char_start": 355, "char_end": 360, "chars": "_name"}, {"char_start": 374, "char_end": 394, "chars": "                    "}, {"char_start": 402, "char_end": 404, "chars": "))"}, {"char_start": 405, "char_end": 406, "chars": " "}, {"char_start": 414, "char_end": 444, "chars": "   res = host.run(cmd_nslookup"}, {"char_start": 446, "char_end": 450, "chars": "    "}], "added": [{"char_start": 177, "char_end": 179, "chars": "re"}, {"char_start": 180, "char_end": 181, "chars": "u"}, {"char_start": 182, "char_end": 187, "chars": "t = h"}, {"char_start": 188, "char_end": 192, "chars": "st.r"}, {"char_start": 193, "char_end": 206, "chars": "n(\n          "}, {"char_start": 256, "char_end": 257, "chars": " "}, {"char_start": 281, "char_end": 283, "chars": "%s"}, {"char_start": 293, "char_end": 295, "chars": "%s"}, {"char_start": 296, "char_end": 297, "chars": ","}, {"char_start": 310, "char_end": 318, "chars": "busybox_"}, {"char_start": 343, "char_end": 344, "chars": ","}, {"char_start": 355, "char_end": 356, "chars": "\n"}, {"char_start": 374, "char_end": 377, "chars": "ult"}]}, "commit_link": "github.com/scality/metalk8s/commit/82d92836d4ff78c623a0e06302c94cfa5ff79908", "file_name": "tests/post/steps/test_dns.py", "vul_type": "cwe-078"}
{"func_name": "_modify_3par_fibrechan_host", "func_src_before": "    def _modify_3par_fibrechan_host(self, hostname, wwn):\n        # when using -add, you can not send the persona or domain options\n        out = self.common._cli_run('createhost -add %s %s'\n                                   % (hostname, \" \".join(wwn)), None)", "func_src_after": "    def _modify_3par_fibrechan_host(self, hostname, wwns):\n        # when using -add, you can not send the persona or domain options\n        command = ['createhost', '-add', hostname]\n        for wwn in wwns:\n            command.append(wwn)\n\n        out = self.common._cli_run(command)", "line_changes": {"deleted": [{"line_no": 1, "char_start": 0, "char_end": 58, "line": "    def _modify_3par_fibrechan_host(self, hostname, wwn):\n"}, {"line_no": 3, "char_start": 132, "char_end": 191, "line": "        out = self.common._cli_run('createhost -add %s %s'\n"}, {"line_no": 4, "char_start": 191, "char_end": 260, "line": "                                   % (hostname, \" \".join(wwn)), None)\n"}], "added": [{"line_no": 1, "char_start": 0, "char_end": 59, "line": "    def _modify_3par_fibrechan_host(self, hostname, wwns):\n"}, {"line_no": 3, "char_start": 133, "char_end": 184, "line": "        command = ['createhost', '-add', hostname]\n"}, {"line_no": 4, "char_start": 184, "char_end": 209, "line": "        for wwn in wwns:\n"}, {"line_no": 5, "char_start": 209, "char_end": 241, "line": "            command.append(wwn)\n"}, {"line_no": 6, "char_start": 241, "char_end": 242, "line": "\n"}, {"line_no": 7, "char_start": 242, "char_end": 285, "line": "        out = self.common._cli_run(command)\n"}]}, "char_changes": {"deleted": [{"char_start": 58, "char_end": 58, "chars": ""}, {"char_start": 140, "char_end": 151, "chars": "out = self."}, {"char_start": 155, "char_end": 156, "chars": "o"}, {"char_start": 157, "char_end": 167, "chars": "._cli_run("}, {"char_start": 184, "char_end": 188, "chars": "%s %"}, {"char_start": 189, "char_end": 190, "chars": "'"}, {"char_start": 191, "char_end": 194, "chars": "   "}, {"char_start": 202, "char_end": 204, "chars": "  "}, {"char_start": 226, "char_end": 230, "chars": "% (h"}, {"char_start": 231, "char_end": 232, "chars": "s"}, {"char_start": 233, "char_end": 238, "chars": "name,"}, {"char_start": 239, "char_end": 240, "chars": "\""}, {"char_start": 241, "char_end": 242, "chars": "\""}, {"char_start": 243, "char_end": 244, "chars": "j"}, {"char_start": 248, "char_end": 256, "chars": "wwn)), N"}, {"char_start": 258, "char_end": 259, "chars": "e"}], "added": [{"char_start": 55, "char_end": 56, "chars": "s"}, {"char_start": 145, "char_end": 146, "chars": "a"}, {"char_start": 147, "char_end": 152, "chars": "d = ["}, {"char_start": 163, "char_end": 165, "chars": "',"}, {"char_start": 166, "char_end": 167, "chars": "'"}, {"char_start": 171, "char_end": 173, "chars": "',"}, {"char_start": 174, "char_end": 176, "chars": "ho"}, {"char_start": 177, "char_end": 183, "chars": "tname]"}, {"char_start": 192, "char_end": 195, "chars": "for"}, {"char_start": 196, "char_end": 199, "chars": "wwn"}, {"char_start": 200, "char_end": 202, "chars": "in"}, {"char_start": 203, "char_end": 209, "chars": "wwns:\n"}, {"char_start": 221, "char_end": 242, "chars": "command.append(wwn)\n\n"}, {"char_start": 251, "char_end": 252, "chars": "u"}, {"char_start": 254, "char_end": 255, "chars": "="}, {"char_start": 256, "char_end": 260, "chars": "self"}, {"char_start": 261, "char_end": 265, "chars": "comm"}, {"char_start": 266, "char_end": 271, "chars": "n._cl"}, {"char_start": 272, "char_end": 275, "chars": "_ru"}, {"char_start": 277, "char_end": 278, "chars": "c"}, {"char_start": 279, "char_end": 282, "chars": "mma"}, {"char_start": 283, "char_end": 284, "chars": "d"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_fc.py", "vul_type": "cwe-078"}
{"func_name": "test_settings_path_skip_issue_909", "func_src_before": "def test_settings_path_skip_issue_909(tmpdir):\n    base_dir = tmpdir.mkdir('project')\n    config_dir = base_dir.mkdir('conf')\n    config_dir.join('.isort.cfg').write('[isort]\\n'\n                                        'skip =\\n'\n                                        '    file_to_be_skipped.py\\n'\n                                        'skip_glob =\\n'\n                                        '    *glob_skip*\\n')\n\n    base_dir.join('file_glob_skip.py').write('import os\\n'\n                                             '\\n'\n                                             'print(\"Hello World\")\\n'\n                                             '\\n'\n                                             'import sys\\n')\n    base_dir.join('file_to_be_skipped.py').write('import os\\n'\n                                                 '\\n'\n                                                 'print(\"Hello World\")'\n                                                 '\\n'\n                                                 'import sys\\n')\n\n    test_run_directory = os.getcwd()\n    os.chdir(str(base_dir))\n    with pytest.raises(Exception):  # without the settings path provided: the command should not skip & identify errors\n        check_output(['isort', '--check-only'])\n    results = check_output(['isort', '--check-only', '--settings-path=conf/.isort.cfg'])\n    os.chdir(str(test_run_directory))\n\n    assert b'skipped 2' in results.lower()", "func_src_after": "def test_settings_path_skip_issue_909(tmpdir):\n    base_dir = tmpdir.mkdir('project')\n    config_dir = base_dir.mkdir('conf')\n    config_dir.join('.isort.cfg').write('[isort]\\n'\n                                        'skip =\\n'\n                                        '    file_to_be_skipped.py\\n'\n                                        'skip_glob =\\n'\n                                        '    *glob_skip*\\n')\n\n    base_dir.join('file_glob_skip.py').write('import os\\n'\n                                             '\\n'\n                                             'print(\"Hello World\")\\n'\n                                             '\\n'\n                                             'import sys\\n')\n    base_dir.join('file_to_be_skipped.py').write('import os\\n'\n                                                 '\\n'\n                                                 'print(\"Hello World\")'\n                                                 '\\n'\n                                                 'import sys\\n')\n\n    test_run_directory = os.getcwd()\n    os.chdir(str(base_dir))\n    with pytest.raises(Exception):  # without the settings path provided: the command should not skip & identify errors\n        subprocess.run(['isort', '--check-only'], check=True)\n    result = subprocess.run(\n        ['isort', '--check-only', '--settings-path=conf/.isort.cfg'],\n        stdout=subprocess.PIPE,\n        check=True\n    )\n    os.chdir(str(test_run_directory))\n\n    assert b'skipped 2' in result.stdout.lower()", "line_changes": {"deleted": [{"line_no": 24, "char_start": 1201, "char_end": 1249, "line": "        check_output(['isort', '--check-only'])\n"}, {"line_no": 25, "char_start": 1249, "char_end": 1338, "line": "    results = check_output(['isort', '--check-only', '--settings-path=conf/.isort.cfg'])\n"}, {"line_no": 28, "char_start": 1377, "char_end": 1419, "line": "    assert b'skipped 2' in results.lower()\n"}], "added": [{"line_no": 24, "char_start": 1201, "char_end": 1263, "line": "        subprocess.run(['isort', '--check-only'], check=True)\n"}, {"line_no": 25, "char_start": 1263, "char_end": 1292, "line": "    result = subprocess.run(\n"}, {"line_no": 26, "char_start": 1292, "char_end": 1362, "line": "        ['isort', '--check-only', '--settings-path=conf/.isort.cfg'],\n"}, {"line_no": 27, "char_start": 1362, "char_end": 1394, "line": "        stdout=subprocess.PIPE,\n"}, {"line_no": 28, "char_start": 1394, "char_end": 1413, "line": "        check=True\n"}, {"line_no": 29, "char_start": 1413, "char_end": 1419, "line": "    )\n"}, {"line_no": 32, "char_start": 1458, "char_end": 1506, "line": "    assert b'skipped 2' in result.stdout.lower()\n"}]}, "char_changes": {"deleted": [{"char_start": 1209, "char_end": 1216, "chars": "check_o"}, {"char_start": 1217, "char_end": 1218, "chars": "t"}, {"char_start": 1220, "char_end": 1221, "chars": "t"}, {"char_start": 1259, "char_end": 1260, "chars": "s"}, {"char_start": 1264, "char_end": 1265, "chars": "h"}, {"char_start": 1266, "char_end": 1273, "chars": "ck_outp"}, {"char_start": 1274, "char_end": 1275, "chars": "t"}], "added": [{"char_start": 1209, "char_end": 1215, "chars": "subpro"}, {"char_start": 1217, "char_end": 1221, "chars": "ss.r"}, {"char_start": 1222, "char_end": 1223, "chars": "n"}, {"char_start": 1249, "char_end": 1261, "chars": ", check=True"}, {"char_start": 1276, "char_end": 1282, "chars": "subpro"}, {"char_start": 1284, "char_end": 1288, "chars": "ss.r"}, {"char_start": 1289, "char_end": 1290, "chars": "n"}, {"char_start": 1291, "char_end": 1300, "chars": "\n        "}, {"char_start": 1360, "char_end": 1417, "chars": ",\n        stdout=subprocess.PIPE,\n        check=True\n    "}, {"char_start": 1491, "char_end": 1492, "chars": "."}, {"char_start": 1493, "char_end": 1498, "chars": "tdout"}]}, "commit_link": "github.com/timothycrosley/isort/commit/1ab38f4f7840a3c19bf961a24630a992a8373a76", "file_name": "test_isort.py", "vul_type": "cwe-078"}
{"func_name": "_create_3par_fibrechan_host", "func_src_before": "    def _create_3par_fibrechan_host(self, hostname, wwn, domain, persona_id):\n        \"\"\"Create a 3PAR host.\n\n        Create a 3PAR host, if there is already a host on the 3par using\n        the same wwn but with a different hostname, return the hostname\n        used by 3PAR.\n        \"\"\"\n        out = self.common._cli_run('createhost -persona %s -domain %s %s %s'\n                                   % (persona_id, domain,\n                                      hostname, \" \".join(wwn)), None)\n        if out and len(out) > 1:\n            return self.common.parse_create_host_error(hostname, out)\n\n        return hostname", "func_src_after": "    def _create_3par_fibrechan_host(self, hostname, wwns, domain, persona_id):\n        \"\"\"Create a 3PAR host.\n\n        Create a 3PAR host, if there is already a host on the 3par using\n        the same wwn but with a different hostname, return the hostname\n        used by 3PAR.\n        \"\"\"\n        command = ['createhost', '-persona', persona_id, '-domain', domain,\n                   hostname]\n        for wwn in wwns:\n            command.append(wwn)\n\n        out = self.common._cli_run(command)\n        if out and len(out) > 1:\n            return self.common.parse_create_host_error(hostname, out)\n\n        return hostname", "line_changes": {"deleted": [{"line_no": 1, "char_start": 0, "char_end": 78, "line": "    def _create_3par_fibrechan_host(self, hostname, wwn, domain, persona_id):\n"}, {"line_no": 8, "char_start": 289, "char_end": 366, "line": "        out = self.common._cli_run('createhost -persona %s -domain %s %s %s'\n"}, {"line_no": 9, "char_start": 366, "char_end": 424, "line": "                                   % (persona_id, domain,\n"}, {"line_no": 10, "char_start": 424, "char_end": 494, "line": "                                      hostname, \" \".join(wwn)), None)\n"}], "added": [{"line_no": 1, "char_start": 0, "char_end": 79, "line": "    def _create_3par_fibrechan_host(self, hostname, wwns, domain, persona_id):\n"}, {"line_no": 8, "char_start": 290, "char_end": 366, "line": "        command = ['createhost', '-persona', persona_id, '-domain', domain,\n"}, {"line_no": 9, "char_start": 366, "char_end": 395, "line": "                   hostname]\n"}, {"line_no": 10, "char_start": 395, "char_end": 420, "line": "        for wwn in wwns:\n"}, {"line_no": 11, "char_start": 420, "char_end": 452, "line": "            command.append(wwn)\n"}, {"line_no": 12, "char_start": 452, "char_end": 453, "line": "\n"}, {"line_no": 13, "char_start": 453, "char_end": 497, "line": "        out = self.common._cli_run(command)\n"}]}, "char_changes": {"deleted": [{"char_start": 297, "char_end": 308, "chars": "out = self."}, {"char_start": 312, "char_end": 313, "chars": "o"}, {"char_start": 314, "char_end": 324, "chars": "._cli_run("}, {"char_start": 345, "char_end": 346, "chars": "%"}, {"char_start": 356, "char_end": 365, "chars": "%s %s %s'"}, {"char_start": 366, "char_end": 373, "chars": "       "}, {"char_start": 392, "char_end": 407, "chars": "         % (per"}, {"char_start": 408, "char_end": 409, "chars": "o"}, {"char_start": 411, "char_end": 418, "chars": "_id, do"}, {"char_start": 419, "char_end": 423, "chars": "ain,"}, {"char_start": 456, "char_end": 461, "chars": "     "}, {"char_start": 462, "char_end": 464, "chars": "ho"}, {"char_start": 465, "char_end": 469, "chars": "tnam"}, {"char_start": 470, "char_end": 475, "chars": ", \" \""}, {"char_start": 476, "char_end": 477, "chars": "j"}, {"char_start": 481, "char_end": 489, "chars": "wwn)), N"}, {"char_start": 491, "char_end": 492, "chars": "e"}], "added": [{"char_start": 55, "char_end": 56, "chars": "s"}, {"char_start": 302, "char_end": 303, "chars": "a"}, {"char_start": 304, "char_end": 309, "chars": "d = ["}, {"char_start": 320, "char_end": 322, "chars": "',"}, {"char_start": 323, "char_end": 324, "chars": "'"}, {"char_start": 332, "char_end": 334, "chars": "',"}, {"char_start": 335, "char_end": 338, "chars": "per"}, {"char_start": 339, "char_end": 346, "chars": "ona_id,"}, {"char_start": 347, "char_end": 348, "chars": "'"}, {"char_start": 355, "char_end": 357, "chars": "',"}, {"char_start": 358, "char_end": 365, "chars": "domain,"}, {"char_start": 385, "char_end": 387, "chars": "ho"}, {"char_start": 388, "char_end": 389, "chars": "t"}, {"char_start": 392, "char_end": 394, "chars": "e]"}, {"char_start": 403, "char_end": 406, "chars": "for"}, {"char_start": 407, "char_end": 410, "chars": "wwn"}, {"char_start": 411, "char_end": 413, "chars": "in"}, {"char_start": 414, "char_end": 420, "chars": "wwns:\n"}, {"char_start": 432, "char_end": 453, "chars": "command.append(wwn)\n\n"}, {"char_start": 462, "char_end": 463, "chars": "u"}, {"char_start": 465, "char_end": 466, "chars": "="}, {"char_start": 467, "char_end": 471, "chars": "self"}, {"char_start": 472, "char_end": 476, "chars": "comm"}, {"char_start": 477, "char_end": 482, "chars": "n._cl"}, {"char_start": 483, "char_end": 486, "chars": "_ru"}, {"char_start": 488, "char_end": 489, "chars": "c"}, {"char_start": 490, "char_end": 493, "chars": "mma"}, {"char_start": 494, "char_end": 495, "chars": "d"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_fc.py", "vul_type": "cwe-078"}
{"func_name": "take_bug_report", "func_src_before": "    def take_bug_report(self, test_name, begin_time):\n        \"\"\"Takes a bug report on the device and stores it in a file.\n\n        Args:\n            test_name: Name of the test case that triggered this bug report.\n            begin_time: Logline format timestamp taken when the test started.\n        \"\"\"\n        new_br = True\n        try:\n            stdout = self.adb.shell('bugreportz -v').decode('utf-8')\n            # This check is necessary for builds before N, where adb shell's ret\n            # code and stderr are not propagated properly.\n            if 'not found' in stdout:\n                new_br = False\n        except adb.AdbError:\n            new_br = False\n        br_path = os.path.join(self.log_path, 'BugReports')\n        utils.create_dir(br_path)\n        base_name = ',%s,%s.txt' % (begin_time, self.serial)\n        if new_br:\n            base_name = base_name.replace('.txt', '.zip')\n        test_name_len = utils.MAX_FILENAME_LEN - len(base_name)\n        out_name = test_name[:test_name_len] + base_name\n        full_out_path = os.path.join(br_path, out_name.replace(' ', r'\\ '))\n        # in case device restarted, wait for adb interface to return\n        self.wait_for_boot_completion()\n        self.log.info('Taking bugreport for %s.', test_name)\n        if new_br:\n            out = self.adb.shell('bugreportz').decode('utf-8')\n            if not out.startswith('OK'):\n                raise DeviceError(self, 'Failed to take bugreport: %s' % out)\n            br_out_path = out.split(':')[1].strip()\n            self.adb.pull('%s %s' % (br_out_path, full_out_path))\n        else:\n            self.adb.bugreport(' > %s' % full_out_path)\n        self.log.info('Bugreport for %s taken at %s.', test_name,\n                      full_out_path)", "func_src_after": "    def take_bug_report(self, test_name, begin_time):\n        \"\"\"Takes a bug report on the device and stores it in a file.\n\n        Args:\n            test_name: Name of the test case that triggered this bug report.\n            begin_time: Logline format timestamp taken when the test started.\n        \"\"\"\n        new_br = True\n        try:\n            stdout = self.adb.shell('bugreportz -v').decode('utf-8')\n            # This check is necessary for builds before N, where adb shell's ret\n            # code and stderr are not propagated properly.\n            if 'not found' in stdout:\n                new_br = False\n        except adb.AdbError:\n            new_br = False\n        br_path = os.path.join(self.log_path, 'BugReports')\n        utils.create_dir(br_path)\n        base_name = ',%s,%s.txt' % (begin_time, self.serial)\n        if new_br:\n            base_name = base_name.replace('.txt', '.zip')\n        test_name_len = utils.MAX_FILENAME_LEN - len(base_name)\n        out_name = test_name[:test_name_len] + base_name\n        full_out_path = os.path.join(br_path, out_name.replace(' ', r'\\ '))\n        # in case device restarted, wait for adb interface to return\n        self.wait_for_boot_completion()\n        self.log.info('Taking bugreport for %s.', test_name)\n        if new_br:\n            out = self.adb.shell('bugreportz').decode('utf-8')\n            if not out.startswith('OK'):\n                raise DeviceError(self, 'Failed to take bugreport: %s' % out)\n            br_out_path = out.split(':')[1].strip()\n            self.adb.pull([br_out_path, full_out_path])\n        else:\n            # shell=True as this command redirects the stdout to a local file\n            # using shell redirection.\n            self.adb.bugreport(' > %s' % full_out_path, shell=True)\n        self.log.info('Bugreport for %s taken at %s.', test_name,\n                      full_out_path)", "line_changes": {"deleted": [{"line_no": 33, "char_start": 1526, "char_end": 1592, "line": "            self.adb.pull('%s %s' % (br_out_path, full_out_path))\n"}, {"line_no": 35, "char_start": 1606, "char_end": 1662, "line": "            self.adb.bugreport(' > %s' % full_out_path)\n"}], "added": [{"line_no": 33, "char_start": 1526, "char_end": 1582, "line": "            self.adb.pull([br_out_path, full_out_path])\n"}, {"line_no": 37, "char_start": 1713, "char_end": 1781, "line": "            self.adb.bugreport(' > %s' % full_out_path, shell=True)\n"}]}, "char_changes": {"deleted": [{"char_start": 1552, "char_end": 1563, "chars": "'%s %s' % ("}, {"char_start": 1589, "char_end": 1590, "chars": ")"}], "added": [{"char_start": 1552, "char_end": 1553, "chars": "["}, {"char_start": 1579, "char_end": 1580, "chars": "]"}, {"char_start": 1608, "char_end": 1725, "chars": "# shell=True as this command redirects the stdout to a local file\n            # using shell redirection.\n            "}, {"char_start": 1767, "char_end": 1779, "chars": ", shell=True"}]}, "commit_link": "github.com/google/mobly/commit/3862e8ba359040fbdd6e1a6d36e51d07cda8e1ee", "file_name": "mobly/controllers/android_device.py", "vul_type": "cwe-078"}
{"func_name": "test_create_invalid_host", "func_src_before": "    def test_create_invalid_host(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record\n        self.clear_mox()\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_cpg\",\n                       self.fake_get_cpg)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_domain\",\n                       self.fake_get_domain)\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_host_cmd = 'showhost -verbose fakehost'\n        _run_ssh(show_host_cmd, False).AndReturn([pack('no hosts listed'), ''])\n\n        create_host_cmd = ('createhost -iscsi -persona 1 -domain '\n                           '(\\'OpenStack\\',) '\n                           'fakehost iqn.1993-08.org.debian:01:222')\n        in_use_ret = pack('\\r\\nalready used by host fakehost.foo ')\n        _run_ssh(create_host_cmd, False).AndReturn([in_use_ret, ''])\n\n        show_3par_cmd = 'showhost -verbose fakehost.foo'\n        _run_ssh(show_3par_cmd, False).AndReturn([pack(ISCSI_3PAR_RET), ''])\n        self.mox.ReplayAll()\n\n        host = self.driver._create_host(self.volume, self.connector)\n\n        self.assertEquals(host['name'], 'fakehost.foo')", "func_src_after": "    def test_create_invalid_host(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record\n        self.clear_mox()\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_cpg\",\n                       self.fake_get_cpg)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"get_domain\",\n                       self.fake_get_domain)\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_host_cmd = ['showhost', '-verbose', 'fakehost']\n        _run_ssh(show_host_cmd, False).AndReturn([pack('no hosts listed'), ''])\n\n        create_host_cmd = (['createhost', '-iscsi', '-persona', '1', '-domain',\n                           ('OpenStack',), 'fakehost',\n                            'iqn.1993-08.org.debian:01:222'])\n        in_use_ret = pack('\\r\\nalready used by host fakehost.foo ')\n        _run_ssh(create_host_cmd, False).AndReturn([in_use_ret, ''])\n\n        show_3par_cmd = ['showhost', '-verbose', 'fakehost.foo']\n        _run_ssh(show_3par_cmd, False).AndReturn([pack(ISCSI_3PAR_RET), ''])\n        self.mox.ReplayAll()\n\n        host = self.driver._create_host(self.volume, self.connector)\n\n        self.assertEquals(host['name'], 'fakehost.foo')", "line_changes": {"deleted": [{"line_no": 13, "char_start": 505, "char_end": 558, "line": "        show_host_cmd = 'showhost -verbose fakehost'\n"}, {"line_no": 16, "char_start": 639, "char_end": 706, "line": "        create_host_cmd = ('createhost -iscsi -persona 1 -domain '\n"}, {"line_no": 17, "char_start": 706, "char_end": 753, "line": "                           '(\\'OpenStack\\',) '\n"}, {"line_no": 18, "char_start": 753, "char_end": 822, "line": "                           'fakehost iqn.1993-08.org.debian:01:222')\n"}, {"line_no": 22, "char_start": 960, "char_end": 1017, "line": "        show_3par_cmd = 'showhost -verbose fakehost.foo'\n"}], "added": [{"line_no": 13, "char_start": 505, "char_end": 566, "line": "        show_host_cmd = ['showhost', '-verbose', 'fakehost']\n"}, {"line_no": 16, "char_start": 647, "char_end": 727, "line": "        create_host_cmd = (['createhost', '-iscsi', '-persona', '1', '-domain',\n"}, {"line_no": 17, "char_start": 727, "char_end": 782, "line": "                           ('OpenStack',), 'fakehost',\n"}, {"line_no": 18, "char_start": 782, "char_end": 844, "line": "                            'iqn.1993-08.org.debian:01:222'])\n"}, {"line_no": 22, "char_start": 982, "char_end": 1047, "line": "        show_3par_cmd = ['showhost', '-verbose', 'fakehost.foo']\n"}]}, "char_changes": {"deleted": [{"char_start": 703, "char_end": 704, "chars": " "}, {"char_start": 733, "char_end": 734, "chars": "'"}, {"char_start": 735, "char_end": 736, "chars": "\\"}, {"char_start": 746, "char_end": 747, "chars": "\\"}, {"char_start": 780, "char_end": 789, "chars": "'fakehost"}], "added": [{"char_start": 529, "char_end": 530, "chars": "["}, {"char_start": 539, "char_end": 541, "chars": "',"}, {"char_start": 542, "char_end": 543, "chars": "'"}, {"char_start": 551, "char_end": 553, "chars": "',"}, {"char_start": 554, "char_end": 555, "chars": "'"}, {"char_start": 564, "char_end": 565, "chars": "]"}, {"char_start": 674, "char_end": 675, "chars": "["}, {"char_start": 686, "char_end": 688, "chars": "',"}, {"char_start": 689, "char_end": 690, "chars": "'"}, {"char_start": 696, "char_end": 698, "chars": "',"}, {"char_start": 699, "char_end": 700, "chars": "'"}, {"char_start": 708, "char_end": 710, "chars": "',"}, {"char_start": 711, "char_end": 712, "chars": "'"}, {"char_start": 713, "char_end": 715, "chars": "',"}, {"char_start": 716, "char_end": 717, "chars": "'"}, {"char_start": 725, "char_end": 726, "chars": ","}, {"char_start": 768, "char_end": 769, "chars": ","}, {"char_start": 771, "char_end": 781, "chars": "fakehost',"}, {"char_start": 782, "char_end": 783, "chars": " "}, {"char_start": 841, "char_end": 842, "chars": "]"}, {"char_start": 1006, "char_end": 1007, "chars": "["}, {"char_start": 1016, "char_end": 1018, "chars": "',"}, {"char_start": 1019, "char_end": 1020, "chars": "'"}, {"char_start": 1028, "char_end": 1030, "chars": "',"}, {"char_start": 1031, "char_end": 1032, "chars": "'"}, {"char_start": 1045, "char_end": 1046, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/tests/test_hp3par.py", "vul_type": "cwe-078"}
{"func_name": "__getattr__.adb_call", "func_src_before": "        def adb_call(*args):\n            clean_name = name.replace('_', '-')\n            arg_str = ' '.join(str(elem) for elem in args)\n            return self._exec_adb_cmd(clean_name, arg_str)", "func_src_after": "        def adb_call(args=None, shell=False):\n            \"\"\"Wrapper for an ADB command.\n\n            Args:\n                args: string or list of strings, arguments to the adb command.\n                    See subprocess.Proc() documentation.\n                shell: bool, True to run this command through the system shell,\n                    False to invoke it directly. See subprocess.Proc() docs.\n\n            Returns:\n                The output of the adb command run if exit code is 0.\n            \"\"\"\n            args = args or ''\n            clean_name = name.replace('_', '-')\n            return self._exec_adb_cmd(clean_name, args, shell=shell)", "line_changes": {"deleted": [{"line_no": 1, "char_start": 0, "char_end": 29, "line": "        def adb_call(*args):\n"}, {"line_no": 3, "char_start": 77, "char_end": 136, "line": "            arg_str = ' '.join(str(elem) for elem in args)\n"}, {"line_no": 4, "char_start": 136, "char_end": 194, "line": "            return self._exec_adb_cmd(clean_name, arg_str)\n"}], "added": [{"line_no": 1, "char_start": 0, "char_end": 46, "line": "        def adb_call(args=None, shell=False):\n"}, {"line_no": 2, "char_start": 46, "char_end": 89, "line": "            \"\"\"Wrapper for an ADB command.\n"}, {"line_no": 3, "char_start": 89, "char_end": 90, "line": "\n"}, {"line_no": 4, "char_start": 90, "char_end": 108, "line": "            Args:\n"}, {"line_no": 5, "char_start": 108, "char_end": 187, "line": "                args: string or list of strings, arguments to the adb command.\n"}, {"line_no": 6, "char_start": 187, "char_end": 244, "line": "                    See subprocess.Proc() documentation.\n"}, {"line_no": 7, "char_start": 244, "char_end": 324, "line": "                shell: bool, True to run this command through the system shell,\n"}, {"line_no": 8, "char_start": 324, "char_end": 401, "line": "                    False to invoke it directly. See subprocess.Proc() docs.\n"}, {"line_no": 9, "char_start": 401, "char_end": 402, "line": "\n"}, {"line_no": 10, "char_start": 402, "char_end": 423, "line": "            Returns:\n"}, {"line_no": 11, "char_start": 423, "char_end": 492, "line": "                The output of the adb command run if exit code is 0.\n"}, {"line_no": 12, "char_start": 492, "char_end": 508, "line": "            \"\"\"\n"}, {"line_no": 13, "char_start": 508, "char_end": 538, "line": "            args = args or ''\n"}, {"line_no": 15, "char_start": 586, "char_end": 654, "line": "            return self._exec_adb_cmd(clean_name, args, shell=shell)\n"}]}, "char_changes": {"deleted": [{"char_start": 21, "char_end": 22, "chars": "*"}, {"char_start": 42, "char_end": 44, "chars": "le"}, {"char_start": 46, "char_end": 47, "chars": "_"}, {"char_start": 52, "char_end": 53, "chars": "="}, {"char_start": 54, "char_end": 55, "chars": "n"}, {"char_start": 58, "char_end": 60, "chars": ".r"}, {"char_start": 62, "char_end": 64, "chars": "la"}, {"char_start": 67, "char_end": 71, "chars": "'_',"}, {"char_start": 72, "char_end": 76, "chars": "'-')"}, {"char_start": 92, "char_end": 93, "chars": "_"}, {"char_start": 95, "char_end": 96, "chars": "r"}, {"char_start": 97, "char_end": 98, "chars": "="}, {"char_start": 99, "char_end": 100, "chars": "'"}, {"char_start": 101, "char_end": 104, "chars": "'.j"}, {"char_start": 107, "char_end": 109, "chars": "(s"}, {"char_start": 111, "char_end": 112, "chars": "("}, {"char_start": 115, "char_end": 116, "chars": "m"}, {"char_start": 123, "char_end": 124, "chars": "l"}, {"char_start": 125, "char_end": 126, "chars": "m"}, {"char_start": 128, "char_end": 129, "chars": "n"}, {"char_start": 189, "char_end": 190, "chars": "_"}, {"char_start": 191, "char_end": 193, "chars": "tr"}], "added": [{"char_start": 25, "char_end": 43, "chars": "=None, shell=False"}, {"char_start": 58, "char_end": 66, "chars": "\"\"\"Wrapp"}, {"char_start": 67, "char_end": 73, "chars": "r for "}, {"char_start": 75, "char_end": 85, "chars": " ADB comma"}, {"char_start": 86, "char_end": 124, "chars": "d.\n\n            Args:\n                "}, {"char_start": 125, "char_end": 144, "chars": "rgs: string or list"}, {"char_start": 145, "char_end": 147, "chars": "of"}, {"char_start": 148, "char_end": 152, "chars": "stri"}, {"char_start": 153, "char_end": 157, "chars": "gs, "}, {"char_start": 158, "char_end": 161, "chars": "rgu"}, {"char_start": 163, "char_end": 185, "chars": "nts to the adb command"}, {"char_start": 186, "char_end": 208, "chars": "\n                    S"}, {"char_start": 209, "char_end": 214, "chars": "e sub"}, {"char_start": 215, "char_end": 217, "chars": "ro"}, {"char_start": 219, "char_end": 226, "chars": "ss.Proc"}, {"char_start": 227, "char_end": 228, "chars": ")"}, {"char_start": 229, "char_end": 243, "chars": "documentation."}, {"char_start": 244, "char_end": 249, "chars": "     "}, {"char_start": 260, "char_end": 284, "chars": "shell: bool, True to run"}, {"char_start": 285, "char_end": 294, "chars": "this comm"}, {"char_start": 295, "char_end": 300, "chars": "nd th"}, {"char_start": 301, "char_end": 303, "chars": "ou"}, {"char_start": 304, "char_end": 312, "chars": "h the sy"}, {"char_start": 314, "char_end": 339, "chars": "em shell,\n               "}, {"char_start": 342, "char_end": 351, "chars": "  False t"}, {"char_start": 352, "char_end": 353, "chars": " "}, {"char_start": 355, "char_end": 361, "chars": "voke i"}, {"char_start": 362, "char_end": 365, "chars": " di"}, {"char_start": 367, "char_end": 369, "chars": "ct"}, {"char_start": 370, "char_end": 374, "chars": "y. S"}, {"char_start": 375, "char_end": 393, "chars": "e subprocess.Proc("}, {"char_start": 395, "char_end": 396, "chars": "d"}, {"char_start": 397, "char_end": 418, "chars": "cs.\n\n            Retu"}, {"char_start": 419, "char_end": 426, "chars": "ns:\n   "}, {"char_start": 427, "char_end": 441, "chars": "            Th"}, {"char_start": 442, "char_end": 455, "chars": " output of th"}, {"char_start": 456, "char_end": 463, "chars": " adb co"}, {"char_start": 464, "char_end": 472, "chars": "mand run"}, {"char_start": 474, "char_end": 519, "chars": "f exit code is 0.\n            \"\"\"\n           "}, {"char_start": 524, "char_end": 584, "chars": " = args or ''\n            clean_name = name.replace('_', '-'"}, {"char_start": 639, "char_end": 648, "chars": "s, shell="}, {"char_start": 649, "char_end": 653, "chars": "hell"}]}, "commit_link": "github.com/google/mobly/commit/3862e8ba359040fbdd6e1a6d36e51d07cda8e1ee", "file_name": "mobly/controllers/android_device_lib/adb.py", "vul_type": "cwe-078"}
{"func_name": "test_skip_paths_issue_938", "func_src_before": "def test_skip_paths_issue_938(tmpdir):\n    base_dir = tmpdir.mkdir('project')\n    config_dir = base_dir.mkdir('conf')\n    config_dir.join('.isort.cfg').write('[isort]\\n'\n                                        'line_length = 88\\n'\n                                        'multi_line_output = 4\\n'\n                                        'lines_after_imports = 2\\n'\n                                        'skip_glob =\\n'\n                                        '    migrations/**.py\\n')\n    base_dir.join('dont_skip.py').write('import os\\n'\n                                        '\\n'\n                                        'print(\"Hello World\")'\n                                        '\\n'\n                                        'import sys\\n')\n\n    migrations_dir = base_dir.mkdir('migrations')\n    migrations_dir.join('file_glob_skip.py').write('import os\\n'\n                                                   '\\n'\n                                                   'print(\"Hello World\")\\n'\n                                                   '\\n'\n                                                   'import sys\\n')\n\n    test_run_directory = os.getcwd()\n    os.chdir(str(base_dir))\n    results = check_output(['isort', 'dont_skip.py', 'migrations/file_glob_skip.py'])\n    os.chdir(str(test_run_directory))\n\n    assert b'skipped' not in results.lower()\n\n    os.chdir(str(base_dir))\n    results = check_output(['isort', '--filter-files', '--settings-path=conf/.isort.cfg', 'dont_skip.py', 'migrations/file_glob_skip.py'])\n    os.chdir(str(test_run_directory))\n\n    assert b'skipped 1' in results.lower()", "func_src_after": "def test_skip_paths_issue_938(tmpdir):\n    base_dir = tmpdir.mkdir('project')\n    config_dir = base_dir.mkdir('conf')\n    config_dir.join('.isort.cfg').write('[isort]\\n'\n                                        'line_length = 88\\n'\n                                        'multi_line_output = 4\\n'\n                                        'lines_after_imports = 2\\n'\n                                        'skip_glob =\\n'\n                                        '    migrations/**.py\\n')\n    base_dir.join('dont_skip.py').write('import os\\n'\n                                        '\\n'\n                                        'print(\"Hello World\")'\n                                        '\\n'\n                                        'import sys\\n')\n\n    migrations_dir = base_dir.mkdir('migrations')\n    migrations_dir.join('file_glob_skip.py').write('import os\\n'\n                                                   '\\n'\n                                                   'print(\"Hello World\")\\n'\n                                                   '\\n'\n                                                   'import sys\\n')\n\n    test_run_directory = os.getcwd()\n    os.chdir(str(base_dir))\n    result = subprocess.run(\n        ['isort', 'dont_skip.py', 'migrations/file_glob_skip.py'],\n        stdout=subprocess.PIPE,\n        check=True,\n    )\n    os.chdir(str(test_run_directory))\n\n    assert b'skipped' not in result.stdout.lower()\n\n    os.chdir(str(base_dir))\n    result = subprocess.run(\n        ['isort', '--filter-files', '--settings-path=conf/.isort.cfg', 'dont_skip.py', 'migrations/file_glob_skip.py'],\n        stdout=subprocess.PIPE,\n        check=True,\n    )\n    os.chdir(str(test_run_directory))\n\n    assert b'skipped 1' in result.stdout.lower()", "line_changes": {"deleted": [{"line_no": 25, "char_start": 1187, "char_end": 1273, "line": "    results = check_output(['isort', 'dont_skip.py', 'migrations/file_glob_skip.py'])\n"}, {"line_no": 28, "char_start": 1312, "char_end": 1357, "line": "    assert b'skipped' not in results.lower()\n"}, {"line_no": 31, "char_start": 1386, "char_end": 1525, "line": "    results = check_output(['isort', '--filter-files', '--settings-path=conf/.isort.cfg', 'dont_skip.py', 'migrations/file_glob_skip.py'])\n"}, {"line_no": 34, "char_start": 1564, "char_end": 1606, "line": "    assert b'skipped 1' in results.lower()\n"}], "added": [{"line_no": 25, "char_start": 1187, "char_end": 1216, "line": "    result = subprocess.run(\n"}, {"line_no": 26, "char_start": 1216, "char_end": 1283, "line": "        ['isort', 'dont_skip.py', 'migrations/file_glob_skip.py'],\n"}, {"line_no": 27, "char_start": 1283, "char_end": 1315, "line": "        stdout=subprocess.PIPE,\n"}, {"line_no": 28, "char_start": 1315, "char_end": 1335, "line": "        check=True,\n"}, {"line_no": 29, "char_start": 1335, "char_end": 1341, "line": "    )\n"}, {"line_no": 32, "char_start": 1380, "char_end": 1431, "line": "    assert b'skipped' not in result.stdout.lower()\n"}, {"line_no": 35, "char_start": 1460, "char_end": 1489, "line": "    result = subprocess.run(\n"}, {"line_no": 36, "char_start": 1489, "char_end": 1609, "line": "        ['isort', '--filter-files', '--settings-path=conf/.isort.cfg', 'dont_skip.py', 'migrations/file_glob_skip.py'],\n"}, {"line_no": 37, "char_start": 1609, "char_end": 1641, "line": "        stdout=subprocess.PIPE,\n"}, {"line_no": 38, "char_start": 1641, "char_end": 1661, "line": "        check=True,\n"}, {"line_no": 39, "char_start": 1661, "char_end": 1667, "line": "    )\n"}, {"line_no": 42, "char_start": 1706, "char_end": 1754, "line": "    assert b'skipped 1' in result.stdout.lower()\n"}]}, "char_changes": {"deleted": [{"char_start": 1197, "char_end": 1198, "chars": "s"}, {"char_start": 1202, "char_end": 1203, "chars": "h"}, {"char_start": 1204, "char_end": 1211, "chars": "ck_outp"}, {"char_start": 1212, "char_end": 1213, "chars": "t"}, {"char_start": 1396, "char_end": 1397, "chars": "s"}, {"char_start": 1401, "char_end": 1402, "chars": "h"}, {"char_start": 1403, "char_end": 1410, "chars": "ck_outp"}, {"char_start": 1411, "char_end": 1412, "chars": "t"}], "added": [{"char_start": 1200, "char_end": 1206, "chars": "subpro"}, {"char_start": 1208, "char_end": 1212, "chars": "ss.r"}, {"char_start": 1213, "char_end": 1214, "chars": "n"}, {"char_start": 1215, "char_end": 1224, "chars": "\n        "}, {"char_start": 1281, "char_end": 1339, "chars": ",\n        stdout=subprocess.PIPE,\n        check=True,\n    "}, {"char_start": 1415, "char_end": 1416, "chars": "."}, {"char_start": 1417, "char_end": 1422, "chars": "tdout"}, {"char_start": 1473, "char_end": 1479, "chars": "subpro"}, {"char_start": 1481, "char_end": 1485, "chars": "ss.r"}, {"char_start": 1486, "char_end": 1487, "chars": "n"}, {"char_start": 1488, "char_end": 1497, "chars": "\n        "}, {"char_start": 1607, "char_end": 1665, "chars": ",\n        stdout=subprocess.PIPE,\n        check=True,\n    "}, {"char_start": 1739, "char_end": 1740, "chars": "."}, {"char_start": 1741, "char_end": 1746, "chars": "tdout"}]}, "commit_link": "github.com/timothycrosley/isort/commit/1ab38f4f7840a3c19bf961a24630a992a8373a76", "file_name": "test_isort.py", "vul_type": "cwe-078"}
{"func_name": "_ensure_vdisk_no_fc_mappings", "func_src_before": "    def _ensure_vdisk_no_fc_mappings(self, name, allow_snaps=True):\n        # Ensure vdisk has no FlashCopy mappings\n        mapping_ids = self._get_vdisk_fc_mappings(name)\n        while len(mapping_ids):\n            wait_for_copy = False\n            for map_id in mapping_ids:\n                attrs = self._get_flashcopy_mapping_attributes(map_id)\n                if not attrs:\n                    continue\n                source = attrs['source_vdisk_name']\n                target = attrs['target_vdisk_name']\n                copy_rate = attrs['copy_rate']\n                status = attrs['status']\n\n                if copy_rate == '0':\n                    # Case #2: A vdisk that has snapshots\n                    if source == name:\n                        if not allow_snaps:\n                            return False\n                        ssh_cmd = ('svctask chfcmap -copyrate 50 '\n                                   '-autodelete on %s' % map_id)\n                        out, err = self._run_ssh(ssh_cmd)\n                        wait_for_copy = True\n                    # Case #3: A snapshot\n                    else:\n                        msg = (_('Vdisk %(name)s not involved in '\n                                 'mapping %(src)s -> %(tgt)s') %\n                               {'name': name, 'src': source, 'tgt': target})\n                        self._driver_assert(target == name, msg)\n                        if status in ['copying', 'prepared']:\n                            self._run_ssh('svctask stopfcmap %s' % map_id)\n                        elif status in ['stopping', 'preparing']:\n                            wait_for_copy = True\n                        else:\n                            self._run_ssh('svctask rmfcmap -force %s' % map_id)\n                # Case 4: Copy in progress - wait and will autodelete\n                else:\n                    if status == 'prepared':\n                        self._run_ssh('svctask stopfcmap %s' % map_id)\n                        self._run_ssh('svctask rmfcmap -force %s' % map_id)\n                    elif status == 'idle_or_copied':\n                        # Prepare failed\n                        self._run_ssh('svctask rmfcmap -force %s' % map_id)\n                    else:\n                        wait_for_copy = True\n            if wait_for_copy:\n                time.sleep(5)\n            mapping_ids = self._get_vdisk_fc_mappings(name)\n        return True", "func_src_after": "    def _ensure_vdisk_no_fc_mappings(self, name, allow_snaps=True):\n        # Ensure vdisk has no FlashCopy mappings\n        mapping_ids = self._get_vdisk_fc_mappings(name)\n        while len(mapping_ids):\n            wait_for_copy = False\n            for map_id in mapping_ids:\n                attrs = self._get_flashcopy_mapping_attributes(map_id)\n                if not attrs:\n                    continue\n                source = attrs['source_vdisk_name']\n                target = attrs['target_vdisk_name']\n                copy_rate = attrs['copy_rate']\n                status = attrs['status']\n\n                if copy_rate == '0':\n                    # Case #2: A vdisk that has snapshots\n                    if source == name:\n                        if not allow_snaps:\n                            return False\n                        ssh_cmd = ['svctask', 'chfcmap', '-copyrate', '50',\n                                   '-autodelete', 'on', map_id]\n                        out, err = self._run_ssh(ssh_cmd)\n                        wait_for_copy = True\n                    # Case #3: A snapshot\n                    else:\n                        msg = (_('Vdisk %(name)s not involved in '\n                                 'mapping %(src)s -> %(tgt)s') %\n                               {'name': name, 'src': source, 'tgt': target})\n                        self._driver_assert(target == name, msg)\n                        if status in ['copying', 'prepared']:\n                            self._run_ssh(['svctask', 'stopfcmap', map_id])\n                        elif status in ['stopping', 'preparing']:\n                            wait_for_copy = True\n                        else:\n                            self._run_ssh(['svctask', 'rmfcmap', '-force',\n                                           map_id])\n                # Case 4: Copy in progress - wait and will autodelete\n                else:\n                    if status == 'prepared':\n                        self._run_ssh(['svctask', 'stopfcmap', map_id])\n                        self._run_ssh(['svctask', 'rmfcmap', '-force', map_id])\n                    elif status == 'idle_or_copied':\n                        # Prepare failed\n                        self._run_ssh(['svctask', 'rmfcmap', '-force', map_id])\n                    else:\n                        wait_for_copy = True\n            if wait_for_copy:\n                time.sleep(5)\n            mapping_ids = self._get_vdisk_fc_mappings(name)\n        return True", "line_changes": {"deleted": [{"line_no": 20, "char_start": 820, "char_end": 887, "line": "                        ssh_cmd = ('svctask chfcmap -copyrate 50 '\n"}, {"line_no": 21, "char_start": 887, "char_end": 952, "line": "                                   '-autodelete on %s' % map_id)\n"}, {"line_no": 31, "char_start": 1459, "char_end": 1534, "line": "                            self._run_ssh('svctask stopfcmap %s' % map_id)\n"}, {"line_no": 35, "char_start": 1679, "char_end": 1759, "line": "                            self._run_ssh('svctask rmfcmap -force %s' % map_id)\n"}, {"line_no": 39, "char_start": 1896, "char_end": 1967, "line": "                        self._run_ssh('svctask stopfcmap %s' % map_id)\n"}, {"line_no": 40, "char_start": 1967, "char_end": 2043, "line": "                        self._run_ssh('svctask rmfcmap -force %s' % map_id)\n"}, {"line_no": 43, "char_start": 2137, "char_end": 2213, "line": "                        self._run_ssh('svctask rmfcmap -force %s' % map_id)\n"}], "added": [{"line_no": 20, "char_start": 820, "char_end": 896, "line": "                        ssh_cmd = ['svctask', 'chfcmap', '-copyrate', '50',\n"}, {"line_no": 21, "char_start": 896, "char_end": 960, "line": "                                   '-autodelete', 'on', map_id]\n"}, {"line_no": 31, "char_start": 1467, "char_end": 1543, "line": "                            self._run_ssh(['svctask', 'stopfcmap', map_id])\n"}, {"line_no": 35, "char_start": 1688, "char_end": 1763, "line": "                            self._run_ssh(['svctask', 'rmfcmap', '-force',\n"}, {"line_no": 36, "char_start": 1763, "char_end": 1815, "line": "                                           map_id])\n"}, {"line_no": 40, "char_start": 1952, "char_end": 2024, "line": "                        self._run_ssh(['svctask', 'stopfcmap', map_id])\n"}, {"line_no": 41, "char_start": 2024, "char_end": 2104, "line": "                        self._run_ssh(['svctask', 'rmfcmap', '-force', map_id])\n"}, {"line_no": 44, "char_start": 2198, "char_end": 2278, "line": "                        self._run_ssh(['svctask', 'rmfcmap', '-force', map_id])\n"}]}, "char_changes": {"deleted": [{"char_start": 854, "char_end": 855, "chars": "("}, {"char_start": 884, "char_end": 885, "chars": " "}, {"char_start": 937, "char_end": 940, "chars": " %s"}, {"char_start": 941, "char_end": 943, "chars": " %"}, {"char_start": 950, "char_end": 951, "chars": ")"}, {"char_start": 1519, "char_end": 1522, "chars": " %s"}, {"char_start": 1523, "char_end": 1525, "chars": " %"}, {"char_start": 1745, "char_end": 1748, "chars": "%s'"}, {"char_start": 1749, "char_end": 1750, "chars": "%"}, {"char_start": 1952, "char_end": 1955, "chars": " %s"}, {"char_start": 1956, "char_end": 1958, "chars": " %"}, {"char_start": 2028, "char_end": 2031, "chars": " %s"}, {"char_start": 2032, "char_end": 2034, "chars": " %"}, {"char_start": 2198, "char_end": 2201, "chars": " %s"}, {"char_start": 2202, "char_end": 2204, "chars": " %"}], "added": [{"char_start": 854, "char_end": 855, "chars": "["}, {"char_start": 863, "char_end": 865, "chars": "',"}, {"char_start": 866, "char_end": 867, "chars": "'"}, {"char_start": 874, "char_end": 876, "chars": "',"}, {"char_start": 877, "char_end": 878, "chars": "'"}, {"char_start": 887, "char_end": 889, "chars": "',"}, {"char_start": 890, "char_end": 891, "chars": "'"}, {"char_start": 894, "char_end": 895, "chars": ","}, {"char_start": 943, "char_end": 945, "chars": "',"}, {"char_start": 946, "char_end": 947, "chars": "'"}, {"char_start": 950, "char_end": 951, "chars": ","}, {"char_start": 958, "char_end": 959, "chars": "]"}, {"char_start": 1509, "char_end": 1510, "chars": "["}, {"char_start": 1518, "char_end": 1520, "chars": "',"}, {"char_start": 1521, "char_end": 1522, "chars": "'"}, {"char_start": 1532, "char_end": 1533, "chars": ","}, {"char_start": 1540, "char_end": 1541, "chars": "]"}, {"char_start": 1730, "char_end": 1731, "chars": "["}, {"char_start": 1739, "char_end": 1741, "chars": "',"}, {"char_start": 1742, "char_end": 1743, "chars": "'"}, {"char_start": 1750, "char_end": 1752, "chars": "',"}, {"char_start": 1753, "char_end": 1754, "chars": "'"}, {"char_start": 1760, "char_end": 1767, "chars": "',\n    "}, {"char_start": 1768, "char_end": 1775, "chars": "       "}, {"char_start": 1776, "char_end": 1805, "chars": "                             "}, {"char_start": 1812, "char_end": 1813, "chars": "]"}, {"char_start": 1990, "char_end": 1991, "chars": "["}, {"char_start": 1999, "char_end": 2001, "chars": "',"}, {"char_start": 2002, "char_end": 2003, "chars": "'"}, {"char_start": 2013, "char_end": 2014, "chars": ","}, {"char_start": 2021, "char_end": 2022, "chars": "]"}, {"char_start": 2062, "char_end": 2063, "chars": "["}, {"char_start": 2071, "char_end": 2073, "chars": "',"}, {"char_start": 2074, "char_end": 2075, "chars": "'"}, {"char_start": 2082, "char_end": 2084, "chars": "',"}, {"char_start": 2085, "char_end": 2086, "chars": "'"}, {"char_start": 2093, "char_end": 2094, "chars": ","}, {"char_start": 2101, "char_end": 2102, "chars": "]"}, {"char_start": 2236, "char_end": 2237, "chars": "["}, {"char_start": 2245, "char_end": 2247, "chars": "',"}, {"char_start": 2248, "char_end": 2249, "chars": "'"}, {"char_start": 2256, "char_end": 2258, "chars": "',"}, {"char_start": 2259, "char_end": 2260, "chars": "'"}, {"char_start": 2267, "char_end": 2268, "chars": ","}, {"char_start": 2275, "char_end": 2276, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "tcp_forward", "func_src_before": "    def tcp_forward(self, host_port, device_port):\n        \"\"\"Starts tcp forwarding.\n\n        Args:\n            host_port: Port number to use on the computer.\n            device_port: Port number to use on the android device.\n        \"\"\"\n        self.forward('tcp:%d tcp:%d' % (host_port, device_port))", "func_src_after": "    def tcp_forward(self, host_port, device_port):\n        \"\"\"Starts tcp forwarding.\n\n        Args:\n            host_port: Port number to use on the computer.\n            device_port: Port number to use on the android device.\n        \"\"\"\n        self.forward(['tcp:%d' % host_port, 'tcp:%d' % device_port])", "line_changes": {"deleted": [{"line_no": 8, "char_start": 238, "char_end": 302, "line": "        self.forward('tcp:%d tcp:%d' % (host_port, device_port))\n"}], "added": [{"line_no": 8, "char_start": 238, "char_end": 306, "line": "        self.forward(['tcp:%d' % host_port, 'tcp:%d' % device_port])\n"}]}, "char_changes": {"deleted": [{"char_start": 266, "char_end": 273, "chars": " tcp:%d"}, {"char_start": 277, "char_end": 278, "chars": "("}, {"char_start": 300, "char_end": 301, "chars": ")"}], "added": [{"char_start": 259, "char_end": 260, "chars": "["}, {"char_start": 282, "char_end": 293, "chars": "'tcp:%d' % "}, {"char_start": 304, "char_end": 305, "chars": "]"}]}, "commit_link": "github.com/google/mobly/commit/3862e8ba359040fbdd6e1a6d36e51d07cda8e1ee", "file_name": "mobly/controllers/android_device_lib/adb.py", "vul_type": "cwe-078"}
{"func_name": "repack", "func_src_before": "def repack(host, targets, channel='stable'):\n  url = 'https://static.rust-lang.org/dist/channel-rust-' + channel + '.toml'\n  req = requests.get(url)\n  req.raise_for_status()\n  manifest = toml.loads(req.content)\n  if manifest['manifest-version'] != '2':\n    print('ERROR: unrecognized manifest version %s.' % manifest['manifest-version'])\n    return\n  print('Using manifest for rust %s as of %s.' % (channel, manifest['date']))\n  rustc_version, rustc = package(manifest, 'rustc', host)\n  if rustc['available']:\n    print('rustc %s\\n  %s\\n  %s' % (rustc_version, rustc['url'], rustc['hash']))\n    fetch(rustc['url'])\n  cargo_version, cargo = package(manifest, 'cargo', host)\n  if cargo['available']:\n    print('cargo %s\\n  %s\\n  %s' % (cargo_version, cargo['url'], cargo['hash']))\n    fetch(cargo['url'])\n  stds = []\n  for target in targets:\n      version, info = package(manifest, 'rust-std', target)\n      if info['available']:\n        print('rust-std %s\\n  %s\\n  %s' % (version, info['url'], info['hash']))\n        fetch(info['url'])\n        stds.append(info)\n  print('Installing packages...')\n  tar_basename = 'rustc-%s-repack' % host\n  install_dir = 'rustc'\n  os.system('rm -rf %s' % install_dir)\n  install(os.path.basename(rustc['url']), install_dir)\n  install(os.path.basename(cargo['url']), install_dir)\n  for std in stds:\n    install(os.path.basename(std['url']), install_dir)\n  print('Tarring %s...' % tar_basename)\n  os.system('tar cjf %s.tar.bz2 %s/*' % (tar_basename, install_dir))\n  os.system('rm -rf %s' % install_dir)", "func_src_after": "def repack(host, targets, channel='stable'):\n  print(\"Repacking rust for %s...\" % host)\n  url = 'https://static.rust-lang.org/dist/channel-rust-' + channel + '.toml'\n  req = requests.get(url)\n  req.raise_for_status()\n  manifest = toml.loads(req.content)\n  if manifest['manifest-version'] != '2':\n    print('ERROR: unrecognized manifest version %s.' % manifest['manifest-version'])\n    return\n  print('Using manifest for rust %s as of %s.' % (channel, manifest['date']))\n  rustc_version, rustc = package(manifest, 'rustc', host)\n  if rustc['available']:\n    print('rustc %s\\n  %s\\n  %s' % (rustc_version, rustc['url'], rustc['hash']))\n    fetch(rustc['url'])\n  cargo_version, cargo = package(manifest, 'cargo', host)\n  if cargo['available']:\n    print('cargo %s\\n  %s\\n  %s' % (cargo_version, cargo['url'], cargo['hash']))\n    fetch(cargo['url'])\n  stds = []\n  for target in targets:\n      version, info = package(manifest, 'rust-std', target)\n      if info['available']:\n        print('rust-std %s\\n  %s\\n  %s' % (version, info['url'], info['hash']))\n        fetch(info['url'])\n        stds.append(info)\n  print('Installing packages...')\n  tar_basename = 'rustc-%s-repack' % host\n  install_dir = 'rustc'\n  subprocess.check_call(['rm', '-rf', install_dir])\n  install(os.path.basename(rustc['url']), install_dir)\n  install(os.path.basename(cargo['url']), install_dir)\n  for std in stds:\n    install(os.path.basename(std['url']), install_dir)\n  print('Tarring %s...' % tar_basename)\n  subprocess.check_call(['tar', 'cjf', tar_basename + '.tar.bz2', install_dir])\n  subprocess.check_call(['rm', '-rf', install_dir])", "line_changes": {"deleted": [{"line_no": 28, "char_start": 1161, "char_end": 1200, "line": "  os.system('rm -rf %s' % install_dir)\n"}, {"line_no": 34, "char_start": 1424, "char_end": 1493, "line": "  os.system('tar cjf %s.tar.bz2 %s/*' % (tar_basename, install_dir))\n"}, {"line_no": 35, "char_start": 1493, "char_end": 1531, "line": "  os.system('rm -rf %s' % install_dir)\n"}], "added": [{"line_no": 2, "char_start": 45, "char_end": 88, "line": "  print(\"Repacking rust for %s...\" % host)\n"}, {"line_no": 29, "char_start": 1204, "char_end": 1256, "line": "  subprocess.check_call(['rm', '-rf', install_dir])\n"}, {"line_no": 35, "char_start": 1480, "char_end": 1560, "line": "  subprocess.check_call(['tar', 'cjf', tar_basename + '.tar.bz2', install_dir])\n"}, {"line_no": 36, "char_start": 1560, "char_end": 1611, "line": "  subprocess.check_call(['rm', '-rf', install_dir])\n"}]}, "char_changes": {"deleted": [{"char_start": 1166, "char_end": 1170, "chars": "syst"}, {"char_start": 1171, "char_end": 1172, "chars": "m"}, {"char_start": 1180, "char_end": 1183, "chars": " %s"}, {"char_start": 1184, "char_end": 1186, "chars": " %"}, {"char_start": 1426, "char_end": 1427, "chars": "o"}, {"char_start": 1428, "char_end": 1429, "chars": "."}, {"char_start": 1430, "char_end": 1431, "chars": "y"}, {"char_start": 1432, "char_end": 1433, "chars": "t"}, {"char_start": 1434, "char_end": 1435, "chars": "m"}, {"char_start": 1444, "char_end": 1460, "chars": " %s.tar.bz2 %s/*"}, {"char_start": 1462, "char_end": 1465, "chars": "% ("}, {"char_start": 1490, "char_end": 1491, "chars": ")"}, {"char_start": 1498, "char_end": 1502, "chars": "syst"}, {"char_start": 1503, "char_end": 1504, "chars": "m"}, {"char_start": 1512, "char_end": 1515, "chars": " %s"}, {"char_start": 1516, "char_end": 1518, "chars": " %"}], "added": [{"char_start": 47, "char_end": 90, "chars": "print(\"Repacking rust for %s...\" % host)\n  "}, {"char_start": 1206, "char_end": 1211, "chars": "subpr"}, {"char_start": 1212, "char_end": 1214, "chars": "ce"}, {"char_start": 1216, "char_end": 1219, "chars": ".ch"}, {"char_start": 1220, "char_end": 1227, "chars": "ck_call"}, {"char_start": 1228, "char_end": 1229, "chars": "["}, {"char_start": 1232, "char_end": 1234, "chars": "',"}, {"char_start": 1235, "char_end": 1236, "chars": "'"}, {"char_start": 1240, "char_end": 1241, "chars": ","}, {"char_start": 1253, "char_end": 1254, "chars": "]"}, {"char_start": 1482, "char_end": 1487, "chars": "subpr"}, {"char_start": 1488, "char_end": 1491, "chars": "ces"}, {"char_start": 1493, "char_end": 1495, "chars": "ch"}, {"char_start": 1496, "char_end": 1503, "chars": "ck_call"}, {"char_start": 1504, "char_end": 1505, "chars": "["}, {"char_start": 1509, "char_end": 1511, "chars": "',"}, {"char_start": 1512, "char_end": 1513, "chars": "'"}, {"char_start": 1517, "char_end": 1518, "chars": ","}, {"char_start": 1531, "char_end": 1544, "chars": " + '.tar.bz2'"}, {"char_start": 1557, "char_end": 1558, "chars": "]"}, {"char_start": 1562, "char_end": 1567, "chars": "subpr"}, {"char_start": 1568, "char_end": 1570, "chars": "ce"}, {"char_start": 1572, "char_end": 1575, "chars": ".ch"}, {"char_start": 1576, "char_end": 1583, "chars": "ck_call"}, {"char_start": 1584, "char_end": 1585, "chars": "["}, {"char_start": 1588, "char_end": 1590, "chars": "',"}, {"char_start": 1591, "char_end": 1592, "chars": "'"}, {"char_start": 1596, "char_end": 1597, "chars": ","}, {"char_start": 1609, "char_end": 1610, "chars": "]"}]}, "commit_link": "github.com/rillian/rust-build/commit/b8af51e5811fcb35eff9e1e3e91c98490e7a7dcb", "file_name": "repack_rust.py", "vul_type": "cwe-078"}
{"func_name": "extend_volume", "func_src_before": "    def extend_volume(self, volume, new_size):\n        volume_name = self._get_3par_vol_name(volume['id'])\n        old_size = volume.size\n        growth_size = int(new_size) - old_size\n        LOG.debug(\"Extending Volume %s from %s to %s, by %s GB.\" %\n                  (volume_name, old_size, new_size, growth_size))\n        try:\n            self._cli_run(\"growvv -f %s %sg\" % (volume_name, growth_size),\n                          None)\n        except Exception:\n            with excutils.save_and_reraise_exception():\n                LOG.error(_(\"Error extending volume %s\") % volume)", "func_src_after": "    def extend_volume(self, volume, new_size):\n        volume_name = self._get_3par_vol_name(volume['id'])\n        old_size = volume.size\n        growth_size = int(new_size) - old_size\n        LOG.debug(\"Extending Volume %s from %s to %s, by %s GB.\" %\n                  (volume_name, old_size, new_size, growth_size))\n        try:\n            self._cli_run(['growvv', '-f', volume_name, '%dg' % growth_size])\n        except Exception:\n            with excutils.save_and_reraise_exception():\n                LOG.error(_(\"Error extending volume %s\") % volume)", "line_changes": {"deleted": [{"line_no": 8, "char_start": 331, "char_end": 406, "line": "            self._cli_run(\"growvv -f %s %sg\" % (volume_name, growth_size),\n"}, {"line_no": 9, "char_start": 406, "char_end": 438, "line": "                          None)\n"}], "added": [{"line_no": 8, "char_start": 331, "char_end": 409, "line": "            self._cli_run(['growvv', '-f', volume_name, '%dg' % growth_size])\n"}]}, "char_changes": {"deleted": [{"char_start": 357, "char_end": 358, "chars": "\""}, {"char_start": 367, "char_end": 375, "chars": " %s %sg\""}, {"char_start": 376, "char_end": 379, "chars": "% ("}, {"char_start": 403, "char_end": 436, "chars": "),\n                          None"}], "added": [{"char_start": 357, "char_end": 359, "chars": "['"}, {"char_start": 365, "char_end": 367, "chars": "',"}, {"char_start": 368, "char_end": 369, "chars": "'"}, {"char_start": 371, "char_end": 373, "chars": "',"}, {"char_start": 387, "char_end": 395, "chars": "'%dg' % "}, {"char_start": 406, "char_end": 407, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_common.py", "vul_type": "cwe-078"}
{"func_name": "_remove_volume_set", "func_src_before": "    def _remove_volume_set(self, vvs_name):\n        # Must first clear the QoS rules before removing the volume set\n        self._cli_run('setqos -clear vvset:%s' % (vvs_name), None)\n        self._cli_run('removevvset -f %s' % (vvs_name), None)", "func_src_after": "    def _remove_volume_set(self, vvs_name):\n        # Must first clear the QoS rules before removing the volume set\n        self._cli_run(['setqos', '-clear', 'vvset:%s' % (vvs_name)])\n        self._cli_run(['removevvset', '-f', vvs_name])", "line_changes": {"deleted": [{"line_no": 3, "char_start": 116, "char_end": 183, "line": "        self._cli_run('setqos -clear vvset:%s' % (vvs_name), None)\n"}, {"line_no": 4, "char_start": 183, "char_end": 244, "line": "        self._cli_run('removevvset -f %s' % (vvs_name), None)\n"}], "added": [{"line_no": 3, "char_start": 116, "char_end": 185, "line": "        self._cli_run(['setqos', '-clear', 'vvset:%s' % (vvs_name)])\n"}, {"line_no": 4, "char_start": 185, "char_end": 239, "line": "        self._cli_run(['removevvset', '-f', vvs_name])\n"}]}, "char_changes": {"deleted": [{"char_start": 175, "char_end": 181, "chars": ", None"}, {"char_start": 220, "char_end": 223, "chars": " %s"}, {"char_start": 224, "char_end": 226, "chars": " %"}, {"char_start": 227, "char_end": 228, "chars": "("}, {"char_start": 236, "char_end": 243, "chars": "), None"}], "added": [{"char_start": 138, "char_end": 139, "chars": "["}, {"char_start": 146, "char_end": 148, "chars": "',"}, {"char_start": 149, "char_end": 150, "chars": "'"}, {"char_start": 156, "char_end": 158, "chars": "',"}, {"char_start": 159, "char_end": 160, "chars": "'"}, {"char_start": 182, "char_end": 183, "chars": "]"}, {"char_start": 207, "char_end": 208, "chars": "["}, {"char_start": 220, "char_end": 222, "chars": "',"}, {"char_start": 223, "char_end": 224, "chars": "'"}, {"char_start": 227, "char_end": 228, "chars": ","}, {"char_start": 237, "char_end": 238, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_common.py", "vul_type": "cwe-078"}
{"func_name": "_get_3par_hostname_from_wwn_iqn", "func_src_before": "    def _get_3par_hostname_from_wwn_iqn(self, wwns_iqn):\n        out = self._cli_run('showhost -d', None)\n        # wwns_iqn may be a list of strings or a single\n        # string. So, if necessary, create a list to loop.\n        if not isinstance(wwns_iqn, list):\n            wwn_iqn_list = [wwns_iqn]\n        else:\n            wwn_iqn_list = wwns_iqn\n\n        for wwn_iqn in wwn_iqn_list:\n            for showhost in out:\n                if (wwn_iqn.upper() in showhost.upper()):\n                    return showhost.split(',')[1]", "func_src_after": "    def _get_3par_hostname_from_wwn_iqn(self, wwns_iqn):\n        out = self._cli_run(['showhost', '-d'])\n        # wwns_iqn may be a list of strings or a single\n        # string. So, if necessary, create a list to loop.\n        if not isinstance(wwns_iqn, list):\n            wwn_iqn_list = [wwns_iqn]\n        else:\n            wwn_iqn_list = wwns_iqn\n\n        for wwn_iqn in wwn_iqn_list:\n            for showhost in out:\n                if (wwn_iqn.upper() in showhost.upper()):\n                    return showhost.split(',')[1]", "line_changes": {"deleted": [{"line_no": 2, "char_start": 57, "char_end": 106, "line": "        out = self._cli_run('showhost -d', None)\n"}], "added": [{"line_no": 2, "char_start": 57, "char_end": 105, "line": "        out = self._cli_run(['showhost', '-d'])\n"}]}, "char_changes": {"deleted": [{"char_start": 98, "char_end": 104, "chars": ", None"}], "added": [{"char_start": 85, "char_end": 86, "chars": "["}, {"char_start": 95, "char_end": 97, "chars": "',"}, {"char_start": 98, "char_end": 99, "chars": "'"}, {"char_start": 102, "char_end": 103, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_common.py", "vul_type": "cwe-078"}
{"func_name": "get_ports", "func_src_before": "    def get_ports(self):\n        # First get the active FC ports\n        out = self._cli_run('showport', None)\n\n        # strip out header\n        # N:S:P,Mode,State,----Node_WWN----,-Port_WWN/HW_Addr-,Type,\n        # Protocol,Label,Partner,FailoverState\n        out = out[1:len(out) - 2]\n\n        ports = {'FC': [], 'iSCSI': {}}\n        for line in out:\n            tmp = line.split(',')\n\n            if tmp:\n                if tmp[1] == 'target' and tmp[2] == 'ready':\n                    if tmp[6] == 'FC':\n                        ports['FC'].append(tmp[4])\n\n        # now get the active iSCSI ports\n        out = self._cli_run('showport -iscsi', None)\n\n        # strip out header\n        # N:S:P,State,IPAddr,Netmask,Gateway,\n        # TPGT,MTU,Rate,DHCP,iSNS_Addr,iSNS_Port\n        out = out[1:len(out) - 2]\n        for line in out:\n            tmp = line.split(',')\n\n            if tmp and len(tmp) > 2:\n                if tmp[1] == 'ready':\n                    ports['iSCSI'][tmp[2]] = {}\n\n        # now get the nsp and iqn\n        result = self._cli_run('showport -iscsiname', None)\n        if result:\n            # first line is header\n            # nsp, ip,iqn\n            result = result[1:]\n            for line in result:\n                info = line.split(\",\")\n                if info and len(info) > 2:\n                    if info[1] in ports['iSCSI']:\n                        nsp = info[0]\n                        ip_addr = info[1]\n                        iqn = info[2]\n                        ports['iSCSI'][ip_addr] = {'nsp': nsp,\n                                                   'iqn': iqn\n                                                   }\n\n        LOG.debug(\"PORTS = %s\" % pprint.pformat(ports))\n        return ports", "func_src_after": "    def get_ports(self):\n        # First get the active FC ports\n        out = self._cli_run(['showport'])\n\n        # strip out header\n        # N:S:P,Mode,State,----Node_WWN----,-Port_WWN/HW_Addr-,Type,\n        # Protocol,Label,Partner,FailoverState\n        out = out[1:len(out) - 2]\n\n        ports = {'FC': [], 'iSCSI': {}}\n        for line in out:\n            tmp = line.split(',')\n\n            if tmp:\n                if tmp[1] == 'target' and tmp[2] == 'ready':\n                    if tmp[6] == 'FC':\n                        ports['FC'].append(tmp[4])\n\n        # now get the active iSCSI ports\n        out = self._cli_run(['showport', '-iscsi'])\n\n        # strip out header\n        # N:S:P,State,IPAddr,Netmask,Gateway,\n        # TPGT,MTU,Rate,DHCP,iSNS_Addr,iSNS_Port\n        out = out[1:len(out) - 2]\n        for line in out:\n            tmp = line.split(',')\n\n            if tmp and len(tmp) > 2:\n                if tmp[1] == 'ready':\n                    ports['iSCSI'][tmp[2]] = {}\n\n        # now get the nsp and iqn\n        result = self._cli_run(['showport', '-iscsiname'])\n        if result:\n            # first line is header\n            # nsp, ip,iqn\n            result = result[1:]\n            for line in result:\n                info = line.split(\",\")\n                if info and len(info) > 2:\n                    if info[1] in ports['iSCSI']:\n                        nsp = info[0]\n                        ip_addr = info[1]\n                        iqn = info[2]\n                        ports['iSCSI'][ip_addr] = {'nsp': nsp,\n                                                   'iqn': iqn\n                                                   }\n\n        LOG.debug(\"PORTS = %s\" % pprint.pformat(ports))\n        return ports", "line_changes": {"deleted": [{"line_no": 3, "char_start": 65, "char_end": 111, "line": "        out = self._cli_run('showport', None)\n"}, {"line_no": 20, "char_start": 603, "char_end": 656, "line": "        out = self._cli_run('showport -iscsi', None)\n"}, {"line_no": 34, "char_start": 1031, "char_end": 1091, "line": "        result = self._cli_run('showport -iscsiname', None)\n"}], "added": [{"line_no": 3, "char_start": 65, "char_end": 107, "line": "        out = self._cli_run(['showport'])\n"}, {"line_no": 20, "char_start": 599, "char_end": 651, "line": "        out = self._cli_run(['showport', '-iscsi'])\n"}, {"line_no": 34, "char_start": 1026, "char_end": 1085, "line": "        result = self._cli_run(['showport', '-iscsiname'])\n"}]}, "char_changes": {"deleted": [{"char_start": 103, "char_end": 109, "chars": ", None"}, {"char_start": 648, "char_end": 654, "chars": ", None"}, {"char_start": 1083, "char_end": 1089, "chars": ", None"}], "added": [{"char_start": 93, "char_end": 94, "chars": "["}, {"char_start": 104, "char_end": 105, "chars": "]"}, {"char_start": 627, "char_end": 628, "chars": "["}, {"char_start": 637, "char_end": 639, "chars": "',"}, {"char_start": 640, "char_end": 641, "chars": "'"}, {"char_start": 648, "char_end": 649, "chars": "]"}, {"char_start": 1057, "char_end": 1058, "chars": "["}, {"char_start": 1067, "char_end": 1069, "chars": "',"}, {"char_start": 1070, "char_end": 1071, "chars": "'"}, {"char_start": 1082, "char_end": 1083, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_common.py", "vul_type": "cwe-078"}
{"func_name": "test_get_least_used_nsp", "func_src_before": "    def test_get_least_used_nsp(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record\n        self.clear_mox()\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_vlun_cmd = 'showvlun -a -showcols Port'\n        _run_ssh(show_vlun_cmd, False).AndReturn([pack(SHOW_VLUN_NONE), ''])\n        _run_ssh(show_vlun_cmd, False).AndReturn([pack(SHOW_VLUN_NONE), ''])\n        _run_ssh(show_vlun_cmd, False).AndReturn([pack(SHOW_VLUN_NONE), ''])\n\n        self.mox.ReplayAll()\n        # in use count                           11       12\n        nsp = self.driver._get_least_used_nsp(['0:2:1', '1:8:1'])\n        self.assertEqual(nsp, '0:2:1')\n\n        # in use count                            11       10\n        nsp = self.driver._get_least_used_nsp(['0:2:1', '1:2:1'])\n        self.assertEqual(nsp, '1:2:1')\n\n        # in use count                            0       10\n        nsp = self.driver._get_least_used_nsp(['1:1:1', '1:2:1'])\n        self.assertEqual(nsp, '1:1:1')", "func_src_after": "    def test_get_least_used_nsp(self):\n        self.flags(lock_path=self.tempdir)\n\n        #record\n        self.clear_mox()\n        _run_ssh = self.mox.CreateMock(hpdriver.hpcommon.HP3PARCommon._run_ssh)\n        self.stubs.Set(hpdriver.hpcommon.HP3PARCommon, \"_run_ssh\", _run_ssh)\n\n        show_vlun_cmd = ['showvlun', '-a', '-showcols', 'Port']\n        _run_ssh(show_vlun_cmd, False).AndReturn([pack(SHOW_VLUN_NONE), ''])\n        _run_ssh(show_vlun_cmd, False).AndReturn([pack(SHOW_VLUN_NONE), ''])\n        _run_ssh(show_vlun_cmd, False).AndReturn([pack(SHOW_VLUN_NONE), ''])\n\n        self.mox.ReplayAll()\n        # in use count                           11       12\n        nsp = self.driver._get_least_used_nsp(['0:2:1', '1:8:1'])\n        self.assertEqual(nsp, '0:2:1')\n\n        # in use count                            11       10\n        nsp = self.driver._get_least_used_nsp(['0:2:1', '1:2:1'])\n        self.assertEqual(nsp, '1:2:1')\n\n        # in use count                            0       10\n        nsp = self.driver._get_least_used_nsp(['1:1:1', '1:2:1'])\n        self.assertEqual(nsp, '1:1:1')", "line_changes": {"deleted": [{"line_no": 9, "char_start": 282, "char_end": 335, "line": "        show_vlun_cmd = 'showvlun -a -showcols Port'\n"}], "added": [{"line_no": 9, "char_start": 282, "char_end": 346, "line": "        show_vlun_cmd = ['showvlun', '-a', '-showcols', 'Port']\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 306, "char_end": 307, "chars": "["}, {"char_start": 316, "char_end": 318, "chars": "',"}, {"char_start": 319, "char_end": 320, "chars": "'"}, {"char_start": 322, "char_end": 324, "chars": "',"}, {"char_start": 325, "char_end": 326, "chars": "'"}, {"char_start": 335, "char_end": 337, "chars": "',"}, {"char_start": 338, "char_end": 339, "chars": "'"}, {"char_start": 344, "char_end": 345, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/tests/test_hp3par.py", "vul_type": "cwe-078"}
{"func_name": "_cmd_to_dict", "func_src_before": "    def _cmd_to_dict(self, cmd):\n        arg_list = cmd.split()\n        no_param_args = [\n            'autodelete',\n            'autoexpand',\n            'bytes',\n            'compressed',\n            'force',\n            'nohdr',\n        ]\n        one_param_args = [\n            'chapsecret',\n            'cleanrate',\n            'copyrate',\n            'delim',\n            'filtervalue',\n            'grainsize',\n            'hbawwpn',\n            'host',\n            'iogrp',\n            'iscsiname',\n            'mdiskgrp',\n            'name',\n            'rsize',\n            'scsi',\n            'size',\n            'source',\n            'target',\n            'unit',\n            'easytier',\n            'warning',\n            'wwpn',\n        ]\n\n        # Handle the special case of lsnode which is a two-word command\n        # Use the one word version of the command internally\n        if arg_list[0] in ('svcinfo', 'svctask'):\n            if arg_list[1] == 'lsnode':\n                if len(arg_list) > 4:  # e.g. svcinfo lsnode -delim ! <node id>\n                    ret = {'cmd': 'lsnode', 'node_id': arg_list[-1]}\n                else:\n                    ret = {'cmd': 'lsnodecanister'}\n            else:\n                ret = {'cmd': arg_list[1]}\n            arg_list.pop(0)\n        else:\n            ret = {'cmd': arg_list[0]}\n\n        skip = False\n        for i in range(1, len(arg_list)):\n            if skip:\n                skip = False\n                continue\n            if arg_list[i][0] == '-':\n                if arg_list[i][1:] in no_param_args:\n                    ret[arg_list[i][1:]] = True\n                elif arg_list[i][1:] in one_param_args:\n                    ret[arg_list[i][1:]] = arg_list[i + 1]\n                    skip = True\n                else:\n                    raise exception.InvalidInput(\n                        reason=_('unrecognized argument %s') % arg_list[i])\n            else:\n                ret['obj'] = arg_list[i]\n        return ret", "func_src_after": "    def _cmd_to_dict(self, arg_list):\n        no_param_args = [\n            'autodelete',\n            'autoexpand',\n            'bytes',\n            'compressed',\n            'force',\n            'nohdr',\n        ]\n        one_param_args = [\n            'chapsecret',\n            'cleanrate',\n            'copyrate',\n            'delim',\n            'filtervalue',\n            'grainsize',\n            'hbawwpn',\n            'host',\n            'iogrp',\n            'iscsiname',\n            'mdiskgrp',\n            'name',\n            'rsize',\n            'scsi',\n            'size',\n            'source',\n            'target',\n            'unit',\n            'easytier',\n            'warning',\n            'wwpn',\n        ]\n\n        # Handle the special case of lsnode which is a two-word command\n        # Use the one word version of the command internally\n        if arg_list[0] in ('svcinfo', 'svctask'):\n            if arg_list[1] == 'lsnode':\n                if len(arg_list) > 4:  # e.g. svcinfo lsnode -delim ! <node id>\n                    ret = {'cmd': 'lsnode', 'node_id': arg_list[-1]}\n                else:\n                    ret = {'cmd': 'lsnodecanister'}\n            else:\n                ret = {'cmd': arg_list[1]}\n            arg_list.pop(0)\n        else:\n            ret = {'cmd': arg_list[0]}\n\n        skip = False\n        for i in range(1, len(arg_list)):\n            if skip:\n                skip = False\n                continue\n            if arg_list[i][0] == '-':\n                if arg_list[i][1:] in no_param_args:\n                    ret[arg_list[i][1:]] = True\n                elif arg_list[i][1:] in one_param_args:\n                    ret[arg_list[i][1:]] = arg_list[i + 1]\n                    skip = True\n                else:\n                    raise exception.InvalidInput(\n                        reason=_('unrecognized argument %s') % arg_list[i])\n            else:\n                ret['obj'] = arg_list[i]\n        return ret", "line_changes": {"deleted": [{"line_no": 1, "char_start": 0, "char_end": 33, "line": "    def _cmd_to_dict(self, cmd):\n"}], "added": [{"line_no": 1, "char_start": 0, "char_end": 38, "line": "    def _cmd_to_dict(self, arg_list):\n"}]}, "char_changes": {"deleted": [{"char_start": 27, "char_end": 41, "chars": "cmd):\n        "}, {"char_start": 49, "char_end": 62, "chars": " = cmd.split("}], "added": [{"char_start": 36, "char_end": 37, "chars": ":"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/tests/test_storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "_cli_run", "func_src_before": "    def _cli_run(self, verb, cli_args):\n        \"\"\"Runs a CLI command over SSH, without doing any result parsing.\"\"\"\n        cli_arg_strings = []\n        if cli_args:\n            for k, v in cli_args.items():\n                if k == '':\n                    cli_arg_strings.append(\" %s\" % k)\n                else:\n                    cli_arg_strings.append(\" %s=%s\" % (k, v))\n\n        cmd = verb + ''.join(cli_arg_strings)\n        LOG.debug(\"SSH CMD = %s \" % cmd)\n\n        (stdout, stderr) = self._run_ssh(cmd, False)\n\n        # we have to strip out the input and exit lines\n        tmp = stdout.split(\"\\r\\n\")\n        out = tmp[5:len(tmp) - 2]\n        return out", "func_src_after": "    def _cli_run(self, cmd):\n        \"\"\"Runs a CLI command over SSH, without doing any result parsing.\"\"\"\n        LOG.debug(\"SSH CMD = %s \" % cmd)\n\n        (stdout, stderr) = self._run_ssh(cmd, False)\n\n        # we have to strip out the input and exit lines\n        tmp = stdout.split(\"\\r\\n\")\n        out = tmp[5:len(tmp) - 2]\n        return out", "line_changes": {"deleted": [{"line_no": 1, "char_start": 0, "char_end": 40, "line": "    def _cli_run(self, verb, cli_args):\n"}, {"line_no": 3, "char_start": 117, "char_end": 146, "line": "        cli_arg_strings = []\n"}, {"line_no": 4, "char_start": 146, "char_end": 167, "line": "        if cli_args:\n"}, {"line_no": 5, "char_start": 167, "char_end": 209, "line": "            for k, v in cli_args.items():\n"}, {"line_no": 6, "char_start": 209, "char_end": 237, "line": "                if k == '':\n"}, {"line_no": 7, "char_start": 237, "char_end": 291, "line": "                    cli_arg_strings.append(\" %s\" % k)\n"}, {"line_no": 8, "char_start": 291, "char_end": 313, "line": "                else:\n"}, {"line_no": 9, "char_start": 313, "char_end": 375, "line": "                    cli_arg_strings.append(\" %s=%s\" % (k, v))\n"}, {"line_no": 10, "char_start": 375, "char_end": 376, "line": "\n"}, {"line_no": 11, "char_start": 376, "char_end": 422, "line": "        cmd = verb + ''.join(cli_arg_strings)\n"}], "added": [{"line_no": 1, "char_start": 0, "char_end": 29, "line": "    def _cli_run(self, cmd):\n"}]}, "char_changes": {"deleted": [{"char_start": 23, "char_end": 29, "chars": "verb, "}, {"char_start": 30, "char_end": 37, "chars": "li_args"}, {"char_start": 116, "char_end": 421, "chars": "\n        cli_arg_strings = []\n        if cli_args:\n            for k, v in cli_args.items():\n                if k == '':\n                    cli_arg_strings.append(\" %s\" % k)\n                else:\n                    cli_arg_strings.append(\" %s=%s\" % (k, v))\n\n        cmd = verb + ''.join(cli_arg_strings)"}], "added": [{"char_start": 24, "char_end": 26, "chars": "md"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_common.py", "vul_type": "cwe-078"}
{"func_name": "_call_external_zip", "func_src_before": "def _call_external_zip(base_dir, zip_filename, verbose=False, dry_run=False):\n    # XXX see if we want to keep an external call here\n    if verbose:\n        zipoptions = \"-r\"\n    else:\n        zipoptions = \"-rq\"\n    from distutils.errors import DistutilsExecError\n    from distutils.spawn import spawn\n    try:\n        spawn([\"zip\", zipoptions, zip_filename, base_dir], dry_run=dry_run)\n    except DistutilsExecError:\n        # XXX really should distinguish between \"couldn't find\n        # external 'zip' command\" and \"zip failed\".\n        raise ExecError, \\\n            (\"unable to create zip file '%s': \"\n            \"could neither import the 'zipfile' module nor \"\n            \"find a standalone zip utility\") % zip_filename", "func_src_after": "def _call_external_zip(base_dir, zip_filename, verbose, dry_run, logger):\n    # XXX see if we want to keep an external call here\n    if verbose:\n        zipoptions = \"-r\"\n    else:\n        zipoptions = \"-rq\"\n    cmd = [\"zip\", zipoptions, zip_filename, base_dir]\n    if logger is not None:\n        logger.info(' '.join(cmd))\n    if dry_run:\n        return\n    import subprocess\n    try:\n        subprocess.check_call(cmd)\n    except subprocess.CalledProcessError:\n        # XXX really should distinguish between \"couldn't find\n        # external 'zip' command\" and \"zip failed\".\n        raise ExecError, \\\n            (\"unable to create zip file '%s': \"\n            \"could neither import the 'zipfile' module nor \"\n            \"find a standalone zip utility\") % zip_filename", "line_changes": {"deleted": [{"line_no": 1, "char_start": 0, "char_end": 78, "line": "def _call_external_zip(base_dir, zip_filename, verbose=False, dry_run=False):\n"}, {"line_no": 7, "char_start": 212, "char_end": 264, "line": "    from distutils.errors import DistutilsExecError\n"}, {"line_no": 8, "char_start": 264, "char_end": 302, "line": "    from distutils.spawn import spawn\n"}, {"line_no": 10, "char_start": 311, "char_end": 387, "line": "        spawn([\"zip\", zipoptions, zip_filename, base_dir], dry_run=dry_run)\n"}, {"line_no": 11, "char_start": 387, "char_end": 418, "line": "    except DistutilsExecError:\n"}], "added": [{"line_no": 1, "char_start": 0, "char_end": 74, "line": "def _call_external_zip(base_dir, zip_filename, verbose, dry_run, logger):\n"}, {"line_no": 7, "char_start": 208, "char_end": 262, "line": "    cmd = [\"zip\", zipoptions, zip_filename, base_dir]\n"}, {"line_no": 8, "char_start": 262, "char_end": 289, "line": "    if logger is not None:\n"}, {"line_no": 9, "char_start": 289, "char_end": 324, "line": "        logger.info(' '.join(cmd))\n"}, {"line_no": 10, "char_start": 324, "char_end": 340, "line": "    if dry_run:\n"}, {"line_no": 11, "char_start": 340, "char_end": 355, "line": "        return\n"}, {"line_no": 12, "char_start": 355, "char_end": 377, "line": "    import subprocess\n"}, {"line_no": 14, "char_start": 386, "char_end": 421, "line": "        subprocess.check_call(cmd)\n"}, {"line_no": 15, "char_start": 421, "char_end": 463, "line": "    except subprocess.CalledProcessError:\n"}]}, "char_changes": {"deleted": [{"char_start": 54, "char_end": 60, "chars": "=False"}, {"char_start": 69, "char_end": 72, "chars": "=Fa"}, {"char_start": 73, "char_end": 74, "chars": "s"}, {"char_start": 216, "char_end": 219, "chars": "fro"}, {"char_start": 221, "char_end": 222, "chars": "d"}, {"char_start": 223, "char_end": 226, "chars": "stu"}, {"char_start": 230, "char_end": 231, "chars": "."}, {"char_start": 233, "char_end": 237, "chars": "rors"}, {"char_start": 239, "char_end": 241, "chars": "mp"}, {"char_start": 243, "char_end": 244, "chars": "t"}, {"char_start": 245, "char_end": 246, "chars": "D"}, {"char_start": 248, "char_end": 250, "chars": "tu"}, {"char_start": 251, "char_end": 252, "chars": "i"}, {"char_start": 253, "char_end": 256, "chars": "sEx"}, {"char_start": 257, "char_end": 259, "chars": "cE"}, {"char_start": 260, "char_end": 261, "chars": "r"}, {"char_start": 262, "char_end": 263, "chars": "r"}, {"char_start": 270, "char_end": 272, "chars": "om"}, {"char_start": 273, "char_end": 276, "chars": "dis"}, {"char_start": 278, "char_end": 287, "chars": "tils.spaw"}, {"char_start": 298, "char_end": 301, "chars": "awn"}, {"char_start": 321, "char_end": 336, "chars": "awn([\"zip\", zip"}, {"char_start": 337, "char_end": 342, "chars": "ption"}, {"char_start": 343, "char_end": 348, "chars": ", zip"}, {"char_start": 349, "char_end": 351, "chars": "fi"}, {"char_start": 352, "char_end": 355, "chars": "ena"}, {"char_start": 356, "char_end": 378, "chars": "e, base_dir], dry_run="}, {"char_start": 379, "char_end": 385, "chars": "ry_run"}, {"char_start": 398, "char_end": 400, "chars": "Di"}, {"char_start": 401, "char_end": 402, "chars": "t"}, {"char_start": 403, "char_end": 405, "chars": "ti"}, {"char_start": 406, "char_end": 409, "chars": "sEx"}], "added": [{"char_start": 63, "char_end": 65, "chars": ", "}, {"char_start": 66, "char_end": 69, "chars": "ogg"}, {"char_start": 70, "char_end": 71, "chars": "r"}, {"char_start": 212, "char_end": 213, "chars": "c"}, {"char_start": 214, "char_end": 215, "chars": "d"}, {"char_start": 216, "char_end": 232, "chars": "= [\"zip\", zipopt"}, {"char_start": 233, "char_end": 235, "chars": "on"}, {"char_start": 236, "char_end": 243, "chars": ", zip_f"}, {"char_start": 245, "char_end": 254, "chars": "ename, ba"}, {"char_start": 256, "char_end": 259, "chars": "_di"}, {"char_start": 260, "char_end": 265, "chars": "]\n   "}, {"char_start": 267, "char_end": 270, "chars": "f l"}, {"char_start": 271, "char_end": 274, "chars": "gge"}, {"char_start": 278, "char_end": 281, "chars": " no"}, {"char_start": 282, "char_end": 297, "chars": " None:\n        "}, {"char_start": 298, "char_end": 301, "chars": "ogg"}, {"char_start": 303, "char_end": 307, "chars": ".inf"}, {"char_start": 308, "char_end": 323, "chars": "(' '.join(cmd))"}, {"char_start": 328, "char_end": 329, "chars": "i"}, {"char_start": 332, "char_end": 336, "chars": "ry_r"}, {"char_start": 337, "char_end": 350, "chars": "n:\n        re"}, {"char_start": 351, "char_end": 353, "chars": "ur"}, {"char_start": 354, "char_end": 358, "chars": "\n   "}, {"char_start": 367, "char_end": 369, "chars": "ub"}, {"char_start": 370, "char_end": 376, "chars": "rocess"}, {"char_start": 395, "char_end": 397, "chars": "ub"}, {"char_start": 398, "char_end": 399, "chars": "r"}, {"char_start": 400, "char_end": 401, "chars": "c"}, {"char_start": 402, "char_end": 403, "chars": "s"}, {"char_start": 404, "char_end": 407, "chars": ".ch"}, {"char_start": 408, "char_end": 410, "chars": "ck"}, {"char_start": 411, "char_end": 418, "chars": "call(cm"}, {"char_start": 434, "char_end": 440, "chars": "bproce"}, {"char_start": 441, "char_end": 447, "chars": "s.Call"}, {"char_start": 448, "char_end": 452, "chars": "dPro"}, {"char_start": 453, "char_end": 456, "chars": "ess"}]}, "commit_link": "github.com/python/cpython/commit/add531a1e55b0a739b0f42582f1c9747e5649ace", "file_name": "Lib/shutil.py", "vul_type": "cwe-078"}
{"func_name": "_create_host", "func_src_before": "    def _create_host(self, connector):\n        \"\"\"Create a new host on the storage system.\n\n        We create a host name and associate it with the given connection\n        information.\n\n        \"\"\"\n\n        LOG.debug(_('enter: _create_host: host %s') % connector['host'])\n\n        rand_id = str(random.randint(0, 99999999)).zfill(8)\n        host_name = '%s-%s' % (self._connector_to_hostname_prefix(connector),\n                               rand_id)\n\n        # Get all port information from the connector\n        ports = []\n        if 'initiator' in connector:\n            ports.append('-iscsiname %s' % connector['initiator'])\n        if 'wwpns' in connector:\n            for wwpn in connector['wwpns']:\n                ports.append('-hbawwpn %s' % wwpn)\n\n        # When creating a host, we need one port\n        self._driver_assert(len(ports), _('_create_host: No connector ports'))\n        port1 = ports.pop(0)\n        ssh_cmd = ('svctask mkhost -force %(port1)s -name \"%(host_name)s\"' %\n                   {'port1': port1, 'host_name': host_name})\n        out, err = self._run_ssh(ssh_cmd)\n        self._assert_ssh_return('successfully created' in out,\n                                '_create_host', ssh_cmd, out, err)\n\n        # Add any additional ports to the host\n        for port in ports:\n            ssh_cmd = ('svctask addhostport -force %s %s' % (port, host_name))\n            out, err = self._run_ssh(ssh_cmd)\n\n        LOG.debug(_('leave: _create_host: host %(host)s - %(host_name)s') %\n                  {'host': connector['host'], 'host_name': host_name})\n        return host_name", "func_src_after": "    def _create_host(self, connector):\n        \"\"\"Create a new host on the storage system.\n\n        We create a host name and associate it with the given connection\n        information.\n\n        \"\"\"\n\n        LOG.debug(_('enter: _create_host: host %s') % connector['host'])\n\n        rand_id = str(random.randint(0, 99999999)).zfill(8)\n        host_name = '%s-%s' % (self._connector_to_hostname_prefix(connector),\n                               rand_id)\n\n        # Get all port information from the connector\n        ports = []\n        if 'initiator' in connector:\n            ports.append('-iscsiname %s' % connector['initiator'])\n        if 'wwpns' in connector:\n            for wwpn in connector['wwpns']:\n                ports.append('-hbawwpn %s' % wwpn)\n\n        # When creating a host, we need one port\n        self._driver_assert(len(ports), _('_create_host: No connector ports'))\n        port1 = ports.pop(0)\n        arg_name, arg_val = port1.split()\n        ssh_cmd = ['svctask', 'mkhost', '-force', arg_name, arg_val, '-name',\n                   '\"%s\"' % host_name]\n        out, err = self._run_ssh(ssh_cmd)\n        self._assert_ssh_return('successfully created' in out,\n                                '_create_host', ssh_cmd, out, err)\n\n        # Add any additional ports to the host\n        for port in ports:\n            arg_name, arg_val = port.split()\n            ssh_cmd = ['svctask', 'addhostport', '-force', arg_name, arg_val,\n                       host_name]\n            out, err = self._run_ssh(ssh_cmd)\n\n        LOG.debug(_('leave: _create_host: host %(host)s - %(host_name)s') %\n                  {'host': connector['host'], 'host_name': host_name})\n        return host_name", "line_changes": {"deleted": [{"line_no": 26, "char_start": 916, "char_end": 993, "line": "        ssh_cmd = ('svctask mkhost -force %(port1)s -name \"%(host_name)s\"' %\n"}, {"line_no": 27, "char_start": 993, "char_end": 1054, "line": "                   {'port1': port1, 'host_name': host_name})\n"}, {"line_no": 34, "char_start": 1301, "char_end": 1380, "line": "            ssh_cmd = ('svctask addhostport -force %s %s' % (port, host_name))\n"}], "added": [{"line_no": 26, "char_start": 916, "char_end": 958, "line": "        arg_name, arg_val = port1.split()\n"}, {"line_no": 27, "char_start": 958, "char_end": 1036, "line": "        ssh_cmd = ['svctask', 'mkhost', '-force', arg_name, arg_val, '-name',\n"}, {"line_no": 28, "char_start": 1036, "char_end": 1075, "line": "                   '\"%s\"' % host_name]\n"}, {"line_no": 35, "char_start": 1322, "char_end": 1367, "line": "            arg_name, arg_val = port.split()\n"}, {"line_no": 36, "char_start": 1367, "char_end": 1445, "line": "            ssh_cmd = ['svctask', 'addhostport', '-force', arg_name, arg_val,\n"}, {"line_no": 37, "char_start": 1445, "char_end": 1479, "line": "                       host_name]\n"}]}, "char_changes": {"deleted": [{"char_start": 934, "char_end": 935, "chars": "("}, {"char_start": 958, "char_end": 962, "chars": "%(po"}, {"char_start": 963, "char_end": 969, "chars": "t1)s -"}, {"char_start": 974, "char_end": 981, "chars": "\"%(host"}, {"char_start": 986, "char_end": 989, "chars": ")s\""}, {"char_start": 990, "char_end": 992, "chars": " %"}, {"char_start": 1012, "char_end": 1013, "chars": "{"}, {"char_start": 1014, "char_end": 1019, "chars": "port1"}, {"char_start": 1020, "char_end": 1021, "chars": ":"}, {"char_start": 1022, "char_end": 1041, "chars": "port1, 'host_name':"}, {"char_start": 1051, "char_end": 1053, "chars": "})"}, {"char_start": 1323, "char_end": 1324, "chars": "("}, {"char_start": 1351, "char_end": 1357, "chars": " %s %s"}, {"char_start": 1359, "char_end": 1360, "chars": "%"}, {"char_start": 1361, "char_end": 1364, "chars": "(po"}, {"char_start": 1365, "char_end": 1366, "chars": "t"}, {"char_start": 1377, "char_end": 1379, "chars": "))"}], "added": [{"char_start": 924, "char_end": 966, "chars": "arg_name, arg_val = port1.split()\n        "}, {"char_start": 976, "char_end": 977, "chars": "["}, {"char_start": 985, "char_end": 987, "chars": "',"}, {"char_start": 988, "char_end": 989, "chars": "'"}, {"char_start": 995, "char_end": 997, "chars": "',"}, {"char_start": 998, "char_end": 999, "chars": "'"}, {"char_start": 1005, "char_end": 1007, "chars": "',"}, {"char_start": 1008, "char_end": 1009, "chars": "a"}, {"char_start": 1010, "char_end": 1012, "chars": "g_"}, {"char_start": 1016, "char_end": 1017, "chars": ","}, {"char_start": 1018, "char_end": 1021, "chars": "arg"}, {"char_start": 1022, "char_end": 1029, "chars": "val, '-"}, {"char_start": 1034, "char_end": 1035, "chars": ","}, {"char_start": 1056, "char_end": 1060, "chars": "\"%s\""}, {"char_start": 1062, "char_end": 1063, "chars": "%"}, {"char_start": 1073, "char_end": 1074, "chars": "]"}, {"char_start": 1322, "char_end": 1367, "chars": "            arg_name, arg_val = port.split()\n"}, {"char_start": 1389, "char_end": 1390, "chars": "["}, {"char_start": 1398, "char_end": 1400, "chars": "',"}, {"char_start": 1401, "char_end": 1402, "chars": "'"}, {"char_start": 1413, "char_end": 1415, "chars": "',"}, {"char_start": 1416, "char_end": 1417, "chars": "'"}, {"char_start": 1424, "char_end": 1425, "chars": ","}, {"char_start": 1426, "char_end": 1435, "chars": "arg_name,"}, {"char_start": 1436, "char_end": 1437, "chars": "a"}, {"char_start": 1438, "char_end": 1443, "chars": "g_val"}, {"char_start": 1444, "char_end": 1467, "chars": "\n                      "}, {"char_start": 1477, "char_end": 1478, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "_get_iscsi_ip_addrs", "func_src_before": "    def _get_iscsi_ip_addrs(self):\n        generator = self._port_conf_generator('svcinfo lsportip')\n        header = next(generator, None)\n        if not header:\n            return\n\n        for port_data in generator:\n            try:\n                port_node_id = port_data['node_id']\n                port_ipv4 = port_data['IP_address']\n                port_ipv6 = port_data['IP_address_6']\n                state = port_data['state']\n            except KeyError:\n                self._handle_keyerror('lsportip', header)\n\n            if port_node_id in self._storage_nodes and (\n                    state == 'configured' or state == 'online'):\n                node = self._storage_nodes[port_node_id]\n                if len(port_ipv4):\n                    node['ipv4'].append(port_ipv4)\n                if len(port_ipv6):\n                    node['ipv6'].append(port_ipv6)", "func_src_after": "    def _get_iscsi_ip_addrs(self):\n        generator = self._port_conf_generator(['svcinfo', 'lsportip'])\n        header = next(generator, None)\n        if not header:\n            return\n\n        for port_data in generator:\n            try:\n                port_node_id = port_data['node_id']\n                port_ipv4 = port_data['IP_address']\n                port_ipv6 = port_data['IP_address_6']\n                state = port_data['state']\n            except KeyError:\n                self._handle_keyerror('lsportip', header)\n\n            if port_node_id in self._storage_nodes and (\n                    state == 'configured' or state == 'online'):\n                node = self._storage_nodes[port_node_id]\n                if len(port_ipv4):\n                    node['ipv4'].append(port_ipv4)\n                if len(port_ipv6):\n                    node['ipv6'].append(port_ipv6)", "line_changes": {"deleted": [{"line_no": 2, "char_start": 35, "char_end": 101, "line": "        generator = self._port_conf_generator('svcinfo lsportip')\n"}], "added": [{"line_no": 2, "char_start": 35, "char_end": 106, "line": "        generator = self._port_conf_generator(['svcinfo', 'lsportip'])\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 81, "char_end": 82, "chars": "["}, {"char_start": 90, "char_end": 92, "chars": "',"}, {"char_start": 93, "char_end": 94, "chars": "'"}, {"char_start": 103, "char_end": 104, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "talk", "func_src_before": "def talk(myText):\r\n    if( myText.find( \"twitter\" ) >= 0 ):\r\n        myText += \"0\"\r\n        myText = myText[7:-1]\r\n        try:\r\n\t    myText = twitter.getTweet( myText )\r\n\texcept:\r\n\t    print( \"!!!ERROR: INVALID TWITTER CREDENTIALS. Please read README.md for instructions.\")\r\n            return\r\n    \r\n    os.system( \"espeak \\\",...\\\" 2>/dev/null\" ) # Sometimes the beginning of audio can get cut off. Insert silence.\r\n    time.sleep( 0.5 )\r\n    os.system( \"espeak -w speech.wav \\\"\" + myText + \"\\\" -s 130\" )\r\n    audio.play(\"speech.wav\")\r\n    return myText", "func_src_after": "def talk(myText):\r\n    if( myText.find( \"twitter\" ) >= 0 ):\r\n        myText += \"0\"\r\n        myText = myText[7:-1]\r\n        try:\r\n\t    myText = twitter.getTweet( myText )\r\n\texcept:\r\n\t    print( \"!!!ERROR: INVALID TWITTER CREDENTIALS. Please read README.md for instructions.\")\r\n            return\r\n    \r\n    os.system( \"espeak \\\",...\\\" 2>/dev/null\" ) # Sometimes the beginning of audio can get cut off. Insert silence.\r\n    time.sleep( 0.5 )\r\n    subprocess.call([\"espeak\", \"-w\", \"speech.wav\", myText, \"-s\", \"130\"])\r\n    audio.play(\"speech.wav\")\r\n    return myText", "line_changes": {"deleted": [{"line_no": 13, "char_start": 441, "char_end": 508, "line": "    os.system( \"espeak -w speech.wav \\\"\" + myText + \"\\\" -s 130\" )\r\n"}], "added": [{"line_no": 13, "char_start": 441, "char_end": 515, "line": "    subprocess.call([\"espeak\", \"-w\", \"speech.wav\", myText, \"-s\", \"130\"])\r\n"}]}, "char_changes": {"deleted": [{"char_start": 447, "char_end": 448, "chars": "."}, {"char_start": 449, "char_end": 454, "chars": "ystem"}, {"char_start": 455, "char_end": 456, "chars": " "}, {"char_start": 477, "char_end": 479, "chars": " \\"}, {"char_start": 480, "char_end": 483, "chars": "\" +"}, {"char_start": 490, "char_end": 492, "chars": " +"}, {"char_start": 494, "char_end": 497, "chars": "\\\" "}, {"char_start": 504, "char_end": 505, "chars": " "}], "added": [{"char_start": 445, "char_end": 450, "chars": "subpr"}, {"char_start": 451, "char_end": 454, "chars": "ces"}, {"char_start": 456, "char_end": 460, "chars": "call"}, {"char_start": 461, "char_end": 462, "chars": "["}, {"char_start": 469, "char_end": 471, "chars": "\","}, {"char_start": 472, "char_end": 473, "chars": "\""}, {"char_start": 475, "char_end": 477, "chars": "\","}, {"char_start": 478, "char_end": 479, "chars": "\""}, {"char_start": 490, "char_end": 491, "chars": ","}, {"char_start": 498, "char_end": 499, "chars": ","}, {"char_start": 503, "char_end": 505, "chars": "\","}, {"char_start": 506, "char_end": 507, "chars": "\""}, {"char_start": 511, "char_end": 512, "chars": "]"}]}, "commit_link": "github.com/ntc-chip-revived/ChippyRuxpin/commit/0cd7d78e4d806852fd75fee03c24cce322f76014", "file_name": "chippyRuxpin.py", "vul_type": "cwe-078"}
{"func_name": "_exec_cmd", "func_src_before": "    def _exec_cmd(self, cmd):\n        \"\"\"Executes adb commands in a new shell.\n\n        This is specific to executing adb binary because stderr is not a good\n        indicator of cmd execution status.\n\n        Args:\n            cmds: A string that is the adb command to execute.\n\n        Returns:\n            The output of the adb command run if exit code is 0.\n\n        Raises:\n            AdbError is raised if the adb command exit code is not 0.\n        \"\"\"\n        proc = subprocess.Popen(\n            cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n        (out, err) = proc.communicate()\n        ret = proc.returncode\n        logging.debug('cmd: %s, stdout: %s, stderr: %s, ret: %s', cmd, out,\n                      err, ret)\n        if ret == 0:\n            return out\n        else:\n            raise AdbError(cmd=cmd, stdout=out, stderr=err, ret_code=ret)", "func_src_after": "    def _exec_cmd(self, args, shell):\n        \"\"\"Executes adb commands.\n\n        Args:\n            args: string or list of strings, program arguments.\n                See subprocess.Popen() documentation.\n            shell: bool, True to run this command through the system shell,\n                False to invoke it directly. See subprocess.Popen() docs.\n\n        Returns:\n            The output of the adb command run if exit code is 0.\n\n        Raises:\n            AdbError is raised if the adb command exit code is not 0.\n        \"\"\"\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=shell)\n        (out, err) = proc.communicate()\n        ret = proc.returncode\n        logging.debug('cmd: %s, stdout: %s, stderr: %s, ret: %s', args, out,\n                      err, ret)\n        if ret == 0:\n            return out\n        else:\n            raise AdbError(cmd=args, stdout=out, stderr=err, ret_code=ret)", "line_changes": {"deleted": [{"line_no": 1, "char_start": 0, "char_end": 30, "line": "    def _exec_cmd(self, cmd):\n"}, {"line_no": 8, "char_start": 216, "char_end": 279, "line": "            cmds: A string that is the adb command to execute.\n"}, {"line_no": 17, "char_start": 494, "char_end": 571, "line": "            cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n"}, {"line_no": 20, "char_start": 641, "char_end": 717, "line": "        logging.debug('cmd: %s, stdout: %s, stderr: %s, ret: %s', cmd, out,\n"}, {"line_no": 25, "char_start": 807, "char_end": 880, "line": "            raise AdbError(cmd=cmd, stdout=out, stderr=err, ret_code=ret)\n"}], "added": [{"line_no": 1, "char_start": 0, "char_end": 38, "line": "    def _exec_cmd(self, args, shell):\n"}, {"line_no": 2, "char_start": 38, "char_end": 72, "line": "        \"\"\"Executes adb commands.\n"}, {"line_no": 5, "char_start": 87, "char_end": 151, "line": "            args: string or list of strings, program arguments.\n"}, {"line_no": 6, "char_start": 151, "char_end": 205, "line": "                See subprocess.Popen() documentation.\n"}, {"line_no": 7, "char_start": 205, "char_end": 281, "line": "            shell: bool, True to run this command through the system shell,\n"}, {"line_no": 8, "char_start": 281, "char_end": 355, "line": "                False to invoke it directly. See subprocess.Popen() docs.\n"}, {"line_no": 17, "char_start": 570, "char_end": 649, "line": "            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=shell)\n"}, {"line_no": 20, "char_start": 719, "char_end": 796, "line": "        logging.debug('cmd: %s, stdout: %s, stderr: %s, ret: %s', args, out,\n"}]}, "char_changes": {"deleted": [{"char_start": 24, "char_end": 27, "chars": "cmd"}, {"char_start": 63, "char_end": 65, "chars": "in"}, {"char_start": 66, "char_end": 67, "chars": "a"}, {"char_start": 68, "char_end": 71, "chars": "new"}, {"char_start": 73, "char_end": 79, "chars": "hell.\n"}, {"char_start": 88, "char_end": 92, "chars": "This"}, {"char_start": 93, "char_end": 94, "chars": "i"}, {"char_start": 97, "char_end": 102, "chars": "pecif"}, {"char_start": 103, "char_end": 104, "chars": "c"}, {"char_start": 108, "char_end": 113, "chars": "execu"}, {"char_start": 119, "char_end": 121, "chars": "db"}, {"char_start": 122, "char_end": 125, "chars": "bin"}, {"char_start": 127, "char_end": 133, "chars": "y beca"}, {"char_start": 134, "char_end": 135, "chars": "s"}, {"char_start": 136, "char_end": 138, "chars": " s"}, {"char_start": 139, "char_end": 145, "chars": "derr i"}, {"char_start": 147, "char_end": 150, "chars": "not"}, {"char_start": 151, "char_end": 152, "chars": "a"}, {"char_start": 153, "char_end": 158, "chars": "good\n"}, {"char_start": 166, "char_end": 175, "chars": "indicator"}, {"char_start": 176, "char_end": 178, "chars": "of"}, {"char_start": 179, "char_end": 182, "chars": "cmd"}, {"char_start": 184, "char_end": 185, "chars": "x"}, {"char_start": 186, "char_end": 187, "chars": "c"}, {"char_start": 188, "char_end": 190, "chars": "ti"}, {"char_start": 193, "char_end": 194, "chars": "s"}, {"char_start": 197, "char_end": 199, "chars": "us"}, {"char_start": 200, "char_end": 201, "chars": "\n"}, {"char_start": 210, "char_end": 218, "chars": "Args:\n  "}, {"char_start": 231, "char_end": 233, "chars": "s:"}, {"char_start": 234, "char_end": 237, "chars": "A s"}, {"char_start": 239, "char_end": 241, "chars": "in"}, {"char_start": 245, "char_end": 247, "chars": "at"}, {"char_start": 248, "char_end": 249, "chars": "i"}, {"char_start": 250, "char_end": 251, "chars": " "}, {"char_start": 255, "char_end": 258, "chars": "adb"}, {"char_start": 259, "char_end": 263, "chars": "comm"}, {"char_start": 264, "char_end": 266, "chars": "nd"}, {"char_start": 271, "char_end": 272, "chars": "x"}, {"char_start": 274, "char_end": 275, "chars": "u"}, {"char_start": 506, "char_end": 509, "chars": "cmd"}, {"char_start": 565, "char_end": 568, "chars": "Tru"}, {"char_start": 707, "char_end": 710, "chars": "cmd"}, {"char_start": 838, "char_end": 841, "chars": "cmd"}], "added": [{"char_start": 24, "char_end": 35, "chars": "args, shell"}, {"char_start": 70, "char_end": 73, "chars": ".\n\n"}, {"char_start": 76, "char_end": 80, "chars": "    "}, {"char_start": 81, "char_end": 84, "chars": "Arg"}, {"char_start": 85, "char_end": 86, "chars": ":"}, {"char_start": 96, "char_end": 102, "chars": "   arg"}, {"char_start": 103, "char_end": 104, "chars": ":"}, {"char_start": 106, "char_end": 108, "chars": "tr"}, {"char_start": 109, "char_end": 116, "chars": "ng or l"}, {"char_start": 117, "char_end": 118, "chars": "s"}, {"char_start": 119, "char_end": 120, "chars": " "}, {"char_start": 121, "char_end": 122, "chars": "f"}, {"char_start": 123, "char_end": 124, "chars": "s"}, {"char_start": 125, "char_end": 126, "chars": "r"}, {"char_start": 129, "char_end": 131, "chars": "s,"}, {"char_start": 132, "char_end": 137, "chars": "progr"}, {"char_start": 138, "char_end": 139, "chars": "m"}, {"char_start": 142, "char_end": 145, "chars": "gum"}, {"char_start": 146, "char_end": 148, "chars": "nt"}, {"char_start": 149, "char_end": 151, "chars": ".\n"}, {"char_start": 167, "char_end": 168, "chars": "S"}, {"char_start": 170, "char_end": 177, "chars": " subpro"}, {"char_start": 178, "char_end": 183, "chars": "ess.P"}, {"char_start": 184, "char_end": 186, "chars": "pe"}, {"char_start": 187, "char_end": 189, "chars": "()"}, {"char_start": 190, "char_end": 197, "chars": "documen"}, {"char_start": 200, "char_end": 203, "chars": "ion"}, {"char_start": 217, "char_end": 223, "chars": "shell:"}, {"char_start": 224, "char_end": 229, "chars": "bool,"}, {"char_start": 230, "char_end": 234, "chars": "True"}, {"char_start": 235, "char_end": 237, "chars": "to"}, {"char_start": 238, "char_end": 241, "chars": "run"}, {"char_start": 242, "char_end": 246, "chars": "this"}, {"char_start": 248, "char_end": 250, "chars": "om"}, {"char_start": 251, "char_end": 253, "chars": "an"}, {"char_start": 256, "char_end": 257, "chars": "h"}, {"char_start": 258, "char_end": 260, "chars": "ou"}, {"char_start": 261, "char_end": 262, "chars": "h"}, {"char_start": 265, "char_end": 270, "chars": "e sys"}, {"char_start": 271, "char_end": 273, "chars": "em"}, {"char_start": 277, "char_end": 293, "chars": "ll,\n            "}, {"char_start": 294, "char_end": 298, "chars": "   F"}, {"char_start": 299, "char_end": 302, "chars": "lse"}, {"char_start": 303, "char_end": 304, "chars": "t"}, {"char_start": 305, "char_end": 307, "chars": " i"}, {"char_start": 308, "char_end": 316, "chars": "voke it "}, {"char_start": 317, "char_end": 321, "chars": "irec"}, {"char_start": 322, "char_end": 325, "chars": "ly."}, {"char_start": 326, "char_end": 327, "chars": "S"}, {"char_start": 329, "char_end": 336, "chars": " subpro"}, {"char_start": 338, "char_end": 353, "chars": "ss.Popen() docs"}, {"char_start": 582, "char_end": 586, "chars": "args"}, {"char_start": 642, "char_end": 644, "chars": "sh"}, {"char_start": 645, "char_end": 647, "chars": "ll"}, {"char_start": 785, "char_end": 789, "chars": "args"}, {"char_start": 917, "char_end": 921, "chars": "args"}]}, "commit_link": "github.com/google/mobly/commit/3862e8ba359040fbdd6e1a6d36e51d07cda8e1ee", "file_name": "mobly/controllers/android_device_lib/adb.py", "vul_type": "cwe-078"}
{"func_name": "_get_conn_fc_wwpns", "func_src_before": "    def _get_conn_fc_wwpns(self, host_name):\n        wwpns = []\n        cmd = 'svcinfo lsfabric -host %s' % host_name\n        generator = self._port_conf_generator(cmd)\n        header = next(generator, None)\n        if not header:\n            return wwpns\n\n        for port_data in generator:\n            try:\n                wwpns.append(port_data['local_wwpn'])\n            except KeyError as e:\n                self._handle_keyerror('lsfabric', header)\n\n        return wwpns", "func_src_after": "    def _get_conn_fc_wwpns(self, host_name):\n        wwpns = []\n        cmd = ['svcinfo', 'lsfabric', '-host', host_name]\n        generator = self._port_conf_generator(cmd)\n        header = next(generator, None)\n        if not header:\n            return wwpns\n\n        for port_data in generator:\n            try:\n                wwpns.append(port_data['local_wwpn'])\n            except KeyError as e:\n                self._handle_keyerror('lsfabric', header)\n\n        return wwpns", "line_changes": {"deleted": [{"line_no": 3, "char_start": 64, "char_end": 118, "line": "        cmd = 'svcinfo lsfabric -host %s' % host_name\n"}], "added": [{"line_no": 3, "char_start": 64, "char_end": 122, "line": "        cmd = ['svcinfo', 'lsfabric', '-host', host_name]\n"}]}, "char_changes": {"deleted": [{"char_start": 101, "char_end": 104, "chars": " %s"}, {"char_start": 105, "char_end": 107, "chars": " %"}], "added": [{"char_start": 78, "char_end": 79, "chars": "["}, {"char_start": 87, "char_end": 89, "chars": "',"}, {"char_start": 90, "char_end": 91, "chars": "'"}, {"char_start": 99, "char_end": 101, "chars": "',"}, {"char_start": 102, "char_end": 103, "chars": "'"}, {"char_start": 109, "char_end": 110, "chars": ","}, {"char_start": 120, "char_end": 121, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "_create_3par_iscsi_host", "func_src_before": "    def _create_3par_iscsi_host(self, hostname, iscsi_iqn, domain, persona_id):\n        \"\"\"Create a 3PAR host.\n\n        Create a 3PAR host, if there is already a host on the 3par using\n        the same iqn but with a different hostname, return the hostname\n        used by 3PAR.\n        \"\"\"\n        cmd = 'createhost -iscsi -persona %s -domain %s %s %s' % \\\n              (persona_id, domain, hostname, iscsi_iqn)\n        out = self.common._cli_run(cmd, None)\n        if out and len(out) > 1:\n            return self.common.parse_create_host_error(hostname, out)\n        return hostname", "func_src_after": "    def _create_3par_iscsi_host(self, hostname, iscsi_iqn, domain, persona_id):\n        \"\"\"Create a 3PAR host.\n\n        Create a 3PAR host, if there is already a host on the 3par using\n        the same iqn but with a different hostname, return the hostname\n        used by 3PAR.\n        \"\"\"\n        cmd = ['createhost', '-iscsi', '-persona', persona_id, '-domain',\n               domain, hostname, iscsi_iqn]\n        out = self.common._cli_run(cmd)\n        if out and len(out) > 1:\n            return self.common.parse_create_host_error(hostname, out)\n        return hostname", "line_changes": {"deleted": [{"line_no": 8, "char_start": 291, "char_end": 358, "line": "        cmd = 'createhost -iscsi -persona %s -domain %s %s %s' % \\\n"}, {"line_no": 9, "char_start": 358, "char_end": 414, "line": "              (persona_id, domain, hostname, iscsi_iqn)\n"}, {"line_no": 10, "char_start": 414, "char_end": 460, "line": "        out = self.common._cli_run(cmd, None)\n"}], "added": [{"line_no": 8, "char_start": 291, "char_end": 365, "line": "        cmd = ['createhost', '-iscsi', '-persona', persona_id, '-domain',\n"}, {"line_no": 9, "char_start": 365, "char_end": 409, "line": "               domain, hostname, iscsi_iqn]\n"}, {"line_no": 10, "char_start": 409, "char_end": 449, "line": "        out = self.common._cli_run(cmd)\n"}]}, "char_changes": {"deleted": [{"char_start": 333, "char_end": 334, "chars": "%"}, {"char_start": 343, "char_end": 352, "chars": " %s %s %s"}, {"char_start": 353, "char_end": 357, "chars": " % \\"}, {"char_start": 372, "char_end": 384, "chars": "(persona_id,"}, {"char_start": 412, "char_end": 413, "chars": ")"}, {"char_start": 452, "char_end": 458, "chars": ", None"}], "added": [{"char_start": 305, "char_end": 306, "chars": "["}, {"char_start": 317, "char_end": 319, "chars": "',"}, {"char_start": 320, "char_end": 321, "chars": "'"}, {"char_start": 327, "char_end": 329, "chars": "',"}, {"char_start": 330, "char_end": 331, "chars": "'"}, {"char_start": 339, "char_end": 341, "chars": "',"}, {"char_start": 342, "char_end": 345, "chars": "per"}, {"char_start": 346, "char_end": 353, "chars": "ona_id,"}, {"char_start": 354, "char_end": 355, "chars": "'"}, {"char_start": 363, "char_end": 364, "chars": ","}, {"char_start": 407, "char_end": 408, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_iscsi.py", "vul_type": "cwe-078"}
{"func_name": "_delete_3par_host", "func_src_before": "    def _delete_3par_host(self, hostname):\n        self._cli_run('removehost %s' % hostname, None)", "func_src_after": "    def _delete_3par_host(self, hostname):\n        self._cli_run(['removehost', hostname])", "line_changes": {"deleted": [{"line_no": 2, "char_start": 43, "char_end": 98, "line": "        self._cli_run('removehost %s' % hostname, None)\n"}], "added": [{"line_no": 2, "char_start": 43, "char_end": 90, "line": "        self._cli_run(['removehost', hostname])\n"}]}, "char_changes": {"deleted": [{"char_start": 76, "char_end": 79, "chars": " %s"}, {"char_start": 80, "char_end": 82, "chars": " %"}, {"char_start": 91, "char_end": 97, "chars": ", None"}], "added": [{"char_start": 65, "char_end": 66, "chars": "["}, {"char_start": 78, "char_end": 79, "chars": ","}, {"char_start": 88, "char_end": 89, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/c55589b131828f3a595903f6796cb2d0babb772f", "file_name": "cinder/volume/drivers/san/hp/hp_3par_common.py", "vul_type": "cwe-078"}
{"func_name": "process_statistics", "func_src_before": "    def process_statistics(self, metadata, _):\n        args = [metadata.hostname, '-p', metadata.profile, '-g',\n                ':'.join([g for g in metadata.groups])]\n        for notifier in os.listdir(self.data):\n            if ((notifier[-1] == '~') or\n                (notifier[:2] == '.#') or\n                (notifier[-4:] == '.swp') or\n                (notifier in ['SCCS', '.svn', '4913'])):\n                continue\n            npath = self.data + '/' + notifier\n            self.logger.debug(\"Running %s %s\" % (npath, \" \".join(args)))\n            async_run(npath, args)", "func_src_after": "    def process_statistics(self, metadata, _):\n        args = [metadata.hostname, '-p', metadata.profile, '-g',\n                ':'.join([g for g in metadata.groups])]\n        self.debug_log(\"running triggers\")\n        for notifier in os.listdir(self.data):\n            self.debug_log(\"running %s\" % notifier)\n            if ((notifier[-1] == '~') or\n                (notifier[:2] == '.#') or\n                (notifier[-4:] == '.swp') or\n                (notifier in ['SCCS', '.svn', '4913'])):\n                continue\n            npath = os.path.join(self.data, notifier)\n            self.async_run([npath] + args)", "line_changes": {"deleted": [{"line_no": 10, "char_start": 425, "char_end": 472, "line": "            npath = self.data + '/' + notifier\n"}, {"line_no": 11, "char_start": 472, "char_end": 545, "line": "            self.logger.debug(\"Running %s %s\" % (npath, \" \".join(args)))\n"}, {"line_no": 12, "char_start": 545, "char_end": 579, "line": "            async_run(npath, args)\n"}], "added": [{"line_no": 4, "char_start": 168, "char_end": 211, "line": "        self.debug_log(\"running triggers\")\n"}, {"line_no": 6, "char_start": 258, "char_end": 310, "line": "            self.debug_log(\"running %s\" % notifier)\n"}, {"line_no": 12, "char_start": 520, "char_end": 574, "line": "            npath = os.path.join(self.data, notifier)\n"}, {"line_no": 13, "char_start": 574, "char_end": 616, "line": "            self.async_run([npath] + args)"}]}, "char_changes": {"deleted": [{"char_start": 454, "char_end": 462, "chars": " + '/' +"}, {"char_start": 489, "char_end": 557, "chars": "logger.debug(\"Running %s %s\" % (npath, \" \".join(args)))\n            "}, {"char_start": 572, "char_end": 573, "chars": ","}], "added": [{"char_start": 176, "char_end": 219, "chars": "self.debug_log(\"running triggers\")\n        "}, {"char_start": 257, "char_end": 309, "chars": "\n            self.debug_log(\"running %s\" % notifier)"}, {"char_start": 540, "char_end": 553, "chars": "os.path.join("}, {"char_start": 562, "char_end": 563, "chars": ","}, {"char_start": 572, "char_end": 573, "chars": ")"}, {"char_start": 601, "char_end": 602, "chars": "["}, {"char_start": 607, "char_end": 610, "chars": "] +"}]}, "commit_link": "github.com/Bcfg2/bcfg2/commit/a524967e8d5c4c22e49cd619aed20c87a316c0be", "file_name": "src/lib/Server/Plugins/Trigger.py", "vul_type": "cwe-078"}
{"func_name": "_delete_host", "func_src_before": "    def _delete_host(self, host_name):\n        \"\"\"Delete a host on the storage system.\"\"\"\n\n        LOG.debug(_('enter: _delete_host: host %s ') % host_name)\n\n        ssh_cmd = 'svctask rmhost %s ' % host_name\n        out, err = self._run_ssh(ssh_cmd)\n        # No output should be returned from rmhost\n        self._assert_ssh_return(len(out.strip()) == 0,\n                                '_delete_host', ssh_cmd, out, err)\n\n        LOG.debug(_('leave: _delete_host: host %s ') % host_name)", "func_src_after": "    def _delete_host(self, host_name):\n        \"\"\"Delete a host on the storage system.\"\"\"\n\n        LOG.debug(_('enter: _delete_host: host %s ') % host_name)\n\n        ssh_cmd = ['svctask', 'rmhost', host_name]\n        out, err = self._run_ssh(ssh_cmd)\n        # No output should be returned from rmhost\n        self._assert_ssh_return(len(out.strip()) == 0,\n                                '_delete_host', ssh_cmd, out, err)\n\n        LOG.debug(_('leave: _delete_host: host %s ') % host_name)", "line_changes": {"deleted": [{"line_no": 6, "char_start": 158, "char_end": 209, "line": "        ssh_cmd = 'svctask rmhost %s ' % host_name\n"}], "added": [{"line_no": 6, "char_start": 158, "char_end": 209, "line": "        ssh_cmd = ['svctask', 'rmhost', host_name]\n"}]}, "char_changes": {"deleted": [{"char_start": 191, "char_end": 195, "chars": " %s "}, {"char_start": 196, "char_end": 198, "chars": " %"}], "added": [{"char_start": 176, "char_end": 177, "chars": "["}, {"char_start": 185, "char_end": 187, "chars": "',"}, {"char_start": 188, "char_end": 189, "chars": "'"}, {"char_start": 196, "char_end": 197, "chars": ","}, {"char_start": 207, "char_end": 208, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "fetch", "func_src_before": "def fetch(url):\n  '''Download and verify a package url.'''\n  base = os.path.basename(url)\n  print('Fetching %s...' % base)\n  fetch_file(url + '.asc')\n  fetch_file(url)\n  fetch_file(url + '.sha256')\n  fetch_file(url + '.asc.sha256')\n  print('Verifying %s...' % base)\n  # TODO: check for verification failure.\n  os.system('shasum -c %s.sha256' % base)\n  os.system('shasum -c %s.asc.sha256' % base)\n  os.system('gpg --verify %s.asc %s' % (base, base))\n  os.system('keybase verify %s.asc' % base)", "func_src_after": "def fetch(url):\n  '''Download and verify a package url.'''\n  base = os.path.basename(url)\n  print('Fetching %s...' % base)\n  fetch_file(url + '.asc')\n  fetch_file(url)\n  fetch_file(url + '.sha256')\n  fetch_file(url + '.asc.sha256')\n  print('Verifying %s...' % base)\n  # TODO: check for verification failure.\n  subprocess.check_call(['shasum', '-c', base + '.sha256'])\n  subprocess.check_call(['shasum', '-c', base + '.asc.sha256'])\n  subprocess.check_call(['gpg', '--verify', base + '.asc', base])\n  subprocess.check_call(['keybase', 'verify', base + '.asc'])", "line_changes": {"deleted": [{"line_no": 11, "char_start": 308, "char_end": 350, "line": "  os.system('shasum -c %s.sha256' % base)\n"}, {"line_no": 12, "char_start": 350, "char_end": 396, "line": "  os.system('shasum -c %s.asc.sha256' % base)\n"}, {"line_no": 13, "char_start": 396, "char_end": 449, "line": "  os.system('gpg --verify %s.asc %s' % (base, base))\n"}, {"line_no": 14, "char_start": 449, "char_end": 492, "line": "  os.system('keybase verify %s.asc' % base)\n"}], "added": [{"line_no": 11, "char_start": 308, "char_end": 368, "line": "  subprocess.check_call(['shasum', '-c', base + '.sha256'])\n"}, {"line_no": 12, "char_start": 368, "char_end": 432, "line": "  subprocess.check_call(['shasum', '-c', base + '.asc.sha256'])\n"}, {"line_no": 13, "char_start": 432, "char_end": 498, "line": "  subprocess.check_call(['gpg', '--verify', base + '.asc', base])\n"}, {"line_no": 14, "char_start": 498, "char_end": 559, "line": "  subprocess.check_call(['keybase', 'verify', base + '.asc'])\n"}]}, "char_changes": {"deleted": [{"char_start": 312, "char_end": 313, "chars": "."}, {"char_start": 314, "char_end": 317, "chars": "yst"}, {"char_start": 318, "char_end": 319, "chars": "m"}, {"char_start": 331, "char_end": 332, "chars": "%"}, {"char_start": 341, "char_end": 348, "chars": " % base"}, {"char_start": 353, "char_end": 355, "chars": "s."}, {"char_start": 356, "char_end": 357, "chars": "y"}, {"char_start": 358, "char_end": 359, "chars": "t"}, {"char_start": 360, "char_end": 361, "chars": "m"}, {"char_start": 373, "char_end": 374, "chars": "%"}, {"char_start": 387, "char_end": 394, "chars": " % base"}, {"char_start": 400, "char_end": 401, "chars": "."}, {"char_start": 402, "char_end": 405, "chars": "yst"}, {"char_start": 406, "char_end": 407, "chars": "m"}, {"char_start": 422, "char_end": 425, "chars": "%s."}, {"char_start": 427, "char_end": 432, "chars": "c %s'"}, {"char_start": 433, "char_end": 434, "chars": "%"}, {"char_start": 435, "char_end": 437, "chars": "(b"}, {"char_start": 439, "char_end": 440, "chars": "e"}, {"char_start": 446, "char_end": 447, "chars": ")"}, {"char_start": 453, "char_end": 454, "chars": "."}, {"char_start": 455, "char_end": 458, "chars": "yst"}, {"char_start": 459, "char_end": 460, "chars": "m"}, {"char_start": 477, "char_end": 480, "chars": "%s."}, {"char_start": 482, "char_end": 484, "chars": "c'"}, {"char_start": 485, "char_end": 486, "chars": "%"}, {"char_start": 487, "char_end": 488, "chars": "b"}, {"char_start": 490, "char_end": 491, "chars": "e"}], "added": [{"char_start": 310, "char_end": 315, "chars": "subpr"}, {"char_start": 316, "char_end": 319, "chars": "ces"}, {"char_start": 321, "char_end": 323, "chars": "ch"}, {"char_start": 324, "char_end": 331, "chars": "ck_call"}, {"char_start": 332, "char_end": 333, "chars": "["}, {"char_start": 340, "char_end": 342, "chars": "',"}, {"char_start": 343, "char_end": 344, "chars": "'"}, {"char_start": 346, "char_end": 348, "chars": "',"}, {"char_start": 349, "char_end": 351, "chars": "ba"}, {"char_start": 352, "char_end": 357, "chars": "e + '"}, {"char_start": 365, "char_end": 366, "chars": "]"}, {"char_start": 371, "char_end": 378, "chars": "ubproce"}, {"char_start": 380, "char_end": 383, "chars": ".ch"}, {"char_start": 384, "char_end": 391, "chars": "ck_call"}, {"char_start": 392, "char_end": 393, "chars": "["}, {"char_start": 400, "char_end": 402, "chars": "',"}, {"char_start": 403, "char_end": 404, "chars": "'"}, {"char_start": 406, "char_end": 408, "chars": "',"}, {"char_start": 409, "char_end": 411, "chars": "ba"}, {"char_start": 412, "char_end": 417, "chars": "e + '"}, {"char_start": 429, "char_end": 430, "chars": "]"}, {"char_start": 435, "char_end": 442, "chars": "ubproce"}, {"char_start": 444, "char_end": 447, "chars": ".ch"}, {"char_start": 448, "char_end": 455, "chars": "ck_call"}, {"char_start": 456, "char_end": 457, "chars": "["}, {"char_start": 461, "char_end": 463, "chars": "',"}, {"char_start": 464, "char_end": 465, "chars": "'"}, {"char_start": 473, "char_end": 475, "chars": "',"}, {"char_start": 476, "char_end": 478, "chars": "ba"}, {"char_start": 479, "char_end": 484, "chars": "e + '"}, {"char_start": 495, "char_end": 496, "chars": "]"}, {"char_start": 500, "char_end": 505, "chars": "subpr"}, {"char_start": 506, "char_end": 508, "chars": "ce"}, {"char_start": 510, "char_end": 513, "chars": ".ch"}, {"char_start": 514, "char_end": 521, "chars": "ck_call"}, {"char_start": 522, "char_end": 523, "chars": "["}, {"char_start": 531, "char_end": 533, "chars": "',"}, {"char_start": 534, "char_end": 535, "chars": "'"}, {"char_start": 541, "char_end": 543, "chars": "',"}, {"char_start": 544, "char_end": 546, "chars": "ba"}, {"char_start": 547, "char_end": 552, "chars": "e + '"}, {"char_start": 557, "char_end": 558, "chars": "]"}]}, "commit_link": "github.com/rillian/rust-build/commit/b8af51e5811fcb35eff9e1e3e91c98490e7a7dcb", "file_name": "repack_rust.py", "vul_type": "cwe-078"}
{"func_name": "_formatCredentials", "func_src_before": "    def _formatCredentials(self, data, name):\n        \"\"\"\n        Credentials are of the form\n        RCLONE_CONFIG_CURRENT_TYPE=s3\n            ^          ^        ^   ^\n        [mandatory  ][name  ][key][value]\n        \"\"\"\n\n        prefix = \"RCLONE_CONFIG_{}\".format(name.upper())\n\n        credentials = ''\n        credentials += \"{}_TYPE='{}' \".format(prefix, data.type)\n\n        def _addCredential(credentials, env_key, data_key):\n            value = getattr(data, data_key, None)\n            if value is not None:\n                credentials += \"{}='{}' \".format(env_key, value)\n            return credentials\n\n\n        if data.type == 's3':\n            credentials = _addCredential(credentials,\n                '{}_REGION'.format(prefix),\n                's3_region'\n            )\n            credentials = _addCredential(credentials,\n                '{}_ACCESS_KEY_ID'.format(prefix),\n                's3_access_key_id'\n            )\n            credentials = _addCredential(credentials,\n                '{}_SECRET_ACCESS_KEY'.format(prefix),\n                's3_secret_access_key'\n            )\n\n            credentials = _addCredential(credentials,\n                '{}_ENDPOINT'.format(prefix),\n                's3_endpoint'\n            )\n            credentials = _addCredential(credentials,\n                '{}_V2_AUTH'.format(prefix),\n                's3_v2_auth'\n            )\n\n        elif data.type == 'azureblob':\n            credentials = _addCredential(credentials,\n                '{}_ACCOUNT'.format(prefix),\n                'azure_account'\n            )\n            credentials = _addCredential(credentials,\n                '{}_KEY'.format(prefix),\n                'azure_key'\n            )\n\n        elif data.type == 'swift':\n            credentials = _addCredential(credentials,\n                '{}_USER'.format(prefix),\n                'swift_user'\n            )\n            credentials = _addCredential(credentials,\n                '{}_KEY'.format(prefix),\n                'swift_key'\n            )\n            credentials = _addCredential(credentials,\n                '{}_AUTH'.format(prefix),\n                'swift_auth'\n            )\n            credentials = _addCredential(credentials,\n                '{}_TENANT'.format(prefix),\n                'swift_tenant'\n            )\n\n        elif data.type == 'google cloud storage':\n            credentials = _addCredential(credentials,\n                '{}_CLIENT_ID'.format(prefix),\n                'gcp_client_id'\n            )\n            credentials = _addCredential(credentials,\n                '{}_SERVICE_ACCOUNT_CREDENTIALS'.format(prefix),\n                'gcp_service_account_credentials'\n            )\n            credentials = _addCredential(credentials,\n                '{}_PROJECT_NUMBER'.format(prefix),\n                'gcp_project_number'\n            )\n            credentials = _addCredential(credentials,\n                '{}_OBJECT_ACL'.format(prefix),\n                'gcp_object_acl'\n            )\n            credentials = _addCredential(credentials,\n                '{}_BUCKET_ACL'.format(prefix),\n                'gcp_bucket_acl'\n            )\n\n        else:\n            logging.error(\"Connection type unknown: {}\".format(data.type))\n\n        return credentials", "func_src_after": "    def _formatCredentials(self, data, name):\n        \"\"\"\n        Credentials are of the form\n        RCLONE_CONFIG_CURRENT_TYPE=s3\n            ^          ^        ^   ^\n        [mandatory  ][name  ][key][value]\n        \"\"\"\n\n        prefix = \"RCLONE_CONFIG_{}\".format(name.upper())\n\n        credentials = {}\n        credentials['{}_TYPE'.format(prefix)] = data.type\n\n        def _addCredential(credentials, env_key, data_key):\n            value = getattr(data, data_key, None)\n            if value is not None:\n                credentials[env_key] = value\n            return credentials\n\n\n        if data.type == 's3':\n            credentials = _addCredential(credentials,\n                '{}_REGION'.format(prefix),\n                's3_region'\n            )\n            credentials = _addCredential(credentials,\n                '{}_ACCESS_KEY_ID'.format(prefix),\n                's3_access_key_id'\n            )\n            credentials = _addCredential(credentials,\n                '{}_SECRET_ACCESS_KEY'.format(prefix),\n                's3_secret_access_key'\n            )\n\n            credentials = _addCredential(credentials,\n                '{}_ENDPOINT'.format(prefix),\n                's3_endpoint'\n            )\n            credentials = _addCredential(credentials,\n                '{}_V2_AUTH'.format(prefix),\n                's3_v2_auth'\n            )\n\n        elif data.type == 'azureblob':\n            credentials = _addCredential(credentials,\n                '{}_ACCOUNT'.format(prefix),\n                'azure_account'\n            )\n            credentials = _addCredential(credentials,\n                '{}_KEY'.format(prefix),\n                'azure_key'\n            )\n\n        elif data.type == 'swift':\n            credentials = _addCredential(credentials,\n                '{}_USER'.format(prefix),\n                'swift_user'\n            )\n            credentials = _addCredential(credentials,\n                '{}_KEY'.format(prefix),\n                'swift_key'\n            )\n            credentials = _addCredential(credentials,\n                '{}_AUTH'.format(prefix),\n                'swift_auth'\n            )\n            credentials = _addCredential(credentials,\n                '{}_TENANT'.format(prefix),\n                'swift_tenant'\n            )\n\n        elif data.type == 'google cloud storage':\n            credentials = _addCredential(credentials,\n                '{}_CLIENT_ID'.format(prefix),\n                'gcp_client_id'\n            )\n            credentials = _addCredential(credentials,\n                '{}_SERVICE_ACCOUNT_CREDENTIALS'.format(prefix),\n                'gcp_service_account_credentials'\n            )\n            credentials = _addCredential(credentials,\n                '{}_PROJECT_NUMBER'.format(prefix),\n                'gcp_project_number'\n            )\n            credentials = _addCredential(credentials,\n                '{}_OBJECT_ACL'.format(prefix),\n                'gcp_object_acl'\n            )\n            credentials = _addCredential(credentials,\n                '{}_BUCKET_ACL'.format(prefix),\n                'gcp_bucket_acl'\n            )\n\n        else:\n            logging.error(\"Connection type unknown: {}\".format(data.type))\n\n        return credentials", "line_changes": {"deleted": [{"line_no": 11, "char_start": 283, "char_end": 308, "line": "        credentials = ''\n"}, {"line_no": 12, "char_start": 308, "char_end": 373, "line": "        credentials += \"{}_TYPE='{}' \".format(prefix, data.type)\n"}, {"line_no": 17, "char_start": 518, "char_end": 583, "line": "                credentials += \"{}='{}' \".format(env_key, value)\n"}], "added": [{"line_no": 11, "char_start": 283, "char_end": 308, "line": "        credentials = {}\n"}, {"line_no": 12, "char_start": 308, "char_end": 366, "line": "        credentials['{}_TYPE'.format(prefix)] = data.type\n"}, {"line_no": 17, "char_start": 511, "char_end": 556, "line": "                credentials[env_key] = value\n"}]}, "char_changes": {"deleted": [{"char_start": 305, "char_end": 307, "chars": "''"}, {"char_start": 327, "char_end": 332, "chars": " += \""}, {"char_start": 339, "char_end": 340, "chars": "="}, {"char_start": 341, "char_end": 346, "chars": "{}' \""}, {"char_start": 360, "char_end": 361, "chars": ","}, {"char_start": 371, "char_end": 372, "chars": ")"}, {"char_start": 545, "char_end": 567, "chars": " += \"{}='{}' \".format("}, {"char_start": 574, "char_end": 575, "chars": ","}, {"char_start": 581, "char_end": 582, "chars": ")"}], "added": [{"char_start": 305, "char_end": 307, "chars": "{}"}, {"char_start": 327, "char_end": 329, "chars": "['"}, {"char_start": 351, "char_end": 355, "chars": ")] ="}, {"char_start": 538, "char_end": 539, "chars": "["}, {"char_start": 546, "char_end": 549, "chars": "] ="}]}, "commit_link": "github.com/FredHutch/motuz/commit/045468cb9bff47bb3bb72268b6d5a3fe44e383db", "file_name": "src/backend/api/utils/rclone_connection.py", "vul_type": "cwe-078"}
{"func_name": "initHeader", "func_src_before": "    def initHeader(self):\n        \"\"\"Initialize the IP header according to the IP format definition.\n\n        \"\"\"\n\n        # Ethernet header\n\n        # Retrieve remote MAC address\n        dstMacAddr = arpreq.arpreq(self.remoteIP)\n        if dstMacAddr is not None:\n            dstMacAddr = dstMacAddr.replace(':', '')\n            dstMacAddr = binascii.unhexlify(dstMacAddr)\n        else:\n            # Force ARP resolution\n            p = subprocess.Popen(\"ping -c1 {}\".format(self.remoteIP), shell=True)\n            p.wait()\n            time.sleep(0.1)\n\n            dstMacAddr = arpreq.arpreq(self.remoteIP)\n            if dstMacAddr is not None:\n                dstMacAddr = dstMacAddr.replace(':', '')\n                dstMacAddr = binascii.unhexlify(dstMacAddr)\n            else:\n                raise Exception(\"Cannot resolve IP address to a MAC address for IP: '{}'\".format(self.remoteIP))\n\n        # Retrieve local MAC address\n        srcMacAddr = self.get_interface_addr(bytes(self.interface, 'utf-8'))[1]\n\n        eth_dst = Field(name='eth.dst', domain=Raw(dstMacAddr))\n        eth_src = Field(name='eth.src', domain=Raw(srcMacAddr))\n        eth_type = Field(name='eth.type', domain=Raw(b\"\\x08\\x00\"))\n\n\n        # IP header\n\n        ip_ver = Field(\n            name='ip.version', domain=BitArray(\n                value=bitarray('0100')))  # IP Version 4\n        ip_ihl = Field(name='ip.hdr_len', domain=BitArray(bitarray('0000')))\n        ip_tos = Field(\n            name='ip.tos',\n            domain=Data(\n                dataType=BitArray(nbBits=8),\n                originalValue=bitarray('00000000'),\n                svas=SVAS.PERSISTENT))\n        ip_tot_len = Field(\n            name='ip.len', domain=BitArray(bitarray('0000000000000000')))\n        ip_id = Field(name='ip.id', domain=BitArray(nbBits=16))\n        ip_flags = Field(name='ip.flags', domain=Data(dataType=BitArray(nbBits=3), originalValue=bitarray('000'), svas=SVAS.PERSISTENT))\n        ip_frag_off = Field(name='ip.fragment', domain=Data(dataType=BitArray(nbBits=13), originalValue=bitarray('0000000000000'), svas=SVAS.PERSISTENT))\n        ip_ttl = Field(name='ip.ttl', domain=Data(dataType=BitArray(nbBits=8), originalValue=bitarray('01000000'), svas=SVAS.PERSISTENT))\n        ip_proto = Field(name='ip.proto', domain=Integer(value=self.upperProtocol, unitSize=AbstractType.UNITSIZE_8, endianness=AbstractType.ENDIAN_BIG, sign=AbstractType.SIGN_UNSIGNED))\n        ip_checksum = Field(name='ip.checksum', domain=BitArray(bitarray('0000000000000000')))\n        ip_saddr = Field(name='ip.src', domain=IPv4(self.localIP))\n        ip_daddr = Field(\n            name='ip.dst', domain=IPv4(self.remoteIP))\n        ip_payload = Field(name='ip.payload', domain=Raw())\n\n        ip_ihl.domain = Size([ip_ver,\n                              ip_ihl,\n                              ip_tos,\n                              ip_tot_len,\n                              ip_id, ip_flags,\n                              ip_frag_off,\n                              ip_ttl, ip_proto,\n                              ip_checksum,\n                              ip_saddr,\n                              ip_daddr], dataType=BitArray(nbBits=4), factor=1/float(32))\n        ip_tot_len.domain = Size([ip_ver,\n                                  ip_ihl,\n                                  ip_tos,\n                                  ip_tot_len,\n                                  ip_id,\n                                  ip_flags,\n                                  ip_frag_off,\n                                  ip_ttl,\n                                  ip_proto,\n                                  ip_checksum,\n                                  ip_saddr,\n                                  ip_daddr,\n                                  ip_payload], dataType=Integer(unitSize=AbstractType.UNITSIZE_16, sign=AbstractType.SIGN_UNSIGNED), factor=1/float(8))\n        ip_checksum.domain = InternetChecksum(fields=[ip_ver,\n                                                      ip_ihl,\n                                                      ip_tos,\n                                                      ip_tot_len,\n                                                      ip_id,\n                                                      ip_flags,\n                                                      ip_frag_off,\n                                                      ip_ttl,\n                                                      ip_proto,\n                                                      ip_checksum,\n                                                      ip_saddr,\n                                                      ip_daddr], dataType=Raw(nbBytes=2, unitSize=AbstractType.UNITSIZE_16))\n        \n        self.header = Symbol(name='Ethernet layer', fields=[eth_dst,\n                                                            eth_src,\n                                                            eth_type,\n                                                            ip_ver,\n                                                            ip_ihl,\n                                                            ip_tos,\n                                                            ip_tot_len,\n                                                            ip_id,\n                                                            ip_flags,\n                                                            ip_frag_off,\n                                                            ip_ttl,\n                                                            ip_proto,\n                                                            ip_checksum,\n                                                            ip_saddr,\n                                                            ip_daddr,\n                                                            ip_payload])", "func_src_after": "    def initHeader(self):\n        \"\"\"Initialize the IP header according to the IP format definition.\n\n        \"\"\"\n\n        # Ethernet header\n\n        # Retrieve remote MAC address\n        dstMacAddr = arpreq.arpreq(self.remoteIP)\n        if dstMacAddr is not None:\n            dstMacAddr = dstMacAddr.replace(':', '')\n            dstMacAddr = binascii.unhexlify(dstMacAddr)\n        else:\n            # Force ARP resolution\n            p = subprocess.Popen([\"/bin/ping\", \"-c1\", self.remoteIP])\n            p.wait()\n            time.sleep(0.1)\n\n            dstMacAddr = arpreq.arpreq(self.remoteIP)\n            if dstMacAddr is not None:\n                dstMacAddr = dstMacAddr.replace(':', '')\n                dstMacAddr = binascii.unhexlify(dstMacAddr)\n            else:\n                raise Exception(\"Cannot resolve IP address to a MAC address for IP: '{}'\".format(self.remoteIP))\n\n        # Retrieve local MAC address\n        srcMacAddr = self.get_interface_addr(bytes(self.interface, 'utf-8'))[1]\n\n        eth_dst = Field(name='eth.dst', domain=Raw(dstMacAddr))\n        eth_src = Field(name='eth.src', domain=Raw(srcMacAddr))\n        eth_type = Field(name='eth.type', domain=Raw(b\"\\x08\\x00\"))\n\n\n        # IP header\n\n        ip_ver = Field(\n            name='ip.version', domain=BitArray(\n                value=bitarray('0100')))  # IP Version 4\n        ip_ihl = Field(name='ip.hdr_len', domain=BitArray(bitarray('0000')))\n        ip_tos = Field(\n            name='ip.tos',\n            domain=Data(\n                dataType=BitArray(nbBits=8),\n                originalValue=bitarray('00000000'),\n                svas=SVAS.PERSISTENT))\n        ip_tot_len = Field(\n            name='ip.len', domain=BitArray(bitarray('0000000000000000')))\n        ip_id = Field(name='ip.id', domain=BitArray(nbBits=16))\n        ip_flags = Field(name='ip.flags', domain=Data(dataType=BitArray(nbBits=3), originalValue=bitarray('000'), svas=SVAS.PERSISTENT))\n        ip_frag_off = Field(name='ip.fragment', domain=Data(dataType=BitArray(nbBits=13), originalValue=bitarray('0000000000000'), svas=SVAS.PERSISTENT))\n        ip_ttl = Field(name='ip.ttl', domain=Data(dataType=BitArray(nbBits=8), originalValue=bitarray('01000000'), svas=SVAS.PERSISTENT))\n        ip_proto = Field(name='ip.proto', domain=Integer(value=self.upperProtocol, unitSize=AbstractType.UNITSIZE_8, endianness=AbstractType.ENDIAN_BIG, sign=AbstractType.SIGN_UNSIGNED))\n        ip_checksum = Field(name='ip.checksum', domain=BitArray(bitarray('0000000000000000')))\n        ip_saddr = Field(name='ip.src', domain=IPv4(self.localIP))\n        ip_daddr = Field(\n            name='ip.dst', domain=IPv4(self.remoteIP))\n        ip_payload = Field(name='ip.payload', domain=Raw())\n\n        ip_ihl.domain = Size([ip_ver,\n                              ip_ihl,\n                              ip_tos,\n                              ip_tot_len,\n                              ip_id, ip_flags,\n                              ip_frag_off,\n                              ip_ttl, ip_proto,\n                              ip_checksum,\n                              ip_saddr,\n                              ip_daddr], dataType=BitArray(nbBits=4), factor=1/float(32))\n        ip_tot_len.domain = Size([ip_ver,\n                                  ip_ihl,\n                                  ip_tos,\n                                  ip_tot_len,\n                                  ip_id,\n                                  ip_flags,\n                                  ip_frag_off,\n                                  ip_ttl,\n                                  ip_proto,\n                                  ip_checksum,\n                                  ip_saddr,\n                                  ip_daddr,\n                                  ip_payload], dataType=Integer(unitSize=AbstractType.UNITSIZE_16, sign=AbstractType.SIGN_UNSIGNED), factor=1/float(8))\n        ip_checksum.domain = InternetChecksum(fields=[ip_ver,\n                                                      ip_ihl,\n                                                      ip_tos,\n                                                      ip_tot_len,\n                                                      ip_id,\n                                                      ip_flags,\n                                                      ip_frag_off,\n                                                      ip_ttl,\n                                                      ip_proto,\n                                                      ip_checksum,\n                                                      ip_saddr,\n                                                      ip_daddr], dataType=Raw(nbBytes=2, unitSize=AbstractType.UNITSIZE_16))\n        \n        self.header = Symbol(name='Ethernet layer', fields=[eth_dst,\n                                                            eth_src,\n                                                            eth_type,\n                                                            ip_ver,\n                                                            ip_ihl,\n                                                            ip_tos,\n                                                            ip_tot_len,\n                                                            ip_id,\n                                                            ip_flags,\n                                                            ip_frag_off,\n                                                            ip_ttl,\n                                                            ip_proto,\n                                                            ip_checksum,\n                                                            ip_saddr,\n                                                            ip_daddr,\n                                                            ip_payload])", "line_changes": {"deleted": [{"line_no": 15, "char_start": 423, "char_end": 505, "line": "            p = subprocess.Popen(\"ping -c1 {}\".format(self.remoteIP), shell=True)\n"}], "added": [{"line_no": 15, "char_start": 423, "char_end": 493, "line": "            p = subprocess.Popen([\"/bin/ping\", \"-c1\", self.remoteIP])\n"}]}, "char_changes": {"deleted": [{"char_start": 465, "char_end": 468, "chars": " {}"}, {"char_start": 469, "char_end": 477, "chars": ".format("}, {"char_start": 490, "char_end": 503, "chars": "), shell=True"}], "added": [{"char_start": 456, "char_end": 457, "chars": "["}, {"char_start": 458, "char_end": 463, "chars": "/bin/"}, {"char_start": 467, "char_end": 469, "chars": "\","}, {"char_start": 470, "char_end": 471, "chars": "\""}, {"char_start": 475, "char_end": 477, "chars": ", "}, {"char_start": 490, "char_end": 491, "chars": "]"}]}, "commit_link": "github.com/netzob/netzob/commit/557abf64867d715497979b029efedbd2777b912e", "file_name": "src/netzob/Simulator/Channels/RawEthernetClient.py", "vul_type": "cwe-078"}
{"func_name": "poll", "func_src_before": "    def poll(self, poll_input):\n        username = poll_input.credentials.username\n        password = poll_input.credentials.password\n        domain = poll_input.credentials.domain\n        \n        if domain is None:\n            opt_str = '--ignore-certificate --authonly -u {} -p {} {}:{}'\n            options = opt_str.format(\n                    username, password,\n                    poll_input.server, poll_input.port)\n        else:\n            opt_str = '--ignore-certificate --authonly -d {} -u {} -p {} {}:{}'\n            options = opt_str.format(\n                    domain.domain, username, password,\n                    poll_input.server, poll_input.port)\n\n        try:\n            output = subprocess.check_output('timeout {} xfreerdp {}'.format(poll_input.timeout, options), shell=True, stderr=subprocess.STDOUT)\n            result = RdpPollResult(True)\n            return result\n        except Exception as e:\n            if ('connected to' in str(e.output) and 'Authentication failure' not in str(e.output)) or (e.returncode == 131 and 'negotiation' in str(e.output)):\n                result = RdpPollResult(True)\n                return result\n            print(\"{{{{%s}}}}\" % e.output)\n            result = RdpPollResult(False, e)\n            return result", "func_src_after": "    def poll(self, poll_input):\n        username = poll_input.credentials.username\n        password = poll_input.credentials.password\n        domain = poll_input.credentials.domain\n        \n        if domain is None:\n            opt_str = '--ignore-certificate --authonly -u \\'{}\\' -p \\'{}\\' {}:{}'\n            options = opt_str.format(\n                    username, password,\n                    poll_input.server, poll_input.port)\n        else:\n            opt_str = '--ignore-certificate --authonly -d {} -u \\'{}\\' -p \\'{}\\' {}:{}'\n            options = opt_str.format(\n                    domain.domain, username, password,\n                    poll_input.server, poll_input.port)\n\n        try:\n            output = subprocess.check_output('timeout {} xfreerdp {}'.format(poll_input.timeout, options), shell=True, stderr=subprocess.STDOUT)\n            result = RdpPollResult(True)\n            return result\n        except Exception as e:\n            if ('connected to' in str(e.output) and 'Authentication failure' not in str(e.output)) or (e.returncode == 131 and 'negotiation' in str(e.output)):\n                result = RdpPollResult(True)\n                return result\n            print(\"{{{{%s}}}}\" % e.output)\n            result = RdpPollResult(False, e)\n            return result", "line_changes": {"deleted": [{"line_no": 7, "char_start": 217, "char_end": 291, "line": "            opt_str = '--ignore-certificate --authonly -u {} -p {} {}:{}'\n"}, {"line_no": 12, "char_start": 439, "char_end": 519, "line": "            opt_str = '--ignore-certificate --authonly -d {} -u {} -p {} {}:{}'\n"}], "added": [{"line_no": 7, "char_start": 217, "char_end": 299, "line": "            opt_str = '--ignore-certificate --authonly -u \\'{}\\' -p \\'{}\\' {}:{}'\n"}, {"line_no": 12, "char_start": 447, "char_end": 535, "line": "            opt_str = '--ignore-certificate --authonly -d {} -u \\'{}\\' -p \\'{}\\' {}:{}'\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 275, "char_end": 277, "chars": "\\'"}, {"char_start": 279, "char_end": 281, "chars": "\\'"}, {"char_start": 285, "char_end": 287, "chars": "\\'"}, {"char_start": 289, "char_end": 291, "chars": "\\'"}, {"char_start": 511, "char_end": 513, "chars": "\\'"}, {"char_start": 515, "char_end": 517, "chars": "\\'"}, {"char_start": 521, "char_end": 523, "chars": "\\'"}, {"char_start": 525, "char_end": 527, "chars": "\\'"}]}, "commit_link": "github.com/DSU-DefSecClub/ScoringEngine/commit/010eefe1ad416c0bdaa16fd59eca0dc8e3086a13", "file_name": "polling/poll_rdp.py", "vul_type": "cwe-078"}
{"func_name": "terminate_connection", "func_src_before": "    def terminate_connection(self, volume, connector, **kwargs):\n        \"\"\"Cleanup after an iSCSI connection has been terminated.\n\n        When we clean up a terminated connection between a given connector\n        and volume, we:\n        1. Translate the given connector to a host name\n        2. Remove the volume-to-host mapping if it exists\n        3. Delete the host if it has no more mappings (hosts are created\n           automatically by this driver when mappings are created)\n        \"\"\"\n        LOG.debug(_('enter: terminate_connection: volume %(vol)s with '\n                    'connector %(conn)s') % {'vol': str(volume),\n                                             'conn': str(connector)})\n\n        vol_name = volume['name']\n        host_name = self._get_host_from_connector(connector)\n        # Verify that _get_host_from_connector returned the host.\n        # This should always succeed as we terminate an existing connection.\n        self._driver_assert(\n            host_name is not None,\n            _('_get_host_from_connector failed to return the host name '\n              'for connector'))\n\n        # Check if vdisk-host mapping exists, remove if it does\n        mapping_data = self._get_hostvdisk_mappings(host_name)\n        if vol_name in mapping_data:\n            ssh_cmd = 'svctask rmvdiskhostmap -host %s %s' % \\\n                (host_name, vol_name)\n            out, err = self._run_ssh(ssh_cmd)\n            # Verify CLI behaviour - no output is returned from\n            # rmvdiskhostmap\n            self._assert_ssh_return(len(out.strip()) == 0,\n                                    'terminate_connection', ssh_cmd, out, err)\n            del mapping_data[vol_name]\n        else:\n            LOG.error(_('terminate_connection: No mapping of volume '\n                        '%(vol_name)s to host %(host_name)s found') %\n                      {'vol_name': vol_name, 'host_name': host_name})\n\n        # If this host has no more mappings, delete it\n        if not mapping_data:\n            self._delete_host(host_name)\n\n        LOG.debug(_('leave: terminate_connection: volume %(vol)s with '\n                    'connector %(conn)s') % {'vol': str(volume),\n                                             'conn': str(connector)})", "func_src_after": "    def terminate_connection(self, volume, connector, **kwargs):\n        \"\"\"Cleanup after an iSCSI connection has been terminated.\n\n        When we clean up a terminated connection between a given connector\n        and volume, we:\n        1. Translate the given connector to a host name\n        2. Remove the volume-to-host mapping if it exists\n        3. Delete the host if it has no more mappings (hosts are created\n           automatically by this driver when mappings are created)\n        \"\"\"\n        LOG.debug(_('enter: terminate_connection: volume %(vol)s with '\n                    'connector %(conn)s') % {'vol': str(volume),\n                                             'conn': str(connector)})\n\n        vol_name = volume['name']\n        host_name = self._get_host_from_connector(connector)\n        # Verify that _get_host_from_connector returned the host.\n        # This should always succeed as we terminate an existing connection.\n        self._driver_assert(\n            host_name is not None,\n            _('_get_host_from_connector failed to return the host name '\n              'for connector'))\n\n        # Check if vdisk-host mapping exists, remove if it does\n        mapping_data = self._get_hostvdisk_mappings(host_name)\n        if vol_name in mapping_data:\n            ssh_cmd = ['svctask', 'rmvdiskhostmap', '-host', host_name,\n                       vol_name]\n            out, err = self._run_ssh(ssh_cmd)\n            # Verify CLI behaviour - no output is returned from\n            # rmvdiskhostmap\n            self._assert_ssh_return(len(out.strip()) == 0,\n                                    'terminate_connection', ssh_cmd, out, err)\n            del mapping_data[vol_name]\n        else:\n            LOG.error(_('terminate_connection: No mapping of volume '\n                        '%(vol_name)s to host %(host_name)s found') %\n                      {'vol_name': vol_name, 'host_name': host_name})\n\n        # If this host has no more mappings, delete it\n        if not mapping_data:\n            self._delete_host(host_name)\n\n        LOG.debug(_('leave: terminate_connection: volume %(vol)s with '\n                    'connector %(conn)s') % {'vol': str(volume),\n                                             'conn': str(connector)})", "line_changes": {"deleted": [{"line_no": 27, "char_start": 1277, "char_end": 1340, "line": "            ssh_cmd = 'svctask rmvdiskhostmap -host %s %s' % \\\n"}, {"line_no": 28, "char_start": 1340, "char_end": 1378, "line": "                (host_name, vol_name)\n"}], "added": [{"line_no": 27, "char_start": 1277, "char_end": 1349, "line": "            ssh_cmd = ['svctask', 'rmvdiskhostmap', '-host', host_name,\n"}, {"line_no": 28, "char_start": 1349, "char_end": 1382, "line": "                       vol_name]\n"}]}, "char_changes": {"deleted": [{"char_start": 1329, "char_end": 1330, "chars": "%"}, {"char_start": 1332, "char_end": 1340, "chars": "%s' % \\\n"}, {"char_start": 1356, "char_end": 1367, "chars": "(host_name,"}, {"char_start": 1376, "char_end": 1377, "chars": ")"}], "added": [{"char_start": 1299, "char_end": 1300, "chars": "["}, {"char_start": 1308, "char_end": 1310, "chars": "',"}, {"char_start": 1311, "char_end": 1312, "chars": "'"}, {"char_start": 1326, "char_end": 1328, "chars": "',"}, {"char_start": 1329, "char_end": 1330, "chars": "'"}, {"char_start": 1335, "char_end": 1337, "chars": "',"}, {"char_start": 1338, "char_end": 1340, "chars": "ho"}, {"char_start": 1341, "char_end": 1350, "chars": "t_name,\n "}, {"char_start": 1367, "char_end": 1371, "chars": "    "}, {"char_start": 1380, "char_end": 1381, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
{"func_name": "_port_conf_generator", "func_src_before": "    def _port_conf_generator(self, cmd):\n        ssh_cmd = '%s -delim !' % cmd\n        out, err = self._run_ssh(ssh_cmd)\n\n        if not len(out.strip()):\n            return\n        port_lines = out.strip().split('\\n')\n        if not len(port_lines):\n            return\n\n        header = port_lines.pop(0)\n        yield header\n        for portip_line in port_lines:\n            try:\n                port_data = self._get_hdr_dic(header, portip_line, '!')\n            except exception.VolumeBackendAPIException:\n                with excutils.save_and_reraise_exception():\n                    self._log_cli_output_error('_port_conf_generator',\n                                               ssh_cmd, out, err)\n            yield port_data", "func_src_after": "    def _port_conf_generator(self, cmd):\n        ssh_cmd = cmd + ['-delim', '!']\n        out, err = self._run_ssh(ssh_cmd)\n\n        if not len(out.strip()):\n            return\n        port_lines = out.strip().split('\\n')\n        if not len(port_lines):\n            return\n\n        header = port_lines.pop(0)\n        yield header\n        for portip_line in port_lines:\n            try:\n                port_data = self._get_hdr_dic(header, portip_line, '!')\n            except exception.VolumeBackendAPIException:\n                with excutils.save_and_reraise_exception():\n                    self._log_cli_output_error('_port_conf_generator',\n                                               ssh_cmd, out, err)\n            yield port_data", "line_changes": {"deleted": [{"line_no": 2, "char_start": 41, "char_end": 79, "line": "        ssh_cmd = '%s -delim !' % cmd\n"}], "added": [{"line_no": 2, "char_start": 41, "char_end": 81, "line": "        ssh_cmd = cmd + ['-delim', '!']\n"}]}, "char_changes": {"deleted": [{"char_start": 59, "char_end": 62, "chars": "'%s"}, {"char_start": 72, "char_end": 78, "chars": " % cmd"}], "added": [{"char_start": 59, "char_end": 64, "chars": "cmd +"}, {"char_start": 65, "char_end": 67, "chars": "['"}, {"char_start": 73, "char_end": 75, "chars": "',"}, {"char_start": 76, "char_end": 77, "chars": "'"}, {"char_start": 79, "char_end": 80, "chars": "]"}]}, "commit_link": "github.com/thatsdone/cinder/commit/f752302d181583a95cf44354aea607ce9d9283f4", "file_name": "cinder/volume/drivers/storwize_svc.py", "vul_type": "cwe-078"}
