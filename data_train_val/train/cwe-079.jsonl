{"func_name": "init_settings", "func_src_before": "    def init_settings(self, ipython_app, kernel_manager, contents_manager,\n                      cluster_manager, session_manager, kernel_spec_manager,\n                      config_manager,\n                      log, base_url, default_url, settings_overrides,\n                      jinja_env_options=None):\n\n        _template_path = settings_overrides.get(\n            \"template_path\",\n            ipython_app.template_file_path,\n        )\n        if isinstance(_template_path, py3compat.string_types):\n            _template_path = (_template_path,)\n        template_path = [os.path.expanduser(path) for path in _template_path]\n\n        jenv_opt = jinja_env_options if jinja_env_options else {}\n        env = Environment(loader=FileSystemLoader(template_path), **jenv_opt)\n        \n        sys_info = get_sys_info()\n        if sys_info['commit_source'] == 'repository':\n            # don't cache (rely on 304) when working from master\n            version_hash = ''\n        else:\n            # reset the cache on server restart\n            version_hash = datetime.datetime.now().strftime(\"%Y%m%d%H%M%S\")\n\n        settings = dict(\n            # basics\n            log_function=log_request,\n            base_url=base_url,\n            default_url=default_url,\n            template_path=template_path,\n            static_path=ipython_app.static_file_path,\n            static_handler_class = FileFindHandler,\n            static_url_prefix = url_path_join(base_url,'/static/'),\n            static_handler_args = {\n                # don't cache custom.js\n                'no_cache_paths': [url_path_join(base_url, 'static', 'custom')],\n            },\n            version_hash=version_hash,\n            \n            # authentication\n            cookie_secret=ipython_app.cookie_secret,\n            login_url=url_path_join(base_url,'/login'),\n            login_handler_class=ipython_app.login_handler_class,\n            logout_handler_class=ipython_app.logout_handler_class,\n            password=ipython_app.password,\n\n            # managers\n            kernel_manager=kernel_manager,\n            contents_manager=contents_manager,\n            cluster_manager=cluster_manager,\n            session_manager=session_manager,\n            kernel_spec_manager=kernel_spec_manager,\n            config_manager=config_manager,\n\n            # IPython stuff\n            jinja_template_vars=ipython_app.jinja_template_vars,\n            nbextensions_path=ipython_app.nbextensions_path,\n            websocket_url=ipython_app.websocket_url,\n            mathjax_url=ipython_app.mathjax_url,\n            config=ipython_app.config,\n            jinja2_env=env,\n            terminals_available=False,  # Set later if terminals are available\n        )\n\n        # allow custom overrides for the tornado web app.\n        settings.update(settings_overrides)\n        return settings", "func_src_after": "    def init_settings(self, ipython_app, kernel_manager, contents_manager,\n                      cluster_manager, session_manager, kernel_spec_manager,\n                      config_manager,\n                      log, base_url, default_url, settings_overrides,\n                      jinja_env_options=None):\n\n        _template_path = settings_overrides.get(\n            \"template_path\",\n            ipython_app.template_file_path,\n        )\n        if isinstance(_template_path, py3compat.string_types):\n            _template_path = (_template_path,)\n        template_path = [os.path.expanduser(path) for path in _template_path]\n\n        jenv_opt = {\"autoescape\": True}\n        jenv_opt.update(jinja_env_options if jinja_env_options else {})\n\n        env = Environment(loader=FileSystemLoader(template_path), **jenv_opt)\n        \n        sys_info = get_sys_info()\n        if sys_info['commit_source'] == 'repository':\n            # don't cache (rely on 304) when working from master\n            version_hash = ''\n        else:\n            # reset the cache on server restart\n            version_hash = datetime.datetime.now().strftime(\"%Y%m%d%H%M%S\")\n\n        settings = dict(\n            # basics\n            log_function=log_request,\n            base_url=base_url,\n            default_url=default_url,\n            template_path=template_path,\n            static_path=ipython_app.static_file_path,\n            static_handler_class = FileFindHandler,\n            static_url_prefix = url_path_join(base_url,'/static/'),\n            static_handler_args = {\n                # don't cache custom.js\n                'no_cache_paths': [url_path_join(base_url, 'static', 'custom')],\n            },\n            version_hash=version_hash,\n            \n            # authentication\n            cookie_secret=ipython_app.cookie_secret,\n            login_url=url_path_join(base_url,'/login'),\n            login_handler_class=ipython_app.login_handler_class,\n            logout_handler_class=ipython_app.logout_handler_class,\n            password=ipython_app.password,\n\n            # managers\n            kernel_manager=kernel_manager,\n            contents_manager=contents_manager,\n            cluster_manager=cluster_manager,\n            session_manager=session_manager,\n            kernel_spec_manager=kernel_spec_manager,\n            config_manager=config_manager,\n\n            # IPython stuff\n            jinja_template_vars=ipython_app.jinja_template_vars,\n            nbextensions_path=ipython_app.nbextensions_path,\n            websocket_url=ipython_app.websocket_url,\n            mathjax_url=ipython_app.mathjax_url,\n            config=ipython_app.config,\n            jinja2_env=env,\n            terminals_available=False,  # Set later if terminals are available\n        )\n\n        # allow custom overrides for the tornado web app.\n        settings.update(settings_overrides)\n        return settings", "line_changes": {"deleted": [{"line_no": 15, "char_start": 629, "char_end": 695, "line": "        jenv_opt = jinja_env_options if jinja_env_options else {}\n"}], "added": [{"line_no": 15, "char_start": 629, "char_end": 669, "line": "        jenv_opt = {\"autoescape\": True}\n"}, {"line_no": 16, "char_start": 669, "char_end": 741, "line": "        jenv_opt.update(jinja_env_options if jinja_env_options else {})\n"}, {"line_no": 17, "char_start": 741, "char_end": 742, "line": "\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 648, "char_end": 693, "chars": "{\"autoescape\": True}\n        jenv_opt.update("}, {"char_start": 739, "char_end": 741, "chars": ")\n"}]}, "commit_link": "github.com/ipython/ipython/commit/3ab41641cf6fce3860c73d5cf4645aa12e1e5892", "file_name": "IPython/html/notebookapp.py", "vul_type": "cwe-079"}
{"func_name": "DeletionConfirmationDlg::DeletionConfirmationDlg", "func_src_before": "  DeletionConfirmationDlg(QWidget *parent, const int &size, const QString &name, bool defaultDeleteFiles): QDialog(parent) {\n    setupUi(this);\n    if (size == 1)\n      label->setText(tr(\"Are you sure you want to delete '%1' from the transfer list?\", \"Are you sure you want to delete 'ubuntu-linux-iso' from the transfer list?\").arg(name));\n    else\n      label->setText(tr(\"Are you sure you want to delete these %1 torrents from the transfer list?\", \"Are you sure you want to delete these 5 torrents from the transfer list?\").arg(QString::number(size)));\n    // Icons\n    lbl_warn->setPixmap(GuiIconProvider::instance()->getIcon(\"dialog-warning\").pixmap(lbl_warn->height()));\n    lbl_warn->setFixedWidth(lbl_warn->height());\n    rememberBtn->setIcon(GuiIconProvider::instance()->getIcon(\"object-locked\"));\n\n    move(Utils::Misc::screenCenter(this));\n    checkPermDelete->setChecked(defaultDeleteFiles || Preferences::instance()->deleteTorrentFilesAsDefault());\n    connect(checkPermDelete, SIGNAL(clicked()), this, SLOT(updateRememberButtonState()));\n    buttonBox->button(QDialogButtonBox::Cancel)->setFocus();\n  }", "func_src_after": "  DeletionConfirmationDlg(QWidget *parent, const int &size, const QString &name, bool defaultDeleteFiles): QDialog(parent) {\n    setupUi(this);\n    if (size == 1)\n      label->setText(tr(\"Are you sure you want to delete '%1' from the transfer list?\", \"Are you sure you want to delete 'ubuntu-linux-iso' from the transfer list?\").arg(Utils::String::toHtmlEscaped(name)));\n    else\n      label->setText(tr(\"Are you sure you want to delete these %1 torrents from the transfer list?\", \"Are you sure you want to delete these 5 torrents from the transfer list?\").arg(QString::number(size)));\n    // Icons\n    lbl_warn->setPixmap(GuiIconProvider::instance()->getIcon(\"dialog-warning\").pixmap(lbl_warn->height()));\n    lbl_warn->setFixedWidth(lbl_warn->height());\n    rememberBtn->setIcon(GuiIconProvider::instance()->getIcon(\"object-locked\"));\n\n    move(Utils::Misc::screenCenter(this));\n    checkPermDelete->setChecked(defaultDeleteFiles || Preferences::instance()->deleteTorrentFilesAsDefault());\n    connect(checkPermDelete, SIGNAL(clicked()), this, SLOT(updateRememberButtonState()));\n    buttonBox->button(QDialogButtonBox::Cancel)->setFocus();\n  }", "line_changes": {"deleted": [{"line_no": 4, "char_start": 163, "char_end": 341, "line": "      label->setText(tr(\"Are you sure you want to delete '%1' from the transfer list?\", \"Are you sure you want to delete 'ubuntu-linux-iso' from the transfer list?\").arg(name));\n"}], "added": [{"line_no": 4, "char_start": 163, "char_end": 371, "line": "      label->setText(tr(\"Are you sure you want to delete '%1' from the transfer list?\", \"Are you sure you want to delete 'ubuntu-linux-iso' from the transfer list?\").arg(Utils::String::toHtmlEscaped(name)));\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 333, "char_end": 362, "chars": "Utils::String::toHtmlEscaped("}, {"char_start": 366, "char_end": 367, "chars": ")"}]}, "commit_link": "github.com/qbittorrent/qBittorrent/commit/6ca3e4f094da0a0017cb2d483ec1db6176bb0b16", "file_name": "src/gui/deletionconfirmationdlg.h", "vul_type": "cwe-079"}
{"func_name": "get", "func_src_before": "  @auth.public\n  def get(self, build_id):\n    try:\n      build_id = int(build_id)\n    except ValueError as ex:\n      self.response.write(ex.message)\n      self.abort(400)\n\n    build = model.Build.get_by_id(build_id)\n    can_view = build and user.can_view_build_async(build).get_result()\n\n    if not can_view:\n      if auth.get_current_identity().is_anonymous:\n        return self.redirect(gae_users.create_login_url(self.request.url))\n      self.response.write('build %d not found' % build_id)\n      self.abort(404)\n\n    return self.redirect(str(build.url))", "func_src_after": "  @auth.public\n  def get(self, build_id):\n    try:\n      build_id = int(build_id)\n    except ValueError:\n      self.response.write('invalid build id')\n      self.abort(400)\n\n    build = model.Build.get_by_id(build_id)\n    can_view = build and user.can_view_build_async(build).get_result()\n\n    if not can_view:\n      if auth.get_current_identity().is_anonymous:\n        return self.redirect(self.create_login_url(self.request.url))\n      self.response.write('build %d not found' % build_id)\n      self.abort(404)\n\n    return self.redirect(str(build.url))", "line_changes": {"deleted": [{"line_no": 5, "char_start": 82, "char_end": 111, "line": "    except ValueError as ex:\n"}, {"line_no": 6, "char_start": 111, "char_end": 149, "line": "      self.response.write(ex.message)\n"}, {"line_no": 14, "char_start": 360, "char_end": 435, "line": "        return self.redirect(gae_users.create_login_url(self.request.url))\n"}], "added": [{"line_no": 5, "char_start": 82, "char_end": 105, "line": "    except ValueError:\n"}, {"line_no": 6, "char_start": 105, "char_end": 151, "line": "      self.response.write('invalid build id')\n"}, {"line_no": 14, "char_start": 362, "char_end": 432, "line": "        return self.redirect(self.create_login_url(self.request.url))\n"}]}, "char_changes": {"deleted": [{"char_start": 103, "char_end": 109, "chars": " as ex"}, {"char_start": 137, "char_end": 144, "chars": "ex.mess"}, {"char_start": 145, "char_end": 147, "chars": "ge"}, {"char_start": 389, "char_end": 394, "chars": "gae_u"}, {"char_start": 396, "char_end": 398, "chars": "rs"}], "added": [{"char_start": 131, "char_end": 135, "chars": "'inv"}, {"char_start": 136, "char_end": 149, "chars": "lid build id'"}, {"char_start": 393, "char_end": 395, "chars": "lf"}]}, "commit_link": "github.com/asdfghjjklllllaaa/infra/commit/2f39f3df54fb79b56744f00bcf97583b3807851f", "file_name": "appengine/cr-buildbucket/handlers.py", "vul_type": "cwe-079"}
{"func_name": "index", "func_src_before": "def index(request, is_mobile=False):\n  hue_collections = DashboardController(request.user).get_search_collections()\n  collection_id = request.GET.get('collection')\n\n  if not hue_collections or not collection_id:\n    return admin_collections(request, True, is_mobile)\n\n  try:\n    collection_doc = Document2.objects.get(id=collection_id)\n    if USE_NEW_EDITOR.get():\n      collection_doc.can_read_or_exception(request.user)\n    else:\n      collection_doc.doc.get().can_read_or_exception(request.user)\n    collection = Collection2(request.user, document=collection_doc)\n  except Exception, e:\n    raise PopupException(e, title=_(\"Dashboard does not exist or you don't have the permission to access it.\"))\n\n  query = {'qs': [{'q': ''}], 'fqs': [], 'start': 0}\n\n  if request.method == 'GET':\n    if 'q' in request.GET:\n      query['qs'][0]['q'] = request.GET.get('q')\n    if 'qd' in request.GET:\n      query['qd'] = request.GET.get('qd')\n\n  template = 'search.mako'\n  if is_mobile:\n    template = 'search_m.mako'\n\n  return render(template, request, {\n    'collection': collection,\n    'query': json.dumps(query),\n    'initial': json.dumps({\n        'collections': [],\n        'layout': DEFAULT_LAYOUT,\n        'is_latest': LATEST.get(),\n        'engines': get_engines(request.user)\n    }),\n    'is_owner': collection_doc.doc.get().can_write(request.user),\n    'can_edit_index': can_edit_index(request.user),\n    'is_embeddable': request.GET.get('is_embeddable', False),\n    'mobile': is_mobile,\n  })", "func_src_after": "def index(request, is_mobile=False):\n  hue_collections = DashboardController(request.user).get_search_collections()\n  collection_id = request.GET.get('collection')\n\n  if not hue_collections or not collection_id:\n    return admin_collections(request, True, is_mobile)\n\n  try:\n    collection_doc = Document2.objects.get(id=collection_id)\n    if USE_NEW_EDITOR.get():\n      collection_doc.can_read_or_exception(request.user)\n    else:\n      collection_doc.doc.get().can_read_or_exception(request.user)\n    collection = Collection2(request.user, document=collection_doc)\n  except Exception, e:\n    raise PopupException(e, title=_(\"Dashboard does not exist or you don't have the permission to access it.\"))\n\n  query = {'qs': [{'q': ''}], 'fqs': [], 'start': 0}\n\n  if request.method == 'GET':\n    if 'q' in request.GET:\n      query['qs'][0]['q'] = antixss(request.GET.get('q', ''))\n    if 'qd' in request.GET:\n      query['qd'] = antixss(request.GET.get('qd', ''))\n\n  template = 'search.mako'\n  if is_mobile:\n    template = 'search_m.mako'\n\n  return render(template, request, {\n    'collection': collection,\n    'query': json.dumps(query),\n    'initial': json.dumps({\n        'collections': [],\n        'layout': DEFAULT_LAYOUT,\n        'is_latest': LATEST.get(),\n        'engines': get_engines(request.user)\n    }),\n    'is_owner': collection_doc.can_write(request.user) if USE_NEW_EDITOR.get() else collection_doc.doc.get().can_write(request.user),\n    'can_edit_index': can_edit_index(request.user),\n    'is_embeddable': request.GET.get('is_embeddable', False),\n    'mobile': is_mobile,\n  })", "line_changes": {"deleted": [{"line_no": 22, "char_start": 814, "char_end": 863, "line": "      query['qs'][0]['q'] = request.GET.get('q')\n"}, {"line_no": 24, "char_start": 891, "char_end": 933, "line": "      query['qd'] = request.GET.get('qd')\n"}, {"line_no": 39, "char_start": 1285, "char_end": 1351, "line": "    'is_owner': collection_doc.doc.get().can_write(request.user),\n"}], "added": [{"line_no": 22, "char_start": 814, "char_end": 876, "line": "      query['qs'][0]['q'] = antixss(request.GET.get('q', ''))\n"}, {"line_no": 24, "char_start": 904, "char_end": 959, "line": "      query['qd'] = antixss(request.GET.get('qd', ''))\n"}, {"line_no": 39, "char_start": 1311, "char_end": 1445, "line": "    'is_owner': collection_doc.can_write(request.user) if USE_NEW_EDITOR.get() else collection_doc.doc.get().can_write(request.user),\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 842, "char_end": 850, "chars": "antixss("}, {"char_start": 869, "char_end": 874, "chars": ", '')"}, {"char_start": 924, "char_end": 932, "chars": "antixss("}, {"char_start": 952, "char_end": 957, "chars": ", '')"}, {"char_start": 1326, "char_end": 1394, "chars": " collection_doc.can_write(request.user) if USE_NEW_EDITOR.get() else"}]}, "commit_link": "github.com/gethue/hue/commit/37b529b1f9aeb5d746599a9ed4e2288cf3ad3e1d", "file_name": "desktop/libs/dashboard/src/dashboard/views.py", "vul_type": "cwe-079"}
{"func_name": "respond_error", "func_src_before": "    def respond_error(self, context, exception):\n        context.respond_server_error()\n        stack = traceback.format_exc()\n        return \"\"\"\n        <html>\n            <body>\n\n                <style>\n                    body {\n                        font-family: sans-serif;\n                        color: #888;\n                        text-align: center;\n                    }\n\n                    body pre {\n                        width: 600px;\n                        text-align: left;\n                        margin: auto;\n                        font-family: monospace;\n                    }\n                </style>\n\n                <img src=\"/ajenti:static/main/error.jpeg\" />\n                <br/>\n                <p>\n                    Server error\n                </p>\n                <pre>\n%s\n                </pre>\n            </body>\n        </html>\n        \"\"\" % stack", "func_src_after": "    def respond_error(self, context, exception):\n        context.respond_server_error()\n        stack = traceback.format_exc()\n        return \"\"\"\n        <html>\n            <body>\n\n                <style>\n                    body {\n                        font-family: sans-serif;\n                        color: #888;\n                        text-align: center;\n                    }\n\n                    body pre {\n                        width: 600px;\n                        text-align: left;\n                        margin: auto;\n                        font-family: monospace;\n                    }\n                </style>\n\n                <img src=\"/ajenti:static/main/error.jpeg\" />\n                <br/>\n                <p>\n                    Server error\n                </p>\n                <pre>\n%s\n                </pre>\n            </body>\n        </html>\n        \"\"\" % cgi.escape(stack)", "line_changes": {"deleted": [{"line_no": 33, "char_start": 871, "char_end": 890, "line": "        \"\"\" % stack\n"}], "added": [{"line_no": 33, "char_start": 871, "char_end": 902, "line": "        \"\"\" % cgi.escape(stack)"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 885, "char_end": 896, "chars": "cgi.escape("}, {"char_start": 901, "char_end": 902, "chars": ")"}]}, "commit_link": "github.com/Eugeny/ajenti/commit/d3fc5eb142ff16d55d158afb050af18d5ff09120", "file_name": "ajenti/routing.py", "vul_type": "cwe-079"}
{"func_name": "edit_bundle", "func_src_before": "@check_document_access_permission()\ndef edit_bundle(request):\n  bundle_id = request.GET.get('bundle')\n  doc = None\n  \n  if bundle_id:\n    doc = Document2.objects.get(id=bundle_id)\n    bundle = Bundle(document=doc)\n  else:\n    bundle = Bundle()\n\n  coordinators = [dict([('uuid', d.content_object.uuid), ('name', d.content_object.name)])\n                      for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')]\n\n  return render('editor/bundle_editor.mako', request, {\n      'bundle_json': bundle.json,\n      'coordinators_json': json.dumps(coordinators),\n      'doc1_id': doc.doc.get().id if doc else -1,\n      'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user))      \n  })", "func_src_after": "@check_document_access_permission()\ndef edit_bundle(request):\n  bundle_id = request.GET.get('bundle')\n  doc = None\n  \n  if bundle_id:\n    doc = Document2.objects.get(id=bundle_id)\n    bundle = Bundle(document=doc)\n  else:\n    bundle = Bundle()\n\n  coordinators = [dict([('uuid', d.content_object.uuid), ('name', d.content_object.name)])\n                      for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')]\n\n  return render('editor/bundle_editor.mako', request, {\n      'bundle_json': bundle.json_for_html(),\n      'coordinators_json': json.dumps(coordinators, cls=JSONEncoderForHTML),\n      'doc1_id': doc.doc.get().id if doc else -1,\n      'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user))      \n  })", "line_changes": {"deleted": [{"line_no": 16, "char_start": 498, "char_end": 532, "line": "      'bundle_json': bundle.json,\n"}, {"line_no": 17, "char_start": 532, "char_end": 585, "line": "      'coordinators_json': json.dumps(coordinators),\n"}], "added": [{"line_no": 16, "char_start": 498, "char_end": 543, "line": "      'bundle_json': bundle.json_for_html(),\n"}, {"line_no": 17, "char_start": 543, "char_end": 620, "line": "      'coordinators_json': json.dumps(coordinators, cls=JSONEncoderForHTML),\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 530, "char_end": 541, "chars": "_for_html()"}, {"char_start": 593, "char_end": 617, "chars": ", cls=JSONEncoderForHTML"}]}, "commit_link": "github.com/gethue/hue/commit/6641c62beaa1468082e47d82da5ed758d11c7735", "file_name": "apps/oozie/src/oozie/views/editor2.py", "vul_type": "cwe-079"}
{"func_name": "history_data", "func_src_before": "def history_data(start_time, offset=None):\n    \"\"\"Return history data.\n\n    Arguments:\n        start_time: select history starting from this timestamp.\n        offset: number of items to skip\n    \"\"\"\n    # history atimes are stored as ints, ensure start_time is not a float\n    start_time = int(start_time)\n    hist = objreg.get('web-history')\n    if offset is not None:\n        entries = hist.entries_before(start_time, limit=1000, offset=offset)\n    else:\n        # end is 24hrs earlier than start\n        end_time = start_time - 24*60*60\n        entries = hist.entries_between(end_time, start_time)\n\n    return [{\"url\": e.url, \"title\": e.title or e.url, \"time\": e.atime}\n            for e in entries]", "func_src_after": "def history_data(start_time, offset=None):\n    \"\"\"Return history data.\n\n    Arguments:\n        start_time: select history starting from this timestamp.\n        offset: number of items to skip\n    \"\"\"\n    # history atimes are stored as ints, ensure start_time is not a float\n    start_time = int(start_time)\n    hist = objreg.get('web-history')\n    if offset is not None:\n        entries = hist.entries_before(start_time, limit=1000, offset=offset)\n    else:\n        # end is 24hrs earlier than start\n        end_time = start_time - 24*60*60\n        entries = hist.entries_between(end_time, start_time)\n\n    return [{\"url\": html.escape(e.url),\n             \"title\": html.escape(e.title) or html.escape(e.url),\n             \"time\": e.atime} for e in entries]", "line_changes": {"deleted": [{"line_no": 18, "char_start": 603, "char_end": 674, "line": "    return [{\"url\": e.url, \"title\": e.title or e.url, \"time\": e.atime}\n"}, {"line_no": 19, "char_start": 674, "char_end": 703, "line": "            for e in entries]\n"}], "added": [{"line_no": 18, "char_start": 603, "char_end": 643, "line": "    return [{\"url\": html.escape(e.url),\n"}, {"line_no": 19, "char_start": 643, "char_end": 709, "line": "             \"title\": html.escape(e.title) or html.escape(e.url),\n"}, {"line_no": 20, "char_start": 709, "char_end": 756, "line": "             \"time\": e.atime} for e in entries]\n"}]}, "char_changes": {"deleted": [{"char_start": 673, "char_end": 685, "chars": "\n           "}], "added": [{"char_start": 623, "char_end": 635, "chars": "html.escape("}, {"char_start": 640, "char_end": 641, "chars": ")"}, {"char_start": 642, "char_end": 655, "chars": "\n            "}, {"char_start": 665, "char_end": 677, "chars": "html.escape("}, {"char_start": 684, "char_end": 685, "chars": ")"}, {"char_start": 689, "char_end": 701, "chars": "html.escape("}, {"char_start": 706, "char_end": 707, "chars": ")"}, {"char_start": 708, "char_end": 721, "chars": "\n            "}]}, "commit_link": "github.com/qutebrowser/qutebrowser/commit/4c9360237f186681b1e3f2a0f30c45161cf405c7", "file_name": "qutebrowser/browser/qutescheme.py", "vul_type": "cwe-079"}
{"func_name": "json_dumps", "func_src_before": "@register.filter\ndef json_dumps(value, indent=None):\n    if isinstance(value, QuerySet):\n        result = serialize('json', value, indent=indent)\n    else:\n        result = json.dumps(value, indent=indent, cls=DjbletsJSONEncoder)\n\n    return mark_safe(result)", "func_src_after": "@register.filter\ndef json_dumps(value, indent=None):\n    if isinstance(value, QuerySet):\n        result = serialize('json', value, indent=indent)\n    else:\n        result = json.dumps(value, indent=indent, cls=DjbletsJSONEncoder)\n\n    return mark_safe(force_text(result).translate(_safe_js_escapes))", "line_changes": {"deleted": [{"line_no": 8, "char_start": 231, "char_end": 259, "line": "    return mark_safe(result)\n"}], "added": [{"line_no": 8, "char_start": 231, "char_end": 299, "line": "    return mark_safe(force_text(result).translate(_safe_js_escapes))\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 252, "char_end": 263, "chars": "force_text("}, {"char_start": 270, "char_end": 299, "chars": ".translate(_safe_js_escapes))"}]}, "commit_link": "github.com/djblets/djblets/commit/77a68c03cd619a0996f3f37337b8c39ca6643d6e", "file_name": "djblets/util/templatetags/djblets_js.py", "vul_type": "cwe-079"}
{"func_name": "htmlvalue", "func_src_before": "    def htmlvalue(self, val):\n        return self.block.render_basic(val)", "func_src_after": "    def htmlvalue(self, val):\n        \"\"\"\n        Return an HTML representation of this block that is safe to be included\n        in comparison views\n        \"\"\"\n        return escape(text_from_html(self.block.render_basic(val)))", "line_changes": {"deleted": [{"line_no": 2, "char_start": 30, "char_end": 73, "line": "        return self.block.render_basic(val)\n"}], "added": [{"line_no": 2, "char_start": 30, "char_end": 42, "line": "        \"\"\"\n"}, {"line_no": 3, "char_start": 42, "char_end": 122, "line": "        Return an HTML representation of this block that is safe to be included\n"}, {"line_no": 4, "char_start": 122, "char_end": 150, "line": "        in comparison views\n"}, {"line_no": 5, "char_start": 150, "char_end": 162, "line": "        \"\"\"\n"}, {"line_no": 6, "char_start": 162, "char_end": 229, "line": "        return escape(text_from_html(self.block.render_basic(val)))\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 38, "char_end": 68, "chars": "\"\"\"\n        Return an HTML rep"}, {"char_start": 70, "char_end": 73, "chars": "sen"}, {"char_start": 74, "char_end": 117, "chars": "ation of this block that is safe to be incl"}, {"char_start": 118, "char_end": 138, "chars": "ded\n        in compa"}, {"char_start": 139, "char_end": 142, "chars": "iso"}, {"char_start": 144, "char_end": 199, "chars": "views\n        \"\"\"\n        return escape(text_from_html("}, {"char_start": 227, "char_end": 229, "chars": "))"}]}, "commit_link": "github.com/wagtail/wagtail/commit/61045ceefea114c40ac4b680af58990dbe732389", "file_name": "wagtail/admin/compare.py", "vul_type": "cwe-079"}
{"func_name": "gravatar", "func_src_before": "@register.tag\n@basictag(takes_context=True)\ndef gravatar(context, user, size=None):\n    \"\"\"\n    Outputs the HTML for displaying a user's gravatar.\n\n    This can take an optional size of the image (defaults to 80 if not\n    specified).\n\n    This is also influenced by the following settings:\n\n        GRAVATAR_SIZE    - Default size for gravatars\n        GRAVATAR_RATING  - Maximum allowed rating (g, pg, r, x)\n        GRAVATAR_DEFAULT - Default image set to show if the user hasn't\n                           specified a gravatar (identicon, monsterid, wavatar)\n\n    See http://www.gravatar.com/ for more information.\n    \"\"\"\n    url = get_gravatar_url(context['request'], user, size)\n\n    if url:\n        return ('<img src=\"%s\" width=\"%s\" height=\"%s\" alt=\"%s\" '\n                '     class=\"gravatar\"/>' %\n                (url, size, size, user.get_full_name() or user.username))\n    else:\n        return ''", "func_src_after": "@register.tag\n@basictag(takes_context=True)\ndef gravatar(context, user, size=None):\n    \"\"\"\n    Outputs the HTML for displaying a user's gravatar.\n\n    This can take an optional size of the image (defaults to 80 if not\n    specified).\n\n    This is also influenced by the following settings:\n\n        GRAVATAR_SIZE    - Default size for gravatars\n        GRAVATAR_RATING  - Maximum allowed rating (g, pg, r, x)\n        GRAVATAR_DEFAULT - Default image set to show if the user hasn't\n                           specified a gravatar (identicon, monsterid, wavatar)\n\n    See http://www.gravatar.com/ for more information.\n    \"\"\"\n    url = get_gravatar_url(context['request'], user, size)\n\n    if url:\n        return format_html(\n            '<img src=\"{0}\" width=\"{1}\" height=\"{1}\" alt=\"{2}\" '\n            'class=\"gravatar\"/>',\n            url, size, user.get_full_name() or user.username)\n    else:\n        return ''", "line_changes": {"deleted": [{"line_no": 22, "char_start": 698, "char_end": 763, "line": "        return ('<img src=\"%s\" width=\"%s\" height=\"%s\" alt=\"%s\" '\n"}, {"line_no": 23, "char_start": 763, "char_end": 807, "line": "                '     class=\"gravatar\"/>' %\n"}, {"line_no": 24, "char_start": 807, "char_end": 881, "line": "                (url, size, size, user.get_full_name() or user.username))\n"}], "added": [{"line_no": 22, "char_start": 698, "char_end": 726, "line": "        return format_html(\n"}, {"line_no": 23, "char_start": 726, "char_end": 791, "line": "            '<img src=\"{0}\" width=\"{1}\" height=\"{1}\" alt=\"{2}\" '\n"}, {"line_no": 24, "char_start": 791, "char_end": 825, "line": "            'class=\"gravatar\"/>',\n"}, {"line_no": 25, "char_start": 825, "char_end": 887, "line": "            url, size, user.get_full_name() or user.username)\n"}]}, "char_changes": {"deleted": [{"char_start": 725, "char_end": 727, "chars": "%s"}, {"char_start": 736, "char_end": 738, "chars": "%s"}, {"char_start": 748, "char_end": 750, "chars": "%s"}, {"char_start": 757, "char_end": 759, "chars": "%s"}, {"char_start": 775, "char_end": 779, "chars": "    "}, {"char_start": 780, "char_end": 785, "chars": "     "}, {"char_start": 804, "char_end": 806, "chars": " %"}, {"char_start": 807, "char_end": 811, "chars": "    "}, {"char_start": 823, "char_end": 824, "chars": "("}, {"char_start": 827, "char_end": 833, "chars": ", size"}, {"char_start": 878, "char_end": 879, "chars": ")"}], "added": [{"char_start": 713, "char_end": 724, "chars": "format_html"}, {"char_start": 725, "char_end": 738, "chars": "\n            "}, {"char_start": 749, "char_end": 752, "chars": "{0}"}, {"char_start": 761, "char_end": 764, "chars": "{1}"}, {"char_start": 774, "char_end": 777, "chars": "{1}"}, {"char_start": 784, "char_end": 787, "chars": "{2}"}, {"char_start": 823, "char_end": 824, "chars": ","}]}, "commit_link": "github.com/djblets/djblets/commit/77ac64642ad530bf69e390c51fc6fdcb8914c8e7", "file_name": "djblets/gravatars/templatetags/gravatars.py", "vul_type": "cwe-079"}
{"func_name": "PeerListWidget::addPeer", "func_src_before": "QStandardItem* PeerListWidget::addPeer(const QString& ip, BitTorrent::TorrentHandle *const torrent, const BitTorrent::PeerInfo &peer)\n{\n    int row = m_listModel->rowCount();\n    // Adding Peer to peer list\n    m_listModel->insertRow(row);\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::IP), ip);\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::IP), ip, Qt::ToolTipRole);\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::PORT), peer.address().port);\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::IP_HIDDEN), ip);\n    if (m_resolveCountries) {\n        const QIcon ico = GuiIconProvider::instance()->getFlagIcon(peer.country());\n        if (!ico.isNull()) {\n            m_listModel->setData(m_listModel->index(row, PeerListDelegate::COUNTRY), ico, Qt::DecorationRole);\n            const QString countryName = Net::GeoIPManager::CountryName(peer.country());\n            m_listModel->setData(m_listModel->index(row, PeerListDelegate::COUNTRY), countryName, Qt::ToolTipRole);\n        }\n        else {\n            m_missingFlags.insert(ip);\n        }\n    }\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::CONNECTION), peer.connectionType());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flags());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flagsDescription(), Qt::ToolTipRole);\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), peer.client());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::PROGRESS), peer.progress());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWN_SPEED), peer.payloadDownSpeed());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::UP_SPEED), peer.payloadUpSpeed());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::TOT_DOWN), peer.totalDownload());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::TOT_UP), peer.totalUpload());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::RELEVANCE), peer.relevance());\n    QStringList downloadingFiles(torrent->info().filesForPiece(peer.downloadingPieceIndex()));\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWNLOADING_PIECE), downloadingFiles.join(QLatin1String(\";\")));\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWNLOADING_PIECE), downloadingFiles.join(QLatin1String(\"\\n\")), Qt::ToolTipRole);\n\n    return m_listModel->item(row, PeerListDelegate::IP);\n}", "func_src_after": "QStandardItem* PeerListWidget::addPeer(const QString& ip, BitTorrent::TorrentHandle *const torrent, const BitTorrent::PeerInfo &peer)\n{\n    int row = m_listModel->rowCount();\n    // Adding Peer to peer list\n    m_listModel->insertRow(row);\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::IP), ip);\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::IP), ip, Qt::ToolTipRole);\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::PORT), peer.address().port);\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::IP_HIDDEN), ip);\n    if (m_resolveCountries) {\n        const QIcon ico = GuiIconProvider::instance()->getFlagIcon(peer.country());\n        if (!ico.isNull()) {\n            m_listModel->setData(m_listModel->index(row, PeerListDelegate::COUNTRY), ico, Qt::DecorationRole);\n            const QString countryName = Net::GeoIPManager::CountryName(peer.country());\n            m_listModel->setData(m_listModel->index(row, PeerListDelegate::COUNTRY), countryName, Qt::ToolTipRole);\n        }\n        else {\n            m_missingFlags.insert(ip);\n        }\n    }\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::CONNECTION), peer.connectionType());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flags());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flagsDescription(), Qt::ToolTipRole);\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), Utils::String::toHtmlEscaped(peer.client()));\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::PROGRESS), peer.progress());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWN_SPEED), peer.payloadDownSpeed());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::UP_SPEED), peer.payloadUpSpeed());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::TOT_DOWN), peer.totalDownload());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::TOT_UP), peer.totalUpload());\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::RELEVANCE), peer.relevance());\n    QStringList downloadingFiles(torrent->info().filesForPiece(peer.downloadingPieceIndex()));\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWNLOADING_PIECE), downloadingFiles.join(QLatin1String(\";\")));\n    m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWNLOADING_PIECE), downloadingFiles.join(QLatin1String(\"\\n\")), Qt::ToolTipRole);\n\n    return m_listModel->item(row, PeerListDelegate::IP);\n}", "line_changes": {"deleted": [{"line_no": 24, "char_start": 1441, "char_end": 1533, "line": "    m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), peer.client());\n"}], "added": [{"line_no": 24, "char_start": 1441, "char_end": 1563, "line": "    m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), Utils::String::toHtmlEscaped(peer.client()));\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 1517, "char_end": 1546, "chars": "Utils::String::toHtmlEscaped("}, {"char_start": 1558, "char_end": 1559, "chars": ")"}]}, "commit_link": "github.com/qbittorrent/qBittorrent/commit/6ca3e4f094da0a0017cb2d483ec1db6176bb0b16", "file_name": "src/gui/properties/peerlistwidget.cpp", "vul_type": "cwe-079"}
{"func_name": "is_safe_url", "func_src_before": "def is_safe_url(url, host=None):\n    \"\"\"\n    Return ``True`` if the url is a safe redirection (i.e. it doesn't point to\n    a different host and uses a safe scheme).\n\n    Always returns ``False`` on an empty url.\n    \"\"\"\n    if url is not None:\n        url = url.strip()\n    if not url:\n        return False\n    # Chrome treats \\ completely as /\n    url = url.replace('\\\\', '/')\n    # Chrome considers any URL with more than two slashes to be absolute, but\n    # urlparse is not so flexible. Treat any url with three slashes as unsafe.\n    if url.startswith('///'):\n        return False\n    url_info = urlparse(url)\n    # Forbid URLs like http:///example.com - with a scheme, but without a hostname.\n    # In that URL, example.com is not the hostname but, a path component. However,\n    # Chrome will still consider example.com to be the hostname, so we must not\n    # allow this syntax.\n    if not url_info.netloc and url_info.scheme:\n        return False\n    # Forbid URLs that start with control characters. Some browsers (like\n    # Chrome) ignore quite a few control characters at the start of a\n    # URL and might consider the URL as scheme relative.\n    if unicodedata.category(url[0])[0] == 'C':\n        return False\n    return ((not url_info.netloc or url_info.netloc == host) and\n            (not url_info.scheme or url_info.scheme in ['http', 'https']))", "func_src_after": "def is_safe_url(url, host=None):\n    \"\"\"\n    Return ``True`` if the url is a safe redirection (i.e. it doesn't point to\n    a different host and uses a safe scheme).\n\n    Always returns ``False`` on an empty url.\n    \"\"\"\n    if url is not None:\n        url = url.strip()\n    if not url:\n        return False\n    # Chrome treats \\ completely as / in paths but it could be part of some\n    # basic auth credentials so we need to check both URLs.\n    return _is_safe_url(url, host) and _is_safe_url(url.replace('\\\\', '/'), host)", "line_changes": {"deleted": [{"line_no": 13, "char_start": 346, "char_end": 379, "line": "    url = url.replace('\\\\', '/')\n"}], "added": [{"line_no": 14, "char_start": 444, "char_end": 525, "line": "    return _is_safe_url(url, host) and _is_safe_url(url.replace('\\\\', '/'), host)\n"}]}, "char_changes": {"deleted": [{"char_start": 345, "char_end": 346, "chars": "\n"}, {"char_start": 347, "char_end": 396, "chars": "   url = url.replace('\\\\', '/')\n    # Chrome cons"}, {"char_start": 397, "char_end": 403, "chars": "ders a"}, {"char_start": 404, "char_end": 405, "chars": "y"}, {"char_start": 406, "char_end": 422, "chars": "URL with more th"}, {"char_start": 423, "char_end": 425, "chars": "n "}, {"char_start": 426, "char_end": 433, "chars": "wo slas"}, {"char_start": 434, "char_end": 435, "chars": "e"}, {"char_start": 436, "char_end": 439, "chars": " to"}, {"char_start": 441, "char_end": 448, "chars": "e absol"}, {"char_start": 450, "char_end": 471, "chars": "e, but\n    # urlparse"}, {"char_start": 473, "char_end": 477, "chars": "s no"}, {"char_start": 479, "char_end": 480, "chars": "s"}, {"char_start": 481, "char_end": 502, "chars": " flexible. Treat any "}, {"char_start": 503, "char_end": 504, "chars": "r"}, {"char_start": 505, "char_end": 510, "chars": " with"}, {"char_start": 511, "char_end": 514, "chars": "thr"}, {"char_start": 515, "char_end": 536, "chars": "e slashes as unsafe.\n"}, {"char_start": 537, "char_end": 549, "chars": "   if url.st"}, {"char_start": 552, "char_end": 568, "chars": "swith('///'):\n  "}, {"char_start": 569, "char_end": 598, "chars": "     return False\n    url_inf"}, {"char_start": 599, "char_end": 601, "chars": " ="}, {"char_start": 602, "char_end": 608, "chars": "urlpar"}, {"char_start": 610, "char_end": 615, "chars": "(url)"}, {"char_start": 622, "char_end": 625, "chars": "For"}, {"char_start": 626, "char_end": 649, "chars": "id URLs like http:///ex"}, {"char_start": 650, "char_end": 668, "chars": "mple.com - with a "}, {"char_start": 669, "char_end": 681, "chars": "cheme, but w"}, {"char_start": 682, "char_end": 727, "chars": "thout a hostname.\n    # In that URL, example."}, {"char_start": 728, "char_end": 730, "chars": "om"}, {"char_start": 731, "char_end": 747, "chars": "is not the hostn"}, {"char_start": 748, "char_end": 752, "chars": "me b"}, {"char_start": 754, "char_end": 761, "chars": ", a pat"}, {"char_start": 764, "char_end": 780, "chars": "omponent. Howeve"}, {"char_start": 781, "char_end": 794, "chars": ",\n    # Chrom"}, {"char_start": 795, "char_end": 812, "chars": " will still consi"}, {"char_start": 814, "char_end": 842, "chars": "r example.com to be the host"}, {"char_start": 843, "char_end": 857, "chars": "ame, so we mus"}, {"char_start": 858, "char_end": 877, "chars": " not\n    # allow th"}, {"char_start": 878, "char_end": 884, "chars": "s synt"}, {"char_start": 885, "char_end": 901, "chars": "x.\n    if not ur"}, {"char_start": 902, "char_end": 928, "chars": "_info.netloc and url_info."}, {"char_start": 929, "char_end": 936, "chars": "cheme:\n"}, {"char_start": 937, "char_end": 954, "chars": "       return Fal"}, {"char_start": 955, "char_end": 964, "chars": "e\n    # F"}, {"char_start": 965, "char_end": 985, "chars": "rbid URLs that start"}, {"char_start": 987, "char_end": 1006, "chars": "ith control charact"}, {"char_start": 1007, "char_end": 1010, "chars": "rs."}, {"char_start": 1011, "char_end": 1047, "chars": "Some browsers (like\n    # Chrome) ig"}, {"char_start": 1048, "char_end": 1050, "chars": "or"}, {"char_start": 1051, "char_end": 1056, "chars": " quit"}, {"char_start": 1058, "char_end": 1067, "chars": "a few con"}, {"char_start": 1068, "char_end": 1069, "chars": "r"}, {"char_start": 1070, "char_end": 1071, "chars": "l"}, {"char_start": 1074, "char_end": 1079, "chars": "aract"}, {"char_start": 1080, "char_end": 1110, "chars": "rs at the start of a\n    # URL"}, {"char_start": 1111, "char_end": 1122, "chars": "and might c"}, {"char_start": 1123, "char_end": 1130, "chars": "nsider "}, {"char_start": 1132, "char_end": 1133, "chars": "e"}, {"char_start": 1137, "char_end": 1139, "chars": " a"}, {"char_start": 1140, "char_end": 1156, "chars": " scheme relative"}, {"char_start": 1162, "char_end": 1213, "chars": "if unicodedata.category(url[0])[0] == 'C':\n        "}, {"char_start": 1220, "char_end": 1246, "chars": "False\n    return ((not url"}, {"char_start": 1248, "char_end": 1249, "chars": "n"}, {"char_start": 1250, "char_end": 1253, "chars": "o.n"}, {"char_start": 1254, "char_end": 1262, "chars": "tloc or "}, {"char_start": 1265, "char_end": 1274, "chars": "_info.net"}, {"char_start": 1275, "char_end": 1280, "chars": "oc =="}, {"char_start": 1290, "char_end": 1296, "chars": "\n     "}, {"char_start": 1297, "char_end": 1311, "chars": "      (not url"}, {"char_start": 1313, "char_end": 1317, "chars": "nfo."}, {"char_start": 1318, "char_end": 1320, "chars": "ch"}, {"char_start": 1321, "char_end": 1325, "chars": "me o"}, {"char_start": 1326, "char_end": 1327, "chars": " "}, {"char_start": 1330, "char_end": 1335, "chars": "_info"}, {"char_start": 1336, "char_end": 1339, "chars": "sch"}, {"char_start": 1340, "char_end": 1341, "chars": "m"}, {"char_start": 1343, "char_end": 1347, "chars": "in ["}, {"char_start": 1348, "char_end": 1352, "chars": "http"}, {"char_start": 1355, "char_end": 1356, "chars": "'"}, {"char_start": 1357, "char_end": 1360, "chars": "ttp"}, {"char_start": 1361, "char_end": 1364, "chars": "'])"}], "added": [{"char_start": 349, "char_end": 350, "chars": "p"}, {"char_start": 359, "char_end": 360, "chars": "i"}, {"char_start": 362, "char_end": 364, "chars": "co"}, {"char_start": 366, "char_end": 367, "chars": "d"}, {"char_start": 371, "char_end": 372, "chars": "p"}, {"char_start": 376, "char_end": 377, "chars": "o"}, {"char_start": 381, "char_end": 382, "chars": "m"}, {"char_start": 408, "char_end": 409, "chars": "i"}, {"char_start": 416, "char_end": 417, "chars": "w"}, {"char_start": 430, "char_end": 432, "chars": "ck"}, {"char_start": 455, "char_end": 457, "chars": "_i"}, {"char_start": 458, "char_end": 462, "chars": "_saf"}, {"char_start": 463, "char_end": 464, "chars": "_"}, {"char_start": 466, "char_end": 467, "chars": "l"}, {"char_start": 471, "char_end": 472, "chars": ","}, {"char_start": 486, "char_end": 490, "chars": "_saf"}, {"char_start": 491, "char_end": 493, "chars": "_u"}, {"char_start": 494, "char_end": 496, "chars": "l("}, {"char_start": 500, "char_end": 505, "chars": "repla"}, {"char_start": 507, "char_end": 508, "chars": "("}, {"char_start": 509, "char_end": 511, "chars": "\\\\"}, {"char_start": 515, "char_end": 520, "chars": "/'), "}, {"char_start": 521, "char_end": 522, "chars": "o"}, {"char_start": 523, "char_end": 524, "chars": "t"}]}, "commit_link": "github.com/django/django/commit/c5544d289233f501917e25970c03ed444abbd4f0", "file_name": "django/utils/http.py", "vul_type": "cwe-079"}
{"func_name": "get_context_data", "func_src_before": "    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['comments'] = self.object.comment_set.all().order_by('-time')\n        context['form'] = self.get_form()\n        context['md'] = markdown(self.object.content,\n                                 extensions=[\n                                     'markdown.extensions.extra',\n                                     'markdown.extensions.codehilite',\n                                     'markdown.extensions.toc',\n                                 ])\n\n        return context", "func_src_after": "    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['comments'] = self.object.comment_set.all().order_by('-time')\n        context['form'] = self.get_form()\n        context['md'] = safe_md(self.object.content)\n\n        return context", "line_changes": {"deleted": [{"line_no": 5, "char_start": 215, "char_end": 269, "line": "        context['md'] = markdown(self.object.content,\n"}, {"line_no": 6, "char_start": 269, "char_end": 315, "line": "                                 extensions=[\n"}, {"line_no": 7, "char_start": 315, "char_end": 381, "line": "                                     'markdown.extensions.extra',\n"}, {"line_no": 8, "char_start": 381, "char_end": 452, "line": "                                     'markdown.extensions.codehilite',\n"}, {"line_no": 9, "char_start": 452, "char_end": 516, "line": "                                     'markdown.extensions.toc',\n"}, {"line_no": 10, "char_start": 516, "char_end": 552, "line": "                                 ])\n"}], "added": [{"line_no": 5, "char_start": 215, "char_end": 268, "line": "        context['md'] = safe_md(self.object.content)\n"}]}, "char_changes": {"deleted": [{"char_start": 239, "char_end": 240, "chars": "m"}, {"char_start": 241, "char_end": 243, "chars": "rk"}, {"char_start": 244, "char_end": 247, "chars": "own"}, {"char_start": 267, "char_end": 550, "chars": ",\n                                 extensions=[\n                                     'markdown.extensions.extra',\n                                     'markdown.extensions.codehilite',\n                                     'markdown.extensions.toc',\n                                 ]"}], "added": [{"char_start": 239, "char_end": 240, "chars": "s"}, {"char_start": 241, "char_end": 245, "chars": "fe_m"}]}, "commit_link": "github.com/Cheng-mq1216/production-practice/commit/333dc34f5feada55d1f6ff1255949ca00dec0f9c", "file_name": "app/Index/views.py", "vul_type": "cwe-079"}
{"func_name": "edit_workflow", "func_src_before": "@check_document_access_permission()\ndef edit_workflow(request):\n  workflow_id = request.GET.get('workflow')\n  \n  if workflow_id:\n    wid = {}\n    if workflow_id.isdigit():\n      wid['id'] = workflow_id\n    else:\n      wid['uuid'] = workflow_id\n    doc = Document2.objects.get(type='oozie-workflow2', **wid)\n    workflow = Workflow(document=doc)\n  else:\n    doc = None\n    workflow = Workflow()\n    workflow.set_workspace(request.user)\n    workflow.check_workspace(request.fs, request.user)\n  \n  workflow_data = workflow.get_data()\n\n  api = get_oozie(request.user)\n  credentials = Credentials()\n  \n  try:  \n    credentials.fetch(api)\n  except Exception, e:\n    LOG.error(smart_str(e))\n\n  return render('editor/workflow_editor.mako', request, {\n      'layout_json': json.dumps(workflow_data['layout']),\n      'workflow_json': json.dumps(workflow_data['workflow']),\n      'credentials_json': json.dumps(credentials.credentials.keys()),\n      'workflow_properties_json': json.dumps(WORKFLOW_NODE_PROPERTIES),\n      'doc1_id': doc.doc.get().id if doc else -1,\n      'subworkflows_json': json.dumps(_get_workflows(request.user)),\n      'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user))\n  })", "func_src_after": "@check_document_access_permission()\ndef edit_workflow(request):\n  workflow_id = request.GET.get('workflow')\n  \n  if workflow_id:\n    wid = {}\n    if workflow_id.isdigit():\n      wid['id'] = workflow_id\n    else:\n      wid['uuid'] = workflow_id\n    doc = Document2.objects.get(type='oozie-workflow2', **wid)\n    workflow = Workflow(document=doc)\n  else:\n    doc = None\n    workflow = Workflow()\n    workflow.set_workspace(request.user)\n    workflow.check_workspace(request.fs, request.user)\n  \n  workflow_data = workflow.get_data()\n\n  api = get_oozie(request.user)\n  credentials = Credentials()\n  \n  try:  \n    credentials.fetch(api)\n  except Exception, e:\n    LOG.error(smart_str(e))\n\n  return render('editor/workflow_editor.mako', request, {\n      'layout_json': json.dumps(workflow_data['layout'], cls=JSONEncoderForHTML),\n      'workflow_json': json.dumps(workflow_data['workflow'], cls=JSONEncoderForHTML),\n      'credentials_json': json.dumps(credentials.credentials.keys(), cls=JSONEncoderForHTML),\n      'workflow_properties_json': json.dumps(WORKFLOW_NODE_PROPERTIES, cls=JSONEncoderForHTML),\n      'doc1_id': doc.doc.get().id if doc else -1,\n      'subworkflows_json': json.dumps(_get_workflows(request.user), cls=JSONEncoderForHTML),\n      'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user))\n  })", "line_changes": {"deleted": [{"line_no": 30, "char_start": 743, "char_end": 801, "line": "      'layout_json': json.dumps(workflow_data['layout']),\n"}, {"line_no": 31, "char_start": 801, "char_end": 863, "line": "      'workflow_json': json.dumps(workflow_data['workflow']),\n"}, {"line_no": 32, "char_start": 863, "char_end": 933, "line": "      'credentials_json': json.dumps(credentials.credentials.keys()),\n"}, {"line_no": 33, "char_start": 933, "char_end": 1005, "line": "      'workflow_properties_json': json.dumps(WORKFLOW_NODE_PROPERTIES),\n"}, {"line_no": 35, "char_start": 1055, "char_end": 1124, "line": "      'subworkflows_json': json.dumps(_get_workflows(request.user)),\n"}], "added": [{"line_no": 30, "char_start": 743, "char_end": 825, "line": "      'layout_json': json.dumps(workflow_data['layout'], cls=JSONEncoderForHTML),\n"}, {"line_no": 31, "char_start": 825, "char_end": 911, "line": "      'workflow_json': json.dumps(workflow_data['workflow'], cls=JSONEncoderForHTML),\n"}, {"line_no": 32, "char_start": 911, "char_end": 1005, "line": "      'credentials_json': json.dumps(credentials.credentials.keys(), cls=JSONEncoderForHTML),\n"}, {"line_no": 33, "char_start": 1005, "char_end": 1101, "line": "      'workflow_properties_json': json.dumps(WORKFLOW_NODE_PROPERTIES, cls=JSONEncoderForHTML),\n"}, {"line_no": 35, "char_start": 1151, "char_end": 1244, "line": "      'subworkflows_json': json.dumps(_get_workflows(request.user), cls=JSONEncoderForHTML),\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 798, "char_end": 822, "chars": ", cls=JSONEncoderForHTML"}, {"char_start": 884, "char_end": 908, "chars": ", cls=JSONEncoderForHTML"}, {"char_start": 978, "char_end": 1002, "chars": ", cls=JSONEncoderForHTML"}, {"char_start": 1074, "char_end": 1098, "chars": ", cls=JSONEncoderForHTML"}, {"char_start": 1217, "char_end": 1241, "chars": ", cls=JSONEncoderForHTML"}]}, "commit_link": "github.com/gethue/hue/commit/6641c62beaa1468082e47d82da5ed758d11c7735", "file_name": "apps/oozie/src/oozie/views/editor2.py", "vul_type": "cwe-079"}
{"func_name": "simple_search", "func_src_before": "    @classmethod\n    def simple_search(cls, query, using=None, index=None):\n        es_search = cls.search(using=using, index=index)\n        es_query = cls.get_es_query(query=query)\n        highlighted_fields = [f.split('^', 1)[0] for f in cls.search_fields]\n\n        es_search = es_search.query(es_query).highlight(*highlighted_fields)\n        return es_search", "func_src_after": "    @classmethod\n    def simple_search(cls, query, using=None, index=None):\n        \"\"\"\n        Do a search without facets.\n\n        This is used in:\n\n        * The Docsearch API\n        * The Project Admin Search page\n        \"\"\"\n\n        es_search = cls.search(using=using, index=index)\n        es_search = es_search.highlight_options(encoder='html')\n\n        es_query = cls.get_es_query(query=query)\n        highlighted_fields = [f.split('^', 1)[0] for f in cls.search_fields]\n        es_search = es_search.query(es_query).highlight(*highlighted_fields)\n\n        return es_search", "line_changes": {"deleted": [{"line_no": 6, "char_start": 259, "char_end": 260, "line": "\n"}], "added": [{"line_no": 3, "char_start": 76, "char_end": 88, "line": "        \"\"\"\n"}, {"line_no": 4, "char_start": 88, "char_end": 124, "line": "        Do a search without facets.\n"}, {"line_no": 5, "char_start": 124, "char_end": 125, "line": "\n"}, {"line_no": 6, "char_start": 125, "char_end": 150, "line": "        This is used in:\n"}, {"line_no": 7, "char_start": 150, "char_end": 151, "line": "\n"}, {"line_no": 8, "char_start": 151, "char_end": 179, "line": "        * The Docsearch API\n"}, {"line_no": 9, "char_start": 179, "char_end": 219, "line": "        * The Project Admin Search page\n"}, {"line_no": 10, "char_start": 219, "char_end": 231, "line": "        \"\"\"\n"}, {"line_no": 11, "char_start": 231, "char_end": 232, "line": "\n"}, {"line_no": 13, "char_start": 289, "char_end": 353, "line": "        es_search = es_search.highlight_options(encoder='html')\n"}, {"line_no": 14, "char_start": 353, "char_end": 354, "line": "\n"}, {"line_no": 18, "char_start": 557, "char_end": 558, "line": "\n"}]}, "char_changes": {"deleted": [{"char_start": 259, "char_end": 260, "chars": "\n"}], "added": [{"char_start": 84, "char_end": 240, "chars": "\"\"\"\n        Do a search without facets.\n\n        This is used in:\n\n        * The Docsearch API\n        * The Project Admin Search page\n        \"\"\"\n\n        "}, {"char_start": 289, "char_end": 354, "chars": "        es_search = es_search.highlight_options(encoder='html')\n\n"}, {"char_start": 556, "char_end": 557, "chars": "\n"}]}, "commit_link": "github.com/readthedocs/readthedocs.org/commit/1ebe494ffde18109307f205d2bd94102452f697a", "file_name": "readthedocs/search/documents.py", "vul_type": "cwe-079"}
{"func_name": "HPHP::WddxPacket::recursiveAddVar", "func_src_before": "bool WddxPacket::recursiveAddVar(const String& varName,\n                                 const Variant& varVariant,\n                                 bool hasVarTag) {\n\n  bool isArray = varVariant.isArray();\n  bool isObject = varVariant.isObject();\n\n  if (isArray || isObject) {\n    if (hasVarTag) {\n      m_packetString += \"<var name='\";\n      m_packetString += varName.data();\n      m_packetString += \"'>\";\n    }\n\n    Array varAsArray;\n    Object varAsObject = varVariant.toObject();\n    if (isArray) varAsArray = varVariant.toArray();\n    if (isObject) varAsArray = varAsObject.toArray();\n\n    int length = varAsArray.length();\n    if (length > 0) {\n      ArrayIter it = ArrayIter(varAsArray);\n      if (it.first().isString()) isObject = true;\n      if (isObject) {\n        m_packetString += \"<struct>\";\n        if (!isArray) {\n          m_packetString += \"<var name='php_class_name'><string>\";\n          m_packetString += varAsObject->o_getClassName().c_str();\n          m_packetString += \"</string></var>\";\n        }\n      } else {\n        m_packetString += \"<array length='\";\n        m_packetString += std::to_string(length);\n        m_packetString += \"'>\";\n      }\n      for (ArrayIter it(varAsArray); it; ++it) {\n        Variant key = it.first();\n        Variant value = it.second();\n        recursiveAddVar(key.toString(), value, isObject);\n      }\n      if (isObject) {\n        m_packetString += \"</struct>\";\n      }\n      else {\n        m_packetString += \"</array>\";\n      }\n    }\n    else {\n      //empty object\n      if (isObject) {\n        m_packetString += \"<struct>\";\n        if (!isArray) {\n          m_packetString += \"<var name='php_class_name'><string>\";\n          m_packetString += varAsObject->o_getClassName().c_str();\n          m_packetString += \"</string></var>\";\n        }\n        m_packetString += \"</struct>\";\n      }\n    }\n    if (hasVarTag) {\n      m_packetString += \"</var>\";\n    }\n    return true;\n  }\n\n  std::string varType = getDataTypeString(varVariant.getType()).data();\n  if (!getWddxEncoded(varType, \"\", varName, false).empty()) {\n    std::string varValue = varVariant.toString().data();\n    if (varType.compare(\"boolean\") == 0) {\n      varValue = varVariant.toBoolean() ? \"true\" : \"false\";\n    }\n    m_packetString += getWddxEncoded(varType, varValue, varName, hasVarTag);\n    return true;\n  }\n\n  return false;\n}", "func_src_after": "bool WddxPacket::recursiveAddVar(const String& varName,\n                                 const Variant& varVariant,\n                                 bool hasVarTag) {\n\n  bool isArray = varVariant.isArray();\n  bool isObject = varVariant.isObject();\n\n  if (isArray || isObject) {\n    if (hasVarTag) {\n      m_packetString += \"<var name='\";\n      m_packetString += varName.data();\n      m_packetString += \"'>\";\n    }\n\n    Array varAsArray;\n    Object varAsObject = varVariant.toObject();\n    if (isArray) varAsArray = varVariant.toArray();\n    if (isObject) varAsArray = varAsObject.toArray();\n\n    int length = varAsArray.length();\n    if (length > 0) {\n      ArrayIter it = ArrayIter(varAsArray);\n      if (it.first().isString()) isObject = true;\n      if (isObject) {\n        m_packetString += \"<struct>\";\n        if (!isArray) {\n          m_packetString += \"<var name='php_class_name'><string>\";\n          m_packetString += varAsObject->o_getClassName().c_str();\n          m_packetString += \"</string></var>\";\n        }\n      } else {\n        m_packetString += \"<array length='\";\n        m_packetString += std::to_string(length);\n        m_packetString += \"'>\";\n      }\n      for (ArrayIter it(varAsArray); it; ++it) {\n        Variant key = it.first();\n        Variant value = it.second();\n        recursiveAddVar(key.toString(), value, isObject);\n      }\n      if (isObject) {\n        m_packetString += \"</struct>\";\n      }\n      else {\n        m_packetString += \"</array>\";\n      }\n    }\n    else {\n      //empty object\n      if (isObject) {\n        m_packetString += \"<struct>\";\n        if (!isArray) {\n          m_packetString += \"<var name='php_class_name'><string>\";\n          m_packetString += varAsObject->o_getClassName().c_str();\n          m_packetString += \"</string></var>\";\n        }\n        m_packetString += \"</struct>\";\n      }\n    }\n    if (hasVarTag) {\n      m_packetString += \"</var>\";\n    }\n    return true;\n  }\n\n  std::string varType = getDataTypeString(varVariant.getType()).data();\n  if (!getWddxEncoded(varType, \"\", varName, false).empty()) {\n    std::string varValue;\n    if (varType.compare(\"boolean\") == 0) {\n      varValue = varVariant.toBoolean() ? \"true\" : \"false\";\n    } else {\n      varValue = StringUtil::HtmlEncode(varVariant.toString(),\n                                        StringUtil::QuoteStyle::Double,\n                                        \"UTF-8\", false, false).toCppString();\n    }\n    m_packetString += getWddxEncoded(varType, varValue, varName, hasVarTag);\n    return true;\n  }\n\n  return false;\n}", "line_changes": {"deleted": [{"line_no": 68, "char_start": 2068, "char_end": 2125, "line": "    std::string varValue = varVariant.toString().data();\n"}], "added": [{"line_no": 68, "char_start": 2068, "char_end": 2094, "line": "    std::string varValue;\n"}, {"line_no": 71, "char_start": 2197, "char_end": 2210, "line": "    } else {\n"}, {"line_no": 72, "char_start": 2210, "char_end": 2273, "line": "      varValue = StringUtil::HtmlEncode(varVariant.toString(),\n"}, {"line_no": 73, "char_start": 2273, "char_end": 2345, "line": "                                        StringUtil::QuoteStyle::Double,\n"}, {"line_no": 74, "char_start": 2345, "char_end": 2423, "line": "                                        \"UTF-8\", false, false).toCppString();\n"}]}, "char_changes": {"deleted": [{"char_start": 2092, "char_end": 2123, "chars": " = varVariant.toString().data()"}, {"char_start": 2168, "char_end": 2168, "chars": ""}], "added": [{"char_start": 2094, "char_end": 2094, "chars": ""}, {"char_start": 2195, "char_end": 2421, "chars": ";\n    } else {\n      varValue = StringUtil::HtmlEncode(varVariant.toString(),\n                                        StringUtil::QuoteStyle::Double,\n                                        \"UTF-8\", false, false).toCppString()"}]}, "commit_link": "github.com/facebook/hhvm/commit/324701c9fd31beb4f070f1b7ef78b115fbdfec34", "file_name": "hphp/runtime/ext/wddx/ext_wddx.cpp", "vul_type": "cwe-079"}
{"func_name": "mode_receive", "func_src_before": "    def mode_receive(self, request):\n        \"\"\"\n        This is called by render_POST when the client is telling us\n        that it is ready to receive data as soon as it is available.\n        This is the basis of a long-polling (comet) mechanism: the\n        server will wait to reply until data is available.\n\n        Args:\n            request (Request): Incoming request.\n\n        \"\"\"\n        csessid = request.args.get('csessid')[0]\n        self.last_alive[csessid] = (time.time(), False)\n\n        dataentries = self.databuffer.get(csessid, [])\n        if dataentries:\n            return dataentries.pop(0)\n        request.notifyFinish().addErrback(self._responseFailed, csessid, request)\n        if csessid in self.requests:\n            self.requests[csessid].finish()  # Clear any stale request.\n        self.requests[csessid] = request\n        return server.NOT_DONE_YET", "func_src_after": "    def mode_receive(self, request):\n        \"\"\"\n        This is called by render_POST when the client is telling us\n        that it is ready to receive data as soon as it is available.\n        This is the basis of a long-polling (comet) mechanism: the\n        server will wait to reply until data is available.\n\n        Args:\n            request (Request): Incoming request.\n\n        \"\"\"\n        csessid = cgi.escape(request.args['csessid'][0])\n        self.last_alive[csessid] = (time.time(), False)\n\n        dataentries = self.databuffer.get(csessid, [])\n        if dataentries:\n            return dataentries.pop(0)\n        request.notifyFinish().addErrback(self._responseFailed, csessid, request)\n        if csessid in self.requests:\n            self.requests[csessid].finish()  # Clear any stale request.\n        self.requests[csessid] = request\n        return server.NOT_DONE_YET", "line_changes": {"deleted": [{"line_no": 12, "char_start": 389, "char_end": 438, "line": "        csessid = request.args.get('csessid')[0]\n"}], "added": [{"line_no": 12, "char_start": 389, "char_end": 446, "line": "        csessid = cgi.escape(request.args['csessid'][0])\n"}]}, "char_changes": {"deleted": [{"char_start": 419, "char_end": 424, "chars": ".get("}, {"char_start": 433, "char_end": 434, "chars": ")"}], "added": [{"char_start": 407, "char_end": 418, "chars": "cgi.escape("}, {"char_start": 430, "char_end": 431, "chars": "["}, {"char_start": 440, "char_end": 441, "chars": "]"}, {"char_start": 444, "char_end": 445, "chars": ")"}]}, "commit_link": "github.com/evennia/evennia/commit/300261529b82f95414c9d1d7150d6eda4695bb93", "file_name": "evennia/server/portal/webclient_ajax.py", "vul_type": "cwe-079"}
{"func_name": "edit_coordinator", "func_src_before": "@check_document_access_permission()\ndef edit_coordinator(request):\n  coordinator_id = request.GET.get('coordinator')\n  doc = None\n  \n  if coordinator_id:\n    doc = Document2.objects.get(id=coordinator_id)\n    coordinator = Coordinator(document=doc)\n  else:\n    coordinator = Coordinator()\n\n  api = get_oozie(request.user)\n  credentials = Credentials()\n  \n  try:  \n    credentials.fetch(api)\n  except Exception, e:\n    LOG.error(smart_str(e))\n\n  workflows = [dict([('uuid', d.content_object.uuid), ('name', d.content_object.name)])\n                                    for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')]\n\n  if coordinator_id and not filter(lambda a: a['uuid'] == coordinator.data['properties']['workflow'], workflows):\n    raise PopupException(_('You don\\'t have access to the workflow of this coordinator.'))\n\n  return render('editor/coordinator_editor.mako', request, {\n      'coordinator_json': coordinator.json,\n      'credentials_json': json.dumps(credentials.credentials.keys()),\n      'workflows_json': json.dumps(workflows),\n      'doc1_id': doc.doc.get().id if doc else -1,\n      'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user))\n  })", "func_src_after": "@check_document_access_permission()\ndef edit_coordinator(request):\n  coordinator_id = request.GET.get('coordinator')\n  doc = None\n  \n  if coordinator_id:\n    doc = Document2.objects.get(id=coordinator_id)\n    coordinator = Coordinator(document=doc)\n  else:\n    coordinator = Coordinator()\n\n  api = get_oozie(request.user)\n  credentials = Credentials()\n  \n  try:  \n    credentials.fetch(api)\n  except Exception, e:\n    LOG.error(smart_str(e))\n\n  workflows = [dict([('uuid', d.content_object.uuid), ('name', d.content_object.name)])\n                                    for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')]\n\n  if coordinator_id and not filter(lambda a: a['uuid'] == coordinator.data['properties']['workflow'], workflows):\n    raise PopupException(_('You don\\'t have access to the workflow of this coordinator.'))\n\n  return render('editor/coordinator_editor.mako', request, {\n      'coordinator_json': coordinator.json_for_html(),\n      'credentials_json': json.dumps(credentials.credentials.keys(), cls=JSONEncoderForHTML),\n      'workflows_json': json.dumps(workflows, cls=JSONEncoderForHTML),\n      'doc1_id': doc.doc.get().id if doc else -1,\n      'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user))\n  })", "line_changes": {"deleted": [{"line_no": 27, "char_start": 915, "char_end": 959, "line": "      'coordinator_json': coordinator.json,\n"}, {"line_no": 28, "char_start": 959, "char_end": 1029, "line": "      'credentials_json': json.dumps(credentials.credentials.keys()),\n"}, {"line_no": 29, "char_start": 1029, "char_end": 1076, "line": "      'workflows_json': json.dumps(workflows),\n"}], "added": [{"line_no": 27, "char_start": 915, "char_end": 970, "line": "      'coordinator_json': coordinator.json_for_html(),\n"}, {"line_no": 28, "char_start": 970, "char_end": 1064, "line": "      'credentials_json': json.dumps(credentials.credentials.keys(), cls=JSONEncoderForHTML),\n"}, {"line_no": 29, "char_start": 1064, "char_end": 1135, "line": "      'workflows_json': json.dumps(workflows, cls=JSONEncoderForHTML),\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 957, "char_end": 968, "chars": "_for_html()"}, {"char_start": 1037, "char_end": 1061, "chars": ", cls=JSONEncoderForHTML"}, {"char_start": 1108, "char_end": 1132, "chars": ", cls=JSONEncoderForHTML"}]}, "commit_link": "github.com/gethue/hue/commit/6641c62beaa1468082e47d82da5ed758d11c7735", "file_name": "apps/oozie/src/oozie/views/editor2.py", "vul_type": "cwe-079"}
{"func_name": "_keyify", "func_src_before": "def _keyify(key):\n    return _key_pattern.sub(' ', key.lower())", "func_src_after": "def _keyify(key):\n    key = escape(key.lower(), quote=True)\n    return _key_pattern.sub(' ', key)", "line_changes": {"deleted": [{"line_no": 2, "char_start": 18, "char_end": 63, "line": "    return _key_pattern.sub(' ', key.lower())\n"}], "added": [{"line_no": 2, "char_start": 18, "char_end": 60, "line": "    key = escape(key.lower(), quote=True)\n"}, {"line_no": 3, "char_start": 60, "char_end": 97, "line": "    return _key_pattern.sub(' ', key)\n"}]}, "char_changes": {"deleted": [{"char_start": 54, "char_end": 62, "chars": ".lower()"}], "added": [{"char_start": 22, "char_end": 64, "chars": "key = escape(key.lower(), quote=True)\n    "}]}, "commit_link": "github.com/lepture/mistune/commit/5f06d724bc05580e7f203db2d4a4905fc1127f98", "file_name": "mistune.py", "vul_type": "cwe-079"}
{"func_name": "batch_edit_translations", "func_src_before": "@login_required(redirect_field_name='', login_url='/403')\n@require_POST\n@require_AJAX\n@transaction.atomic\ndef batch_edit_translations(request):\n    \"\"\"Perform an action on a list of translations.\n\n    Available actions are defined in `ACTIONS_FN_MAP`. Arguments to this view\n    are defined in `models.BatchActionsForm`.\n\n    \"\"\"\n    form = forms.BatchActionsForm(request.POST)\n    if not form.is_valid():\n        return HttpResponseBadRequest(form.errors.as_json())\n\n    locale = get_object_or_404(Locale, code=form.cleaned_data['locale'])\n    entities = Entity.objects.filter(pk__in=form.cleaned_data['entities'])\n\n    if not entities.exists():\n        return JsonResponse({'count': 0})\n\n    # Batch editing is only available to translators. Check if user has\n    # translate permissions for all of the projects in passed entities.\n    # Also make sure projects are not enabled in read-only mode for a locale.\n    projects_pk = entities.values_list('resource__project__pk', flat=True)\n    projects = Project.objects.filter(pk__in=projects_pk.distinct())\n\n    for project in projects:\n        if (\n            not request.user.can_translate(project=project, locale=locale)\n            or readonly_exists(projects, locale)\n        ):\n            return HttpResponseForbidden(\n                \"Forbidden: You don't have permission for batch editing\"\n            )\n\n    # Find all impacted active translations, including plural forms.\n    active_translations = Translation.objects.filter(\n        active=True,\n        locale=locale,\n        entity__in=entities,\n    )\n\n    # Execute the actual action.\n    action_function = ACTIONS_FN_MAP[form.cleaned_data['action']]\n    action_status = action_function(\n        form,\n        request.user,\n        active_translations,\n        locale,\n    )\n\n    if action_status.get('error'):\n        return JsonResponse(action_status)\n\n    invalid_translation_count = len(action_status.get('invalid_translation_pks', []))\n    if action_status['count'] == 0:\n        return JsonResponse({\n            'count': 0,\n            'invalid_translation_count': invalid_translation_count,\n        })\n\n    update_stats(action_status['translated_resources'], locale)\n    mark_changed_translation(action_status['changed_entities'], locale)\n\n    # Update latest translation.\n    if action_status['latest_translation_pk']:\n        Translation.objects.get(\n            pk=action_status['latest_translation_pk']\n        ).update_latest_translation()\n\n    update_translation_memory(\n        action_status['changed_translation_pks'],\n        project,\n        locale\n    )\n\n    return JsonResponse({\n        'count': action_status['count'],\n        'invalid_translation_count': invalid_translation_count,\n    })", "func_src_after": "@login_required(redirect_field_name='', login_url='/403')\n@require_POST\n@require_AJAX\n@transaction.atomic\ndef batch_edit_translations(request):\n    \"\"\"Perform an action on a list of translations.\n\n    Available actions are defined in `ACTIONS_FN_MAP`. Arguments to this view\n    are defined in `models.BatchActionsForm`.\n\n    \"\"\"\n    form = forms.BatchActionsForm(request.POST)\n    if not form.is_valid():\n        return HttpResponseBadRequest(form.errors.as_json(escape_html=True))\n\n    locale = get_object_or_404(Locale, code=form.cleaned_data['locale'])\n    entities = Entity.objects.filter(pk__in=form.cleaned_data['entities'])\n\n    if not entities.exists():\n        return JsonResponse({'count': 0})\n\n    # Batch editing is only available to translators. Check if user has\n    # translate permissions for all of the projects in passed entities.\n    # Also make sure projects are not enabled in read-only mode for a locale.\n    projects_pk = entities.values_list('resource__project__pk', flat=True)\n    projects = Project.objects.filter(pk__in=projects_pk.distinct())\n\n    for project in projects:\n        if (\n            not request.user.can_translate(project=project, locale=locale)\n            or readonly_exists(projects, locale)\n        ):\n            return HttpResponseForbidden(\n                \"Forbidden: You don't have permission for batch editing\"\n            )\n\n    # Find all impacted active translations, including plural forms.\n    active_translations = Translation.objects.filter(\n        active=True,\n        locale=locale,\n        entity__in=entities,\n    )\n\n    # Execute the actual action.\n    action_function = ACTIONS_FN_MAP[form.cleaned_data['action']]\n    action_status = action_function(\n        form,\n        request.user,\n        active_translations,\n        locale,\n    )\n\n    if action_status.get('error'):\n        return JsonResponse(action_status)\n\n    invalid_translation_count = len(action_status.get('invalid_translation_pks', []))\n    if action_status['count'] == 0:\n        return JsonResponse({\n            'count': 0,\n            'invalid_translation_count': invalid_translation_count,\n        })\n\n    update_stats(action_status['translated_resources'], locale)\n    mark_changed_translation(action_status['changed_entities'], locale)\n\n    # Update latest translation.\n    if action_status['latest_translation_pk']:\n        Translation.objects.get(\n            pk=action_status['latest_translation_pk']\n        ).update_latest_translation()\n\n    update_translation_memory(\n        action_status['changed_translation_pks'],\n        project,\n        locale\n    )\n\n    return JsonResponse({\n        'count': action_status['count'],\n        'invalid_translation_count': invalid_translation_count,\n    })", "line_changes": {"deleted": [{"line_no": 14, "char_start": 406, "char_end": 467, "line": "        return HttpResponseBadRequest(form.errors.as_json())\n"}], "added": [{"line_no": 14, "char_start": 406, "char_end": 483, "line": "        return HttpResponseBadRequest(form.errors.as_json(escape_html=True))\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 464, "char_end": 480, "chars": "escape_html=True"}]}, "commit_link": "github.com/onefork/pontoon-sr/commit/fc07ed9c68e08d41f74c078b4e7727f1a0888be8", "file_name": "pontoon/batch/views.py", "vul_type": "cwe-079"}
{"func_name": "make_eb_config", "func_src_before": "def make_eb_config(application_name, default_region):\n    # Capture our current directory\n    UTILS_DIR = os.path.dirname(os.path.abspath(__file__))\n    # Create the jinja2 environment.\n    # Notice the use of trim_blocks, which greatly helps control whitespace.\n    j2_env = Environment(loader=FileSystemLoader(UTILS_DIR))\n    return j2_env.get_template('templates/eb/config.yml').render(\n        APPLICATION_NAME=application_name,\n        DEFAULT_REGION=default_region\n    )", "func_src_after": "def make_eb_config(application_name, default_region):\n    # Capture our current directory\n    UTILS_DIR = os.path.dirname(os.path.abspath(__file__))\n    # Create the jinja2 environment.\n    # Notice the use of trim_blocks, which greatly helps control whitespace.\n    j2_env = Environment(loader=FileSystemLoader(UTILS_DIR), autoescape=True)\n    return j2_env.get_template('templates/eb/config.yml').render(\n        APPLICATION_NAME=application_name,\n        DEFAULT_REGION=default_region\n    )", "line_changes": {"deleted": [{"line_no": 6, "char_start": 263, "char_end": 324, "line": "    j2_env = Environment(loader=FileSystemLoader(UTILS_DIR))\n"}], "added": [{"line_no": 6, "char_start": 263, "char_end": 341, "line": "    j2_env = Environment(loader=FileSystemLoader(UTILS_DIR), autoescape=True)\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 322, "char_end": 339, "chars": ", autoescape=True"}]}, "commit_link": "github.com/OkunaOrg/okuna-www-api/commit/8c40c66ea7c483a0cbda4c21940180af909aab99", "file_name": "utils/make_eb_config.py", "vul_type": "cwe-079"}
{"func_name": "mode_keepalive", "func_src_before": "    def mode_keepalive(self, request):\n        \"\"\"\n        This is called by render_POST when the\n        client is replying to the keepalive.\n        \"\"\"\n        csessid = request.args.get('csessid')[0]\n        self.last_alive[csessid] = (time.time(), False)\n        return '\"\"'", "func_src_after": "    def mode_keepalive(self, request):\n        \"\"\"\n        This is called by render_POST when the\n        client is replying to the keepalive.\n        \"\"\"\n        csessid = cgi.escape(request.args['csessid'][0])\n        self.last_alive[csessid] = (time.time(), False)\n        return '\"\"'", "line_changes": {"deleted": [{"line_no": 6, "char_start": 155, "char_end": 204, "line": "        csessid = request.args.get('csessid')[0]\n"}], "added": [{"line_no": 6, "char_start": 155, "char_end": 212, "line": "        csessid = cgi.escape(request.args['csessid'][0])\n"}]}, "char_changes": {"deleted": [{"char_start": 185, "char_end": 190, "chars": ".get("}, {"char_start": 199, "char_end": 200, "chars": ")"}], "added": [{"char_start": 173, "char_end": 184, "chars": "cgi.escape("}, {"char_start": 196, "char_end": 197, "chars": "["}, {"char_start": 206, "char_end": 207, "chars": "]"}, {"char_start": 210, "char_end": 211, "chars": ")"}]}, "commit_link": "github.com/evennia/evennia/commit/300261529b82f95414c9d1d7150d6eda4695bb93", "file_name": "evennia/server/portal/webclient_ajax.py", "vul_type": "cwe-079"}
{"func_name": "Logger::addPeer", "func_src_before": "void Logger::addPeer(const QString &ip, bool blocked, const QString &reason)\n{\n    QWriteLocker locker(&lock);\n\n    Log::Peer temp = { peerCounter++, QDateTime::currentMSecsSinceEpoch(), ip, blocked, reason };\n    m_peers.push_back(temp);\n\n    if (m_peers.size() >= MAX_LOG_MESSAGES)\n        m_peers.pop_front();\n\n    emit newLogPeer(temp);\n}", "func_src_after": "void Logger::addPeer(const QString &ip, bool blocked, const QString &reason)\n{\n    QWriteLocker locker(&lock);\n\n    Log::Peer temp = { peerCounter++, QDateTime::currentMSecsSinceEpoch(), Utils::String::toHtmlEscaped(ip), blocked, Utils::String::toHtmlEscaped(reason) };\n    m_peers.push_back(temp);\n\n    if (m_peers.size() >= MAX_LOG_MESSAGES)\n        m_peers.pop_front();\n\n    emit newLogPeer(temp);\n}", "line_changes": {"deleted": [{"line_no": 5, "char_start": 112, "char_end": 210, "line": "    Log::Peer temp = { peerCounter++, QDateTime::currentMSecsSinceEpoch(), ip, blocked, reason };\n"}], "added": [{"line_no": 5, "char_start": 112, "char_end": 270, "line": "    Log::Peer temp = { peerCounter++, QDateTime::currentMSecsSinceEpoch(), Utils::String::toHtmlEscaped(ip), blocked, Utils::String::toHtmlEscaped(reason) };\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 187, "char_end": 216, "chars": "Utils::String::toHtmlEscaped("}, {"char_start": 218, "char_end": 219, "chars": ")"}, {"char_start": 230, "char_end": 259, "chars": "Utils::String::toHtmlEscaped("}, {"char_start": 265, "char_end": 266, "chars": ")"}]}, "commit_link": "github.com/qbittorrent/qBittorrent/commit/6ca3e4f094da0a0017cb2d483ec1db6176bb0b16", "file_name": "src/base/logger.cpp", "vul_type": "cwe-079"}
{"func_name": "subscribe_for_tags", "func_src_before": "@csrf.csrf_protect\ndef subscribe_for_tags(request):\n    \"\"\"process subscription of users by tags\"\"\"\n    #todo - use special separator to split tags\n    tag_names = request.REQUEST.get('tags','').strip().split()\n    pure_tag_names, wildcards = forms.clean_marked_tagnames(tag_names)\n    if request.user.is_authenticated():\n        if request.method == 'POST':\n            if 'ok' in request.POST:\n                request.user.mark_tags(\n                            pure_tag_names,\n                            wildcards,\n                            reason = 'good',\n                            action = 'add'\n                        )\n                request.user.message_set.create(\n                    message = _('Your tag subscription was saved, thanks!')\n                )\n            else:\n                message = _(\n                    'Tag subscription was canceled (<a href=\"%(url)s\">undo</a>).'\n                ) % {'url': request.path + '?tags=' + request.REQUEST['tags']}\n                request.user.message_set.create(message = message)\n            return HttpResponseRedirect(reverse('index'))\n        else:\n            data = {'tags': tag_names}\n            return render(request, 'subscribe_for_tags.html', data)\n    else:\n        all_tag_names = pure_tag_names + wildcards\n        message = _('Please sign in to subscribe for: %(tags)s') \\\n                    % {'tags': ', '.join(all_tag_names)}\n        request.user.message_set.create(message = message)\n        request.session['subscribe_for_tags'] = (pure_tag_names, wildcards)\n        return HttpResponseRedirect(url_utils.get_login_url())", "func_src_after": "@csrf.csrf_protect\ndef subscribe_for_tags(request):\n    \"\"\"process subscription of users by tags\"\"\"\n    #todo - use special separator to split tags\n    tag_names = request.REQUEST.get('tags','').strip().split()\n    pure_tag_names, wildcards = forms.clean_marked_tagnames(tag_names)\n    if request.user.is_authenticated():\n        if request.method == 'POST':\n            if 'ok' in request.POST:\n                request.user.mark_tags(\n                            pure_tag_names,\n                            wildcards,\n                            reason = 'good',\n                            action = 'add'\n                        )\n                request.user.message_set.create(\n                    message = _('Your tag subscription was saved, thanks!')\n                )\n            else:\n                message = _(\n                    'Tag subscription was canceled (<a href=\"%(url)s\">undo</a>).'\n                ) % {'url': escape(request.path) + '?tags=' + request.REQUEST['tags']}\n                request.user.message_set.create(message = message)\n            return HttpResponseRedirect(reverse('index'))\n        else:\n            data = {'tags': tag_names}\n            return render(request, 'subscribe_for_tags.html', data)\n    else:\n        all_tag_names = pure_tag_names + wildcards\n        message = _('Please sign in to subscribe for: %(tags)s') \\\n                    % {'tags': ', '.join(all_tag_names)}\n        request.user.message_set.create(message = message)\n        request.session['subscribe_for_tags'] = (pure_tag_names, wildcards)\n        return HttpResponseRedirect(url_utils.get_login_url())", "line_changes": {"deleted": [{"line_no": 22, "char_start": 905, "char_end": 984, "line": "                ) % {'url': request.path + '?tags=' + request.REQUEST['tags']}\n"}], "added": [{"line_no": 22, "char_start": 905, "char_end": 992, "line": "                ) % {'url': escape(request.path) + '?tags=' + request.REQUEST['tags']}\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 933, "char_end": 940, "chars": "escape("}, {"char_start": 952, "char_end": 953, "chars": ")"}]}, "commit_link": "github.com/ASKBOT/askbot-devel/commit/a676a86b6b7a5737d4da4f59f71e037406f88d29", "file_name": "askbot/views/commands.py", "vul_type": "cwe-079"}
{"func_name": "nav_path", "func_src_before": "def nav_path(request):\n  \"\"\"Return current path as list of items with \"name\" and \"href\" members\n\n  The href members are view_directory links for directories and view_log\n  links for files, but are set to None when the link would point to\n  the current view\"\"\"\n\n  if not request.repos:\n    return []\n\n  is_dir = request.pathtype == vclib.DIR\n\n  # add root item\n  items = []\n  root_item = _item(name=request.server.escape(request.repos.name), href=None)\n  if request.path_parts or request.view_func is not view_directory:\n    root_item.href = request.get_url(view_func=view_directory,\n                                     where='', pathtype=vclib.DIR,\n                                     params={}, escape=1)\n  items.append(root_item)\n\n  # add path part items\n  path_parts = []\n  for part in request.path_parts:\n    path_parts.append(part)\n    is_last = len(path_parts) == len(request.path_parts)\n\n    item = _item(name=part, href=None)\n\n    if not is_last or (is_dir and request.view_func is not view_directory):\n      item.href = request.get_url(view_func=view_directory,\n                                  where=_path_join(path_parts),\n                                  pathtype=vclib.DIR,\n                                  params={}, escape=1)\n    elif not is_dir and request.view_func is not view_log:\n      item.href = request.get_url(view_func=view_log,\n                                  where=_path_join(path_parts),\n                                  pathtype=vclib.FILE,\n                                  params={}, escape=1)\n    items.append(item)\n\n  return items", "func_src_after": "def nav_path(request):\n  \"\"\"Return current path as list of items with \"name\" and \"href\" members\n\n  The href members are view_directory links for directories and view_log\n  links for files, but are set to None when the link would point to\n  the current view\"\"\"\n\n  if not request.repos:\n    return []\n\n  is_dir = request.pathtype == vclib.DIR\n\n  # add root item\n  items = []\n  root_item = _item(name=request.server.escape(request.repos.name), href=None)\n  if request.path_parts or request.view_func is not view_directory:\n    root_item.href = request.get_url(view_func=view_directory,\n                                     where='', pathtype=vclib.DIR,\n                                     params={}, escape=1)\n  items.append(root_item)\n\n  # add path part items\n  path_parts = []\n  for part in request.path_parts:\n    path_parts.append(part)\n    is_last = len(path_parts) == len(request.path_parts)\n\n    item = _item(name=request.server.escape(part), href=None)\n\n    if not is_last or (is_dir and request.view_func is not view_directory):\n      item.href = request.get_url(view_func=view_directory,\n                                  where=_path_join(path_parts),\n                                  pathtype=vclib.DIR,\n                                  params={}, escape=1)\n    elif not is_dir and request.view_func is not view_log:\n      item.href = request.get_url(view_func=view_log,\n                                  where=_path_join(path_parts),\n                                  pathtype=vclib.FILE,\n                                  params={}, escape=1)\n    items.append(item)\n\n  return items", "line_changes": {"deleted": [{"line_no": 28, "char_start": 897, "char_end": 936, "line": "    item = _item(name=part, href=None)\n"}], "added": [{"line_no": 28, "char_start": 897, "char_end": 959, "line": "    item = _item(name=request.server.escape(part), href=None)\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 919, "char_end": 941, "chars": "request.server.escape("}, {"char_start": 945, "char_end": 946, "chars": ")"}]}, "commit_link": "github.com/viewvc/viewvc/commit/9dcfc7daa4c940992920d3b2fbd317da20e44aad", "file_name": "lib/viewvc.py", "vul_type": "cwe-079"}
{"func_name": "__init__", "func_src_before": "    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Takes two additional keyword arguments:\n\n        :param cartpos: The cart position the form should be for\n        :param event: The event this belongs to\n        \"\"\"\n        cartpos = self.cartpos = kwargs.pop('cartpos', None)\n        orderpos = self.orderpos = kwargs.pop('orderpos', None)\n        pos = cartpos or orderpos\n        item = pos.item\n        questions = pos.item.questions_to_ask\n        event = kwargs.pop('event')\n\n        super().__init__(*args, **kwargs)\n\n        if item.admission and event.settings.attendee_names_asked:\n            self.fields['attendee_name_parts'] = NamePartsFormField(\n                max_length=255,\n                required=event.settings.attendee_names_required,\n                scheme=event.settings.name_scheme,\n                label=_('Attendee name'),\n                initial=(cartpos.attendee_name_parts if cartpos else orderpos.attendee_name_parts),\n            )\n        if item.admission and event.settings.attendee_emails_asked:\n            self.fields['attendee_email'] = forms.EmailField(\n                required=event.settings.attendee_emails_required,\n                label=_('Attendee email'),\n                initial=(cartpos.attendee_email if cartpos else orderpos.attendee_email)\n            )\n\n        for q in questions:\n            # Do we already have an answer? Provide it as the initial value\n            answers = [a for a in pos.answerlist if a.question_id == q.id]\n            if answers:\n                initial = answers[0]\n            else:\n                initial = None\n            tz = pytz.timezone(event.settings.timezone)\n            help_text = rich_text(q.help_text)\n            if q.type == Question.TYPE_BOOLEAN:\n                if q.required:\n                    # For some reason, django-bootstrap3 does not set the required attribute\n                    # itself.\n                    widget = forms.CheckboxInput(attrs={'required': 'required'})\n                else:\n                    widget = forms.CheckboxInput()\n\n                if initial:\n                    initialbool = (initial.answer == \"True\")\n                else:\n                    initialbool = False\n\n                field = forms.BooleanField(\n                    label=q.question, required=q.required,\n                    help_text=help_text,\n                    initial=initialbool, widget=widget,\n                )\n            elif q.type == Question.TYPE_NUMBER:\n                field = forms.DecimalField(\n                    label=q.question, required=q.required,\n                    help_text=q.help_text,\n                    initial=initial.answer if initial else None,\n                    min_value=Decimal('0.00'),\n                )\n            elif q.type == Question.TYPE_STRING:\n                field = forms.CharField(\n                    label=q.question, required=q.required,\n                    help_text=help_text,\n                    initial=initial.answer if initial else None,\n                )\n            elif q.type == Question.TYPE_TEXT:\n                field = forms.CharField(\n                    label=q.question, required=q.required,\n                    help_text=help_text,\n                    widget=forms.Textarea,\n                    initial=initial.answer if initial else None,\n                )\n            elif q.type == Question.TYPE_CHOICE:\n                field = forms.ModelChoiceField(\n                    queryset=q.options,\n                    label=q.question, required=q.required,\n                    help_text=help_text,\n                    widget=forms.Select,\n                    empty_label='',\n                    initial=initial.options.first() if initial else None,\n                )\n            elif q.type == Question.TYPE_CHOICE_MULTIPLE:\n                field = forms.ModelMultipleChoiceField(\n                    queryset=q.options,\n                    label=q.question, required=q.required,\n                    help_text=help_text,\n                    widget=forms.CheckboxSelectMultiple,\n                    initial=initial.options.all() if initial else None,\n                )\n            elif q.type == Question.TYPE_FILE:\n                field = forms.FileField(\n                    label=q.question, required=q.required,\n                    help_text=help_text,\n                    initial=initial.file if initial else None,\n                    widget=UploadedFileWidget(position=pos, event=event, answer=initial),\n                )\n            elif q.type == Question.TYPE_DATE:\n                field = forms.DateField(\n                    label=q.question, required=q.required,\n                    help_text=help_text,\n                    initial=dateutil.parser.parse(initial.answer).date() if initial and initial.answer else None,\n                    widget=DatePickerWidget(),\n                )\n            elif q.type == Question.TYPE_TIME:\n                field = forms.TimeField(\n                    label=q.question, required=q.required,\n                    help_text=help_text,\n                    initial=dateutil.parser.parse(initial.answer).time() if initial and initial.answer else None,\n                    widget=TimePickerWidget(time_format=get_format_without_seconds('TIME_INPUT_FORMATS')),\n                )\n            elif q.type == Question.TYPE_DATETIME:\n                field = SplitDateTimeField(\n                    label=q.question, required=q.required,\n                    help_text=help_text,\n                    initial=dateutil.parser.parse(initial.answer).astimezone(tz) if initial and initial.answer else None,\n                    widget=SplitDateTimePickerWidget(time_format=get_format_without_seconds('TIME_INPUT_FORMATS')),\n                )\n            field.question = q\n            if answers:\n                # Cache the answer object for later use\n                field.answer = answers[0]\n            self.fields['question_%s' % q.id] = field\n\n        responses = question_form_fields.send(sender=event, position=pos)\n        data = pos.meta_info_data\n        for r, response in sorted(responses, key=lambda r: str(r[0])):\n            for key, value in response.items():\n                # We need to be this explicit, since OrderedDict.update does not retain ordering\n                self.fields[key] = value\n                value.initial = data.get('question_form_data', {}).get(key)", "func_src_after": "    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Takes two additional keyword arguments:\n\n        :param cartpos: The cart position the form should be for\n        :param event: The event this belongs to\n        \"\"\"\n        cartpos = self.cartpos = kwargs.pop('cartpos', None)\n        orderpos = self.orderpos = kwargs.pop('orderpos', None)\n        pos = cartpos or orderpos\n        item = pos.item\n        questions = pos.item.questions_to_ask\n        event = kwargs.pop('event')\n\n        super().__init__(*args, **kwargs)\n\n        if item.admission and event.settings.attendee_names_asked:\n            self.fields['attendee_name_parts'] = NamePartsFormField(\n                max_length=255,\n                required=event.settings.attendee_names_required,\n                scheme=event.settings.name_scheme,\n                label=_('Attendee name'),\n                initial=(cartpos.attendee_name_parts if cartpos else orderpos.attendee_name_parts),\n            )\n        if item.admission and event.settings.attendee_emails_asked:\n            self.fields['attendee_email'] = forms.EmailField(\n                required=event.settings.attendee_emails_required,\n                label=_('Attendee email'),\n                initial=(cartpos.attendee_email if cartpos else orderpos.attendee_email)\n            )\n\n        for q in questions:\n            # Do we already have an answer? Provide it as the initial value\n            answers = [a for a in pos.answerlist if a.question_id == q.id]\n            if answers:\n                initial = answers[0]\n            else:\n                initial = None\n            tz = pytz.timezone(event.settings.timezone)\n            help_text = rich_text(q.help_text)\n            label = escape(q.question)  # django-bootstrap3 calls mark_safe\n            if q.type == Question.TYPE_BOOLEAN:\n                if q.required:\n                    # For some reason, django-bootstrap3 does not set the required attribute\n                    # itself.\n                    widget = forms.CheckboxInput(attrs={'required': 'required'})\n                else:\n                    widget = forms.CheckboxInput()\n\n                if initial:\n                    initialbool = (initial.answer == \"True\")\n                else:\n                    initialbool = False\n\n                field = forms.BooleanField(\n                    label=label, required=q.required,\n                    help_text=help_text,\n                    initial=initialbool, widget=widget,\n                )\n            elif q.type == Question.TYPE_NUMBER:\n                field = forms.DecimalField(\n                    label=label, required=q.required,\n                    help_text=q.help_text,\n                    initial=initial.answer if initial else None,\n                    min_value=Decimal('0.00'),\n                )\n            elif q.type == Question.TYPE_STRING:\n                field = forms.CharField(\n                    label=label, required=q.required,\n                    help_text=help_text,\n                    initial=initial.answer if initial else None,\n                )\n            elif q.type == Question.TYPE_TEXT:\n                field = forms.CharField(\n                    label=label, required=q.required,\n                    help_text=help_text,\n                    widget=forms.Textarea,\n                    initial=initial.answer if initial else None,\n                )\n            elif q.type == Question.TYPE_CHOICE:\n                field = forms.ModelChoiceField(\n                    queryset=q.options,\n                    label=label, required=q.required,\n                    help_text=help_text,\n                    widget=forms.Select,\n                    empty_label='',\n                    initial=initial.options.first() if initial else None,\n                )\n            elif q.type == Question.TYPE_CHOICE_MULTIPLE:\n                field = forms.ModelMultipleChoiceField(\n                    queryset=q.options,\n                    label=label, required=q.required,\n                    help_text=help_text,\n                    widget=forms.CheckboxSelectMultiple,\n                    initial=initial.options.all() if initial else None,\n                )\n            elif q.type == Question.TYPE_FILE:\n                field = forms.FileField(\n                    label=label, required=q.required,\n                    help_text=help_text,\n                    initial=initial.file if initial else None,\n                    widget=UploadedFileWidget(position=pos, event=event, answer=initial),\n                )\n            elif q.type == Question.TYPE_DATE:\n                field = forms.DateField(\n                    label=label, required=q.required,\n                    help_text=help_text,\n                    initial=dateutil.parser.parse(initial.answer).date() if initial and initial.answer else None,\n                    widget=DatePickerWidget(),\n                )\n            elif q.type == Question.TYPE_TIME:\n                field = forms.TimeField(\n                    label=label, required=q.required,\n                    help_text=help_text,\n                    initial=dateutil.parser.parse(initial.answer).time() if initial and initial.answer else None,\n                    widget=TimePickerWidget(time_format=get_format_without_seconds('TIME_INPUT_FORMATS')),\n                )\n            elif q.type == Question.TYPE_DATETIME:\n                field = SplitDateTimeField(\n                    label=label, required=q.required,\n                    help_text=help_text,\n                    initial=dateutil.parser.parse(initial.answer).astimezone(tz) if initial and initial.answer else None,\n                    widget=SplitDateTimePickerWidget(time_format=get_format_without_seconds('TIME_INPUT_FORMATS')),\n                )\n            field.question = q\n            if answers:\n                # Cache the answer object for later use\n                field.answer = answers[0]\n            self.fields['question_%s' % q.id] = field\n\n        responses = question_form_fields.send(sender=event, position=pos)\n        data = pos.meta_info_data\n        for r, response in sorted(responses, key=lambda r: str(r[0])):\n            for key, value in response.items():\n                # We need to be this explicit, since OrderedDict.update does not retain ordering\n                self.fields[key] = value\n                value.initial = data.get('question_form_data', {}).get(key)", "line_changes": {"deleted": [{"line_no": 55, "char_start": 2264, "char_end": 2323, "line": "                    label=q.question, required=q.required,\n"}, {"line_no": 61, "char_start": 2531, "char_end": 2590, "line": "                    label=q.question, required=q.required,\n"}, {"line_no": 68, "char_start": 2853, "char_end": 2912, "line": "                    label=q.question, required=q.required,\n"}, {"line_no": 74, "char_start": 3124, "char_end": 3183, "line": "                    label=q.question, required=q.required,\n"}, {"line_no": 82, "char_start": 3487, "char_end": 3546, "line": "                    label=q.question, required=q.required,\n"}, {"line_no": 91, "char_start": 3910, "char_end": 3969, "line": "                    label=q.question, required=q.required,\n"}, {"line_no": 98, "char_start": 4245, "char_end": 4304, "line": "                    label=q.question, required=q.required,\n"}, {"line_no": 105, "char_start": 4604, "char_end": 4663, "line": "                    label=q.question, required=q.required,\n"}, {"line_no": 112, "char_start": 4971, "char_end": 5030, "line": "                    label=q.question, required=q.required,\n"}, {"line_no": 119, "char_start": 5405, "char_end": 5464, "line": "                    label=q.question, required=q.required,\n"}], "added": [{"line_no": 41, "char_start": 1711, "char_end": 1787, "line": "            label = escape(q.question)  # django-bootstrap3 calls mark_safe\n"}, {"line_no": 56, "char_start": 2340, "char_end": 2394, "line": "                    label=label, required=q.required,\n"}, {"line_no": 62, "char_start": 2602, "char_end": 2656, "line": "                    label=label, required=q.required,\n"}, {"line_no": 69, "char_start": 2919, "char_end": 2973, "line": "                    label=label, required=q.required,\n"}, {"line_no": 75, "char_start": 3185, "char_end": 3239, "line": "                    label=label, required=q.required,\n"}, {"line_no": 83, "char_start": 3543, "char_end": 3597, "line": "                    label=label, required=q.required,\n"}, {"line_no": 92, "char_start": 3961, "char_end": 4015, "line": "                    label=label, required=q.required,\n"}, {"line_no": 99, "char_start": 4291, "char_end": 4345, "line": "                    label=label, required=q.required,\n"}, {"line_no": 106, "char_start": 4645, "char_end": 4699, "line": "                    label=label, required=q.required,\n"}, {"line_no": 113, "char_start": 5007, "char_end": 5061, "line": "                    label=label, required=q.required,\n"}, {"line_no": 120, "char_start": 5436, "char_end": 5490, "line": "                    label=label, required=q.required,\n"}]}, "char_changes": {"deleted": [{"char_start": 1759, "char_end": 1759, "chars": ""}, {"char_start": 2290, "char_end": 2294, "chars": "q.qu"}, {"char_start": 2295, "char_end": 2300, "chars": "stion"}, {"char_start": 2557, "char_end": 2561, "chars": "q.qu"}, {"char_start": 2562, "char_end": 2567, "chars": "stion"}, {"char_start": 2879, "char_end": 2883, "chars": "q.qu"}, {"char_start": 2884, "char_end": 2889, "chars": "stion"}, {"char_start": 3150, "char_end": 3154, "chars": "q.qu"}, {"char_start": 3155, "char_end": 3160, "chars": "stion"}, {"char_start": 3513, "char_end": 3517, "chars": "q.qu"}, {"char_start": 3518, "char_end": 3523, "chars": "stion"}, {"char_start": 3936, "char_end": 3940, "chars": "q.qu"}, {"char_start": 3941, "char_end": 3946, "chars": "stion"}, {"char_start": 4271, "char_end": 4275, "chars": "q.qu"}, {"char_start": 4276, "char_end": 4281, "chars": "stion"}, {"char_start": 4630, "char_end": 4634, "chars": "q.qu"}, {"char_start": 4635, "char_end": 4640, "chars": "stion"}, {"char_start": 4997, "char_end": 5001, "chars": "q.qu"}, {"char_start": 5002, "char_end": 5007, "chars": "stion"}, {"char_start": 5431, "char_end": 5435, "chars": "q.qu"}, {"char_start": 5436, "char_end": 5441, "chars": "stion"}], "added": [{"char_start": 1723, "char_end": 1799, "chars": "label = escape(q.question)  # django-bootstrap3 calls mark_safe\n            "}, {"char_start": 2366, "char_end": 2369, "chars": "lab"}, {"char_start": 2370, "char_end": 2371, "chars": "l"}, {"char_start": 2628, "char_end": 2631, "chars": "lab"}, {"char_start": 2632, "char_end": 2633, "chars": "l"}, {"char_start": 2945, "char_end": 2948, "chars": "lab"}, {"char_start": 2949, "char_end": 2950, "chars": "l"}, {"char_start": 3211, "char_end": 3214, "chars": "lab"}, {"char_start": 3215, "char_end": 3216, "chars": "l"}, {"char_start": 3569, "char_end": 3572, "chars": "lab"}, {"char_start": 3573, "char_end": 3574, "chars": "l"}, {"char_start": 3987, "char_end": 3990, "chars": "lab"}, {"char_start": 3991, "char_end": 3992, "chars": "l"}, {"char_start": 4317, "char_end": 4320, "chars": "lab"}, {"char_start": 4321, "char_end": 4322, "chars": "l"}, {"char_start": 4671, "char_end": 4674, "chars": "lab"}, {"char_start": 4675, "char_end": 4676, "chars": "l"}, {"char_start": 5033, "char_end": 5036, "chars": "lab"}, {"char_start": 5037, "char_end": 5038, "chars": "l"}, {"char_start": 5462, "char_end": 5465, "chars": "lab"}, {"char_start": 5466, "char_end": 5467, "chars": "l"}]}, "commit_link": "github.com/pretix/pretix/commit/affc6254a8316643d4afe9e8b7f8cd288c86ca1f", "file_name": "src/pretix/base/forms/questions.py", "vul_type": "cwe-079"}
{"func_name": "link_dialog", "func_src_before": "def link_dialog(request):\n    # list of wiki pages\n    name = request.values.get(\"pagename\", \"\")\n    if name:\n        from MoinMoin import search\n        # XXX error handling!\n        searchresult = search.searchPages(request, 't:\"%s\"' % name)\n\n        pages = [p.page_name for p in searchresult.hits]\n        pages.sort()\n        pages[0:0] = [name]\n        page_list = '''\n         <tr>\n          <td colspan=2>\n           <select id=\"sctPagename\" size=\"1\" onchange=\"OnChangePagename(this.value);\">\n           %s\n           </select>\n          <td>\n         </tr>\n''' % \"\\n\".join(['<option value=\"%s\">%s</option>' % (wikiutil.escape(page), wikiutil.escape(page))\n                 for page in pages])\n    else:\n        page_list = \"\"\n\n    # list of interwiki names\n    interwiki_list = wikiutil.load_wikimap(request)\n    interwiki = interwiki_list.keys()\n    interwiki.sort()\n    iwpreferred = request.cfg.interwiki_preferred[:]\n    if not iwpreferred or iwpreferred and iwpreferred[-1] is not None:\n        resultlist = iwpreferred\n        for iw in interwiki:\n            if not iw in iwpreferred:\n                resultlist.append(iw)\n    else:\n        resultlist = iwpreferred[:-1]\n    interwiki = \"\\n\".join(\n        ['<option value=\"%s\">%s</option>' % (wikiutil.escape(key), wikiutil.escape(key))\n         for key in resultlist])\n\n    # wiki url\n    url_prefix_static = request.cfg.url_prefix_static\n    scriptname = request.script_root + '/'\n    action = scriptname\n    basepage = wikiutil.escape(request.page.page_name)\n    request.write(u'''\n<!--\n * FCKeditor - The text editor for internet\n * Copyright (C) 2003-2004 Frederico Caldeira Knabben\n *\n * Licensed under the terms of the GNU Lesser General Public License:\n *   http://www.opensource.org/licenses/lgpl-license.php\n *\n * For further information visit:\n *   http://www.fckeditor.net/\n *\n * File Name: fck_link.html\n *  Link dialog window.\n *\n * Version:  2.0 FC (Preview)\n * Modified: 2005-02-18 23:55:22\n *\n * File Authors:\n *   Frederico Caldeira Knabben (fredck@fckeditor.net)\n-->\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\">\n<meta name=\"robots\" content=\"index,nofollow\">\n<html>\n <head>\n  <title>Link Properties</title>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"robots\" content=\"noindex,nofollow\" />\n  <script src=\"%(url_prefix_static)s/applets/FCKeditor/editor/dialog/common/fck_dialog_common.js\" type=\"text/javascript\"></script>\n  <script src=\"%(url_prefix_static)s/applets/moinFCKplugins/moinlink/fck_link.js\" type=\"text/javascript\"></script>\n  <script src=\"%(url_prefix_static)s/applets/moinFCKplugins/moinurllib.js\" type=\"text/javascript\"></script>\n </head>\n <body scroll=\"no\" style=\"OVERFLOW: hidden\">\n  <div id=\"divInfo\" style=\"DISPLAY: none\">\n   <span fckLang=\"DlgLnkType\">Link Type</span><br />\n   <select id=\"cmbLinkType\" onchange=\"SetLinkType(this.value);\">\n    <option value=\"wiki\" selected=\"selected\">WikiPage</option>\n    <option value=\"interwiki\">Interwiki</option>\n    <option value=\"url\" fckLang=\"DlgLnkTypeURL\">URL</option>\n   </select>\n   <br />\n   <br />\n   <div id=\"divLinkTypeWiki\">\n    <table height=\"100%%\" cellSpacing=\"0\" cellPadding=\"0\" width=\"100%%\" border=\"0\">\n     <tr>\n      <td>\n       <form action=%(action)s method=\"GET\">\n       <input type=\"hidden\" name=\"action\" value=\"fckdialog\">\n       <input type=\"hidden\" name=\"dialog\" value=\"link\">\n       <input type=\"hidden\" id=\"basepage\" name=\"basepage\" value=\"%(basepage)s\">\n       <table cellSpacing=\"0\" cellPadding=\"0\" align=\"center\" border=\"0\">\n        <tr>\n         <td>\n          <span fckLang=\"PageDlgName\">Page Name</span><br>\n          <input id=\"txtPagename\" name=\"pagename\" size=\"30\" value=\"%(name)s\">\n         </td>\n         <td valign=\"bottom\">\n           <input id=btnSearchpage type=\"submit\" value=\"Search\">\n         </td>\n        </tr>\n        %(page_list)s\n       </table>\n       </form>\n      </td>\n     </tr>\n    </table>\n   </div>\n   <div id=\"divLinkTypeInterwiki\">\n    <table height=\"100%%\" cellSpacing=\"0\" cellPadding=\"0\" width=\"100%%\" border=\"0\">\n     <tr>\n      <td>\n       <table cellSpacing=\"0\" cellPadding=\"0\" align=\"center\" border=\"0\">\n        <tr>\n         <td>\n          <span fckLang=\"WikiDlgName\">Wiki:PageName</span><br>\n          <select id=\"sctInterwiki\" size=\"1\">\n          %(interwiki)s\n          </select>:\n          <input id=\"txtInterwikipagename\"></input>\n         </td>\n        </tr>\n       </table>\n      </td>\n     </tr>\n    </table>\n   </div>\n   <div id=\"divLinkTypeUrl\">\n    <table cellspacing=\"0\" cellpadding=\"0\" width=\"100%%\" border=\"0\">\n     <tr>\n      <td nowrap=\"nowrap\">\n       <span fckLang=\"DlgLnkProto\">Protocol</span><br />\n       <select id=\"cmbLinkProtocol\">\n        <option value=\"http://\" selected=\"selected\">http://</option>\n        <option value=\"https://\">https://</option>\n        <option value=\"ftp://\">ftp://</option>\n        <option value=\"file://\">file://</option>\n        <option value=\"news://\">news://</option>\n        <option value=\"mailto:\">mailto:</option>\n        <option value=\"\" fckLang=\"DlgLnkProtoOther\">&lt;other&gt;</option>\n       </select>\n      </td>\n      <td nowrap=\"nowrap\">&nbsp;</td>\n      <td nowrap=\"nowrap\" width=\"100%%\">\n       <span fckLang=\"DlgLnkURL\">URL</span><br />\n       <input id=\"txtUrl\" style=\"WIDTH: 100%%\" type=\"text\" onkeyup=\"OnUrlChange();\" onchange=\"OnUrlChange();\" />\n      </td>\n     </tr>\n    </table>\n    <br />\n   </div>\n  </div>\n </body>\n</html>\n''' % locals())", "func_src_after": "def link_dialog(request):\n    # list of wiki pages\n    name = request.values.get(\"pagename\", \"\")\n    name_escaped = wikiutil.escape(name)\n    if name:\n        from MoinMoin import search\n        # XXX error handling!\n        searchresult = search.searchPages(request, 't:\"%s\"' % name)\n\n        pages = [p.page_name for p in searchresult.hits]\n        pages.sort()\n        pages[0:0] = [name]\n        page_list = '''\n         <tr>\n          <td colspan=2>\n           <select id=\"sctPagename\" size=\"1\" onchange=\"OnChangePagename(this.value);\">\n           %s\n           </select>\n          <td>\n         </tr>\n''' % \"\\n\".join(['<option value=\"%s\">%s</option>' % (wikiutil.escape(page), wikiutil.escape(page))\n                 for page in pages])\n    else:\n        page_list = \"\"\n\n    # list of interwiki names\n    interwiki_list = wikiutil.load_wikimap(request)\n    interwiki = interwiki_list.keys()\n    interwiki.sort()\n    iwpreferred = request.cfg.interwiki_preferred[:]\n    if not iwpreferred or iwpreferred and iwpreferred[-1] is not None:\n        resultlist = iwpreferred\n        for iw in interwiki:\n            if not iw in iwpreferred:\n                resultlist.append(iw)\n    else:\n        resultlist = iwpreferred[:-1]\n    interwiki = \"\\n\".join(\n        ['<option value=\"%s\">%s</option>' % (wikiutil.escape(key), wikiutil.escape(key))\n         for key in resultlist])\n\n    # wiki url\n    url_prefix_static = request.cfg.url_prefix_static\n    scriptname = request.script_root + '/'\n    action = scriptname\n    basepage = wikiutil.escape(request.page.page_name)\n    request.write(u'''\n<!--\n * FCKeditor - The text editor for internet\n * Copyright (C) 2003-2004 Frederico Caldeira Knabben\n *\n * Licensed under the terms of the GNU Lesser General Public License:\n *   http://www.opensource.org/licenses/lgpl-license.php\n *\n * For further information visit:\n *   http://www.fckeditor.net/\n *\n * File Name: fck_link.html\n *  Link dialog window.\n *\n * Version:  2.0 FC (Preview)\n * Modified: 2005-02-18 23:55:22\n *\n * File Authors:\n *   Frederico Caldeira Knabben (fredck@fckeditor.net)\n-->\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\">\n<meta name=\"robots\" content=\"index,nofollow\">\n<html>\n <head>\n  <title>Link Properties</title>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"robots\" content=\"noindex,nofollow\" />\n  <script src=\"%(url_prefix_static)s/applets/FCKeditor/editor/dialog/common/fck_dialog_common.js\" type=\"text/javascript\"></script>\n  <script src=\"%(url_prefix_static)s/applets/moinFCKplugins/moinlink/fck_link.js\" type=\"text/javascript\"></script>\n  <script src=\"%(url_prefix_static)s/applets/moinFCKplugins/moinurllib.js\" type=\"text/javascript\"></script>\n </head>\n <body scroll=\"no\" style=\"OVERFLOW: hidden\">\n  <div id=\"divInfo\" style=\"DISPLAY: none\">\n   <span fckLang=\"DlgLnkType\">Link Type</span><br />\n   <select id=\"cmbLinkType\" onchange=\"SetLinkType(this.value);\">\n    <option value=\"wiki\" selected=\"selected\">WikiPage</option>\n    <option value=\"interwiki\">Interwiki</option>\n    <option value=\"url\" fckLang=\"DlgLnkTypeURL\">URL</option>\n   </select>\n   <br />\n   <br />\n   <div id=\"divLinkTypeWiki\">\n    <table height=\"100%%\" cellSpacing=\"0\" cellPadding=\"0\" width=\"100%%\" border=\"0\">\n     <tr>\n      <td>\n       <form action=%(action)s method=\"GET\">\n       <input type=\"hidden\" name=\"action\" value=\"fckdialog\">\n       <input type=\"hidden\" name=\"dialog\" value=\"link\">\n       <input type=\"hidden\" id=\"basepage\" name=\"basepage\" value=\"%(basepage)s\">\n       <table cellSpacing=\"0\" cellPadding=\"0\" align=\"center\" border=\"0\">\n        <tr>\n         <td>\n          <span fckLang=\"PageDlgName\">Page Name</span><br>\n          <input id=\"txtPagename\" name=\"pagename\" size=\"30\" value=\"%(name_escaped)s\">\n         </td>\n         <td valign=\"bottom\">\n           <input id=btnSearchpage type=\"submit\" value=\"Search\">\n         </td>\n        </tr>\n        %(page_list)s\n       </table>\n       </form>\n      </td>\n     </tr>\n    </table>\n   </div>\n   <div id=\"divLinkTypeInterwiki\">\n    <table height=\"100%%\" cellSpacing=\"0\" cellPadding=\"0\" width=\"100%%\" border=\"0\">\n     <tr>\n      <td>\n       <table cellSpacing=\"0\" cellPadding=\"0\" align=\"center\" border=\"0\">\n        <tr>\n         <td>\n          <span fckLang=\"WikiDlgName\">Wiki:PageName</span><br>\n          <select id=\"sctInterwiki\" size=\"1\">\n          %(interwiki)s\n          </select>:\n          <input id=\"txtInterwikipagename\"></input>\n         </td>\n        </tr>\n       </table>\n      </td>\n     </tr>\n    </table>\n   </div>\n   <div id=\"divLinkTypeUrl\">\n    <table cellspacing=\"0\" cellpadding=\"0\" width=\"100%%\" border=\"0\">\n     <tr>\n      <td nowrap=\"nowrap\">\n       <span fckLang=\"DlgLnkProto\">Protocol</span><br />\n       <select id=\"cmbLinkProtocol\">\n        <option value=\"http://\" selected=\"selected\">http://</option>\n        <option value=\"https://\">https://</option>\n        <option value=\"ftp://\">ftp://</option>\n        <option value=\"file://\">file://</option>\n        <option value=\"news://\">news://</option>\n        <option value=\"mailto:\">mailto:</option>\n        <option value=\"\" fckLang=\"DlgLnkProtoOther\">&lt;other&gt;</option>\n       </select>\n      </td>\n      <td nowrap=\"nowrap\">&nbsp;</td>\n      <td nowrap=\"nowrap\" width=\"100%%\">\n       <span fckLang=\"DlgLnkURL\">URL</span><br />\n       <input id=\"txtUrl\" style=\"WIDTH: 100%%\" type=\"text\" onkeyup=\"OnUrlChange();\" onchange=\"OnUrlChange();\" />\n      </td>\n     </tr>\n    </table>\n    <br />\n   </div>\n  </div>\n </body>\n</html>\n''' % locals())", "line_changes": {"deleted": [{"line_no": 100, "char_start": 3711, "char_end": 3789, "line": "          <input id=\"txtPagename\" name=\"pagename\" size=\"30\" value=\"%(name)s\">\n"}], "added": [{"line_no": 4, "char_start": 97, "char_end": 138, "line": "    name_escaped = wikiutil.escape(name)\n"}, {"line_no": 101, "char_start": 3752, "char_end": 3838, "line": "          <input id=\"txtPagename\" name=\"pagename\" size=\"30\" value=\"%(name_escaped)s\">\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 101, "char_end": 142, "chars": "name_escaped = wikiutil.escape(name)\n    "}, {"char_start": 3825, "char_end": 3833, "chars": "_escaped"}]}, "commit_link": "github.com/moinwiki/moin-1.9/commit/70955a8eae091cc88fd9a6e510177e70289ec024", "file_name": "MoinMoin/action/fckdialog.py", "vul_type": "cwe-079"}
{"func_name": "action_save_user", "func_src_before": "def action_save_user(request: HttpRequest, default_forward_url: str = \"/admin/users\"):\n    \"\"\"\n    This functions saves the changes to the user or adds a new one. It completely creates the HttpResponse\n    :param request: the HttpRequest\n    :param default_forward_url: The URL to forward to if nothing was specified\n    :return: The crafted HttpResponse\n    \"\"\"\n    forward_url = default_forward_url\n    if request.GET.get(\"redirect\"):\n        forward_url = request.GET[\"redirect\"]\n    if not request.user.is_authenticated:\n        return HttpResponseForbidden()\n    profile = Profile.objects.get(authuser=request.user)\n    if profile.rights < 2:\n        return HttpResponseForbidden()\n    try:\n        if request.GET.get(\"user_id\"):\n            pid = int(request.GET[\"user_id\"])\n            displayname = str(request.POST[\"display_name\"])\n            dect = int(request.POST[\"dect\"])\n            notes = str(request.POST[\"notes\"])\n            pw1 = str(request.POST[\"password\"])\n            pw2 = str(request.POST[\"confirm_password\"])\n            mail = str(request.POST[\"email\"])\n            rights = int(request.POST[\"rights\"])\n            user: Profile = Profile.objects.get(pk=pid)\n            user.displayName = displayname\n            user.dect = dect\n            user.notes = notes\n            user.rights = rights\n            user.number_of_allowed_reservations = int(request.POST[\"allowed_reservations\"])\n            if request.POST.get(\"active\"):\n                user.active = magic.parse_bool(request.POST[\"active\"])\n            au: User = user.authuser\n            if check_password_conformity(pw1, pw2):\n                logging.log(logging.INFO, \"Set password for user: \" + user.displayName)\n                au.set_password(pw1)\n            else:\n                logging.log(logging.INFO, \"Failed to set password for: \" + user.displayName)\n            au.email = mail\n            au.save()\n            user.save()\n        else:\n            # assume new user\n            username = str(request.POST[\"username\"])\n            displayname = str(request.POST[\"display_name\"])\n            dect = int(request.POST[\"dect\"])\n            notes = str(request.POST[\"notes\"])\n            pw1 = str(request.POST[\"password\"])\n            pw2 = str(request.POST[\"confirm_password\"])\n            mail = str(request.POST[\"email\"])\n            rights = int(request.POST[\"rights\"])\n            if not check_password_conformity(pw1, pw2):\n                recreate_form('password mismatch')\n            auth_user: User = User.objects.create_user(username=username, email=mail, password=pw1)\n            auth_user.save()\n            user: Profile = Profile()\n            user.rights = rights\n            user.number_of_allowed_reservations = int(request.POST[\"allowed_reservations\"])\n            user.displayName = displayname\n            user.authuser = auth_user\n            user.dect = dect\n            user.notes = notes\n            user.active = True\n            user.save()\n            pass\n        pass\n    except Exception as e:\n        return HttpResponseBadRequest(str(e))\n    return redirect(forward_url)", "func_src_after": "def action_save_user(request: HttpRequest, default_forward_url: str = \"/admin/users\"):\n    \"\"\"\n    This functions saves the changes to the user or adds a new one. It completely creates the HttpResponse\n    :param request: the HttpRequest\n    :param default_forward_url: The URL to forward to if nothing was specified\n    :return: The crafted HttpResponse\n    \"\"\"\n    forward_url = default_forward_url\n    if request.GET.get(\"redirect\"):\n        forward_url = request.GET[\"redirect\"]\n    if not request.user.is_authenticated:\n        return HttpResponseForbidden()\n    profile = Profile.objects.get(authuser=request.user)\n    if profile.rights < 2:\n        return HttpResponseForbidden()\n    try:\n        if request.GET.get(\"user_id\"):\n            pid = int(request.GET[\"user_id\"])\n            displayname = str(request.POST[\"display_name\"])\n            dect = int(request.POST[\"dect\"])\n            notes = str(request.POST[\"notes\"])\n            pw1 = str(request.POST[\"password\"])\n            pw2 = str(request.POST[\"confirm_password\"])\n            mail = str(request.POST[\"email\"])\n            rights = int(request.POST[\"rights\"])\n            user: Profile = Profile.objects.get(pk=pid)\n            user.displayName = escape(displayname)\n            user.dect = dect\n            user.notes = escape(notes)\n            user.rights = rights\n            user.number_of_allowed_reservations = int(request.POST[\"allowed_reservations\"])\n            if request.POST.get(\"active\"):\n                user.active = magic.parse_bool(request.POST[\"active\"])\n            au: User = user.authuser\n            if check_password_conformity(pw1, pw2):\n                logging.log(logging.INFO, \"Set password for user: \" + user.displayName)\n                au.set_password(pw1)\n            else:\n                logging.log(logging.INFO, \"Failed to set password for: \" + user.displayName)\n            au.email = escape(mail)\n            au.save()\n            user.save()\n        else:\n            # assume new user\n            username = str(request.POST[\"username\"])\n            displayname = str(request.POST[\"display_name\"])\n            dect = int(request.POST[\"dect\"])\n            notes = str(request.POST[\"notes\"])\n            pw1 = str(request.POST[\"password\"])\n            pw2 = str(request.POST[\"confirm_password\"])\n            mail = str(request.POST[\"email\"])\n            rights = int(request.POST[\"rights\"])\n            if not check_password_conformity(pw1, pw2):\n                recreate_form('password mismatch')\n            auth_user: User = User.objects.create_user(username=escape(username), email=escape(mail), password=pw1)\n            auth_user.save()\n            user: Profile = Profile()\n            user.rights = rights\n            user.number_of_allowed_reservations = int(request.POST[\"allowed_reservations\"])\n            user.displayName = escape(displayname)\n            user.authuser = auth_user\n            user.dect = dect\n            user.notes = escape(notes)\n            user.active = True\n            user.save()\n            pass\n        pass\n    except Exception as e:\n        return HttpResponseBadRequest(str(e))\n    return redirect(forward_url)", "line_changes": {"deleted": [{"line_no": 27, "char_start": 1188, "char_end": 1231, "line": "            user.displayName = displayname\n"}, {"line_no": 29, "char_start": 1260, "char_end": 1291, "line": "            user.notes = notes\n"}, {"line_no": 40, "char_start": 1855, "char_end": 1883, "line": "            au.email = mail\n"}, {"line_no": 55, "char_start": 2484, "char_end": 2584, "line": "            auth_user: User = User.objects.create_user(username=username, email=mail, password=pw1)\n"}, {"line_no": 60, "char_start": 2776, "char_end": 2819, "line": "            user.displayName = displayname\n"}, {"line_no": 63, "char_start": 2886, "char_end": 2917, "line": "            user.notes = notes\n"}], "added": [{"line_no": 27, "char_start": 1188, "char_end": 1239, "line": "            user.displayName = escape(displayname)\n"}, {"line_no": 29, "char_start": 1268, "char_end": 1307, "line": "            user.notes = escape(notes)\n"}, {"line_no": 40, "char_start": 1871, "char_end": 1907, "line": "            au.email = escape(mail)\n"}, {"line_no": 55, "char_start": 2508, "char_end": 2624, "line": "            auth_user: User = User.objects.create_user(username=escape(username), email=escape(mail), password=pw1)\n"}, {"line_no": 60, "char_start": 2816, "char_end": 2867, "line": "            user.displayName = escape(displayname)\n"}, {"line_no": 63, "char_start": 2934, "char_end": 2973, "line": "            user.notes = escape(notes)\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 1219, "char_end": 1226, "chars": "escape("}, {"char_start": 1237, "char_end": 1238, "chars": ")"}, {"char_start": 1293, "char_end": 1300, "chars": "escape("}, {"char_start": 1305, "char_end": 1306, "chars": ")"}, {"char_start": 1894, "char_end": 1901, "chars": "escape("}, {"char_start": 1905, "char_end": 1906, "chars": ")"}, {"char_start": 2572, "char_end": 2579, "chars": "escape("}, {"char_start": 2587, "char_end": 2588, "chars": ")"}, {"char_start": 2596, "char_end": 2603, "chars": "escape("}, {"char_start": 2607, "char_end": 2608, "chars": ")"}, {"char_start": 2847, "char_end": 2854, "chars": "escape("}, {"char_start": 2865, "char_end": 2866, "chars": ")"}, {"char_start": 2959, "char_end": 2966, "chars": "escape("}, {"char_start": 2971, "char_end": 2972, "chars": ")"}]}, "commit_link": "github.com/Technikradio/C3FOCSite/commit/6e330d4d44bbfdfce9993dffea97008276771600", "file_name": "c3shop/frontpage/management/edit_user.py", "vul_type": "cwe-079"}
{"func_name": "save", "func_src_before": "    def save(self):\n        # copy the user's input from plain text to description to be processed\n        self.description = self.description_plain_text\n        if CE.settings.auto_cross_reference:\n            self.auto_cross_ref()\n        else:\n            self.find_tag()\n        self.slug = slugify(self.title)\n        super().save()", "func_src_after": "    def save(self):\n        # copy the user's input from plain text to description to be processed\n        # uses bleach to remove potentially harmful HTML code\n        self.description = bleach.clean(str(self.description_plain_text),\n                                        tags=CE.settings.bleach_allowed,\n                                        strip=True)\n        if CE.settings.auto_cross_reference:\n            self.auto_cross_ref()\n        else:\n            self.find_tag()\n        self.slug = slugify(self.title)\n        super().save()", "line_changes": {"deleted": [{"line_no": 3, "char_start": 99, "char_end": 154, "line": "        self.description = self.description_plain_text\n"}], "added": [{"line_no": 4, "char_start": 161, "char_end": 235, "line": "        self.description = bleach.clean(str(self.description_plain_text),\n"}, {"line_no": 5, "char_start": 235, "char_end": 308, "line": "                                        tags=CE.settings.bleach_allowed,\n"}, {"line_no": 6, "char_start": 308, "char_end": 360, "line": "                                        strip=True)\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 107, "char_end": 169, "chars": "# uses bleach to remove potentially harmful HTML code\n        "}, {"char_start": 188, "char_end": 205, "chars": "bleach.clean(str("}, {"char_start": 232, "char_end": 359, "chars": "),\n                                        tags=CE.settings.bleach_allowed,\n                                        strip=True)"}]}, "commit_link": "github.com/stevetasticsteve/CLA_Hub/commit/a06d85cd0b0964f8469e5c4bc9a6c132aa0b4c37", "file_name": "CE/models.py", "vul_type": "cwe-079"}
{"func_name": "PropertiesWidget::loadTorrentInfos", "func_src_before": "void PropertiesWidget::loadTorrentInfos(BitTorrent::TorrentHandle *const torrent)\n{\n    clear();\n    m_torrent = torrent;\n    downloaded_pieces->setTorrent(m_torrent);\n    pieces_availability->setTorrent(m_torrent);\n    if (!m_torrent) return;\n\n    // Save path\n    updateSavePath(m_torrent);\n    // Hash\n    hash_lbl->setText(m_torrent->hash());\n    PropListModel->model()->clear();\n    if (m_torrent->hasMetadata()) {\n        // Creation date\n        lbl_creationDate->setText(m_torrent->creationDate().toString(Qt::DefaultLocaleShortDate));\n\n        label_total_size_val->setText(Utils::Misc::friendlyUnit(m_torrent->totalSize()));\n\n        // Comment\n        comment_text->setText(Utils::Misc::parseHtmlLinks(m_torrent->comment()));\n\n        // URL seeds\n        loadUrlSeeds();\n\n        label_created_by_val->setText(m_torrent->creator());\n\n        // List files in torrent\n        PropListModel->model()->setupModelData(m_torrent->info());\n        filesList->setExpanded(PropListModel->index(0, 0), true);\n\n        // Load file priorities\n        PropListModel->model()->updateFilesPriorities(m_torrent->filePriorities());\n    }\n    // Load dynamic data\n    loadDynamicData();\n}", "func_src_after": "void PropertiesWidget::loadTorrentInfos(BitTorrent::TorrentHandle *const torrent)\n{\n    clear();\n    m_torrent = torrent;\n    downloaded_pieces->setTorrent(m_torrent);\n    pieces_availability->setTorrent(m_torrent);\n    if (!m_torrent) return;\n\n    // Save path\n    updateSavePath(m_torrent);\n    // Hash\n    hash_lbl->setText(m_torrent->hash());\n    PropListModel->model()->clear();\n    if (m_torrent->hasMetadata()) {\n        // Creation date\n        lbl_creationDate->setText(m_torrent->creationDate().toString(Qt::DefaultLocaleShortDate));\n\n        label_total_size_val->setText(Utils::Misc::friendlyUnit(m_torrent->totalSize()));\n\n        // Comment\n        comment_text->setText(Utils::Misc::parseHtmlLinks(Utils::String::toHtmlEscaped(m_torrent->comment())));\n\n        // URL seeds\n        loadUrlSeeds();\n\n        label_created_by_val->setText(Utils::String::toHtmlEscaped(m_torrent->creator()));\n\n        // List files in torrent\n        PropListModel->model()->setupModelData(m_torrent->info());\n        filesList->setExpanded(PropListModel->index(0, 0), true);\n\n        // Load file priorities\n        PropListModel->model()->updateFilesPriorities(m_torrent->filePriorities());\n    }\n    // Load dynamic data\n    loadDynamicData();\n}", "line_changes": {"deleted": [{"line_no": 21, "char_start": 655, "char_end": 737, "line": "        comment_text->setText(Utils::Misc::parseHtmlLinks(m_torrent->comment()));\n"}, {"line_no": 26, "char_start": 784, "char_end": 845, "line": "        label_created_by_val->setText(m_torrent->creator());\n"}], "added": [{"line_no": 21, "char_start": 655, "char_end": 767, "line": "        comment_text->setText(Utils::Misc::parseHtmlLinks(Utils::String::toHtmlEscaped(m_torrent->comment())));\n"}, {"line_no": 26, "char_start": 814, "char_end": 905, "line": "        label_created_by_val->setText(Utils::String::toHtmlEscaped(m_torrent->creator()));\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 713, "char_end": 742, "chars": "Utils::String::toHtmlEscaped("}, {"char_start": 761, "char_end": 762, "chars": ")"}, {"char_start": 852, "char_end": 881, "chars": "Utils::String::toHtmlEscaped("}, {"char_start": 900, "char_end": 901, "chars": ")"}]}, "commit_link": "github.com/qbittorrent/qBittorrent/commit/6ca3e4f094da0a0017cb2d483ec1db6176bb0b16", "file_name": "src/gui/properties/propertieswidget.cpp", "vul_type": "cwe-079"}
{"func_name": "mode_close", "func_src_before": "    def mode_close(self, request):\n        \"\"\"\n        This is called by render_POST when the client is signalling\n        that it is about to be closed.\n\n        Args:\n            request (Request): Incoming request.\n\n        \"\"\"\n        csessid = request.args.get('csessid')[0]\n        try:\n            sess = self.sessionhandler.sessions_from_csessid(csessid)[0]\n            sess.sessionhandler.disconnect(sess)\n        except IndexError:\n            self.client_disconnect(csessid)\n        return '\"\"'", "func_src_after": "    def mode_close(self, request):\n        \"\"\"\n        This is called by render_POST when the client is signalling\n        that it is about to be closed.\n\n        Args:\n            request (Request): Incoming request.\n\n        \"\"\"\n        csessid = cgi.escape(request.args['csessid'][0])\n        try:\n            sess = self.sessionhandler.sessions_from_csessid(csessid)[0]\n            sess.sessionhandler.disconnect(sess)\n        except IndexError:\n            self.client_disconnect(csessid)\n        return '\"\"'", "line_changes": {"deleted": [{"line_no": 10, "char_start": 231, "char_end": 280, "line": "        csessid = request.args.get('csessid')[0]\n"}], "added": [{"line_no": 10, "char_start": 231, "char_end": 288, "line": "        csessid = cgi.escape(request.args['csessid'][0])\n"}]}, "char_changes": {"deleted": [{"char_start": 261, "char_end": 266, "chars": ".get("}, {"char_start": 275, "char_end": 276, "chars": ")"}], "added": [{"char_start": 249, "char_end": 260, "chars": "cgi.escape("}, {"char_start": 272, "char_end": 273, "chars": "["}, {"char_start": 282, "char_end": 283, "chars": "]"}, {"char_start": 286, "char_end": 287, "chars": ")"}]}, "commit_link": "github.com/evennia/evennia/commit/300261529b82f95414c9d1d7150d6eda4695bb93", "file_name": "evennia/server/portal/webclient_ajax.py", "vul_type": "cwe-079"}
{"func_name": "get_queryset", "func_src_before": "    def get_queryset(self, **kwargs):\n        queryset = Article.objects.order_by('-time')\n        for i in queryset:\n            i.md = markdown(i.content, extensions=[\n                'markdown.extensions.extra',\n                'markdown.extensions.codehilite',\n                'markdown.extensions.toc',\n            ])\n\n        return queryset", "func_src_after": "    def get_queryset(self, **kwargs):\n        queryset = Article.objects.order_by('-time')\n        for i in queryset:\n            i.md = safe_md(i.content)\n\n        return queryset", "line_changes": {"deleted": [{"line_no": 4, "char_start": 118, "char_end": 170, "line": "            i.md = markdown(i.content, extensions=[\n"}, {"line_no": 5, "char_start": 170, "char_end": 215, "line": "                'markdown.extensions.extra',\n"}, {"line_no": 6, "char_start": 215, "char_end": 265, "line": "                'markdown.extensions.codehilite',\n"}, {"line_no": 7, "char_start": 265, "char_end": 308, "line": "                'markdown.extensions.toc',\n"}, {"line_no": 8, "char_start": 308, "char_end": 323, "line": "            ])\n"}], "added": [{"line_no": 4, "char_start": 118, "char_end": 156, "line": "            i.md = safe_md(i.content)\n"}]}, "char_changes": {"deleted": [{"char_start": 137, "char_end": 162, "chars": "markdown(i.content, exten"}, {"char_start": 163, "char_end": 188, "chars": "ions=[\n                'm"}, {"char_start": 189, "char_end": 196, "chars": "rkdown."}, {"char_start": 197, "char_end": 232, "chars": "xtensions.extra',\n                '"}, {"char_start": 233, "char_end": 236, "chars": "ark"}, {"char_start": 237, "char_end": 247, "chars": "own.extens"}, {"char_start": 248, "char_end": 251, "chars": "ons"}, {"char_start": 254, "char_end": 289, "chars": "dehilite',\n                'markdow"}, {"char_start": 290, "char_end": 293, "chars": ".ex"}, {"char_start": 296, "char_end": 302, "chars": "sions."}, {"char_start": 303, "char_end": 321, "chars": "oc',\n            ]"}], "added": [{"char_start": 139, "char_end": 140, "chars": "f"}, {"char_start": 141, "char_end": 142, "chars": "_"}, {"char_start": 144, "char_end": 145, "chars": "("}]}, "commit_link": "github.com/Cheng-mq1216/production-practice/commit/333dc34f5feada55d1f6ff1255949ca00dec0f9c", "file_name": "app/Index/views.py", "vul_type": "cwe-079"}
{"func_name": "screenshotcommentcounts", "func_src_before": "@register.tag\n@basictag(takes_context=True)\ndef screenshotcommentcounts(context, screenshot):\n    \"\"\"\n    Returns a JSON array of current comments for a screenshot.\n\n    Each entry in the array has a dictionary containing the following keys:\n\n      =========== ==================================================\n      Key         Description\n      =========== ==================================================\n      text        The text of the comment\n      localdraft  True if this is the current user's draft comment\n      x           The X location of the comment's region\n      y           The Y location of the comment's region\n      w           The width of the comment's region\n      h           The height of the comment's region\n      =========== ==================================================\n    \"\"\"\n    comments = {}\n    user = context.get('user', None)\n\n    for comment in screenshot.comments.all():\n        review = get_object_or_none(comment.review)\n\n        if review and (review.public or review.user == user):\n            position = '%dx%d+%d+%d' % (comment.w, comment.h, \\\n                                        comment.x, comment.y)\n\n            comments.setdefault(position, []).append({\n                'id': comment.id,\n                'text': comment.text,\n                'user': {\n                    'username': review.user.username,\n                    'name': review.user.get_full_name() or review.user.username,\n                },\n                'url': comment.get_review_url(),\n                'localdraft' : review.user == user and \\\n                               not review.public,\n                'x' : comment.x,\n                'y' : comment.y,\n                'w' : comment.w,\n                'h' : comment.h,\n            })\n\n    return simplejson.dumps(comments)", "func_src_after": "@register.tag\n@basictag(takes_context=True)\ndef screenshotcommentcounts(context, screenshot):\n    \"\"\"\n    Returns a JSON array of current comments for a screenshot.\n\n    Each entry in the array has a dictionary containing the following keys:\n\n      =========== ==================================================\n      Key         Description\n      =========== ==================================================\n      text        The text of the comment\n      localdraft  True if this is the current user's draft comment\n      x           The X location of the comment's region\n      y           The Y location of the comment's region\n      w           The width of the comment's region\n      h           The height of the comment's region\n      =========== ==================================================\n    \"\"\"\n    comments = {}\n    user = context.get('user', None)\n\n    for comment in screenshot.comments.all():\n        review = get_object_or_none(comment.review)\n\n        if review and (review.public or review.user == user):\n            position = '%dx%d+%d+%d' % (comment.w, comment.h, \\\n                                        comment.x, comment.y)\n\n            comments.setdefault(position, []).append({\n                'id': comment.id,\n                'text': escape(comment.text),\n                'user': {\n                    'username': review.user.username,\n                    'name': review.user.get_full_name() or review.user.username,\n                },\n                'url': comment.get_review_url(),\n                'localdraft' : review.user == user and \\\n                               not review.public,\n                'x' : comment.x,\n                'y' : comment.y,\n                'w' : comment.w,\n                'h' : comment.h,\n            })\n\n    return simplejson.dumps(comments)", "line_changes": {"deleted": [{"line_no": 32, "char_start": 1249, "char_end": 1287, "line": "                'text': comment.text,\n"}], "added": [{"line_no": 32, "char_start": 1249, "char_end": 1295, "line": "                'text': escape(comment.text),\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 1273, "char_end": 1280, "chars": "escape("}, {"char_start": 1292, "char_end": 1293, "chars": ")"}]}, "commit_link": "github.com/reviewboard/reviewboard/commit/7a0a9d94555502278534dedcf2d75e9fccce8c3d", "file_name": "reviewboard/reviews/templatetags/reviewtags.py", "vul_type": "cwe-079"}
{"func_name": "mode_input", "func_src_before": "    def mode_input(self, request):\n        \"\"\"\n        This is called by render_POST when the client\n        is sending data to the server.\n\n        Args:\n            request (Request): Incoming request.\n\n        \"\"\"\n        csessid = request.args.get('csessid')[0]\n\n        self.last_alive[csessid] = (time.time(), False)\n        sess = self.sessionhandler.sessions_from_csessid(csessid)\n        if sess:\n            sess = sess[0]\n            cmdarray = json.loads(request.args.get('data')[0])\n            sess.sessionhandler.data_in(sess, **{cmdarray[0]: [cmdarray[1], cmdarray[2]]})\n        return '\"\"'", "func_src_after": "    def mode_input(self, request):\n        \"\"\"\n        This is called by render_POST when the client\n        is sending data to the server.\n\n        Args:\n            request (Request): Incoming request.\n\n        \"\"\"\n        csessid = cgi.escape(request.args['csessid'][0])\n        self.last_alive[csessid] = (time.time(), False)\n        sess = self.sessionhandler.sessions_from_csessid(csessid)\n        if sess:\n            sess = sess[0]\n            cmdarray = json.loads(cgi.escape(request.args.get('data')[0]))\n            sess.sessionhandler.data_in(sess, **{cmdarray[0]: [cmdarray[1], cmdarray[2]]})\n        return '\"\"'", "line_changes": {"deleted": [{"line_no": 10, "char_start": 217, "char_end": 266, "line": "        csessid = request.args.get('csessid')[0]\n"}, {"line_no": 11, "char_start": 266, "char_end": 267, "line": "\n"}, {"line_no": 16, "char_start": 433, "char_end": 496, "line": "            cmdarray = json.loads(request.args.get('data')[0])\n"}], "added": [{"line_no": 10, "char_start": 217, "char_end": 274, "line": "        csessid = cgi.escape(request.args['csessid'][0])\n"}, {"line_no": 15, "char_start": 440, "char_end": 515, "line": "            cmdarray = json.loads(cgi.escape(request.args.get('data')[0]))\n"}]}, "char_changes": {"deleted": [{"char_start": 247, "char_end": 252, "chars": ".get("}, {"char_start": 261, "char_end": 262, "chars": ")"}, {"char_start": 265, "char_end": 266, "chars": "\n"}], "added": [{"char_start": 235, "char_end": 246, "chars": "cgi.escape("}, {"char_start": 258, "char_end": 259, "chars": "["}, {"char_start": 268, "char_end": 269, "chars": "]"}, {"char_start": 272, "char_end": 273, "chars": ")"}, {"char_start": 474, "char_end": 485, "chars": "cgi.escape("}, {"char_start": 512, "char_end": 513, "chars": ")"}]}, "commit_link": "github.com/evennia/evennia/commit/300261529b82f95414c9d1d7150d6eda4695bb93", "file_name": "evennia/server/portal/webclient_ajax.py", "vul_type": "cwe-079"}
{"func_name": "get_list_context", "func_src_before": "def get_list_context(context=None):\n\tlist_context = frappe._dict(\n\t\ttemplate = \"templates/includes/blog/blog.html\",\n\t\tget_list = get_blog_list,\n\t\thide_filters = True,\n\t\tchildren = get_children(),\n\t\t# show_search = True,\n\t\ttitle = _('Blog')\n\t)\n\n\tcategory = frappe.local.form_dict.blog_category or frappe.local.form_dict.category\n\tif category:\n\t\tcategory_title = get_blog_category(category)\n\t\tlist_context.sub_title = _(\"Posts filed under {0}\").format(category_title)\n\t\tlist_context.title = category_title\n\n\telif frappe.local.form_dict.blogger:\n\t\tblogger = frappe.db.get_value(\"Blogger\", {\"name\": frappe.local.form_dict.blogger}, \"full_name\")\n\t\tlist_context.sub_title = _(\"Posts by {0}\").format(blogger)\n\t\tlist_context.title = blogger\n\n\telif frappe.local.form_dict.txt:\n\t\tlist_context.sub_title = _('Filtered by \"{0}\"').format(frappe.local.form_dict.txt)\n\n\tif list_context.sub_title:\n\t\tlist_context.parents = [{\"name\": _(\"Home\"), \"route\": \"/\"},\n\t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}]\n\telse:\n\t\tlist_context.parents = [{\"name\": _(\"Home\"), \"route\": \"/\"}]\n\n\tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True))\n\treturn list_context", "func_src_after": "def get_list_context(context=None):\n\tlist_context = frappe._dict(\n\t\ttemplate = \"templates/includes/blog/blog.html\",\n\t\tget_list = get_blog_list,\n\t\thide_filters = True,\n\t\tchildren = get_children(),\n\t\t# show_search = True,\n\t\ttitle = _('Blog')\n\t)\n\n\tcategory = sanitize_html(frappe.local.form_dict.blog_category or frappe.local.form_dict.category)\n\tif category:\n\t\tcategory_title = get_blog_category(category)\n\t\tlist_context.sub_title = _(\"Posts filed under {0}\").format(category_title)\n\t\tlist_context.title = category_title\n\n\telif frappe.local.form_dict.blogger:\n\t\tblogger = frappe.db.get_value(\"Blogger\", {\"name\": frappe.local.form_dict.blogger}, \"full_name\")\n\t\tlist_context.sub_title = _(\"Posts by {0}\").format(blogger)\n\t\tlist_context.title = blogger\n\n\telif frappe.local.form_dict.txt:\n\t\tlist_context.sub_title = _('Filtered by \"{0}\"').format(sanitize_html(frappe.local.form_dict.txt))\n\n\tif list_context.sub_title:\n\t\tlist_context.parents = [{\"name\": _(\"Home\"), \"route\": \"/\"},\n\t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}]\n\telse:\n\t\tlist_context.parents = [{\"name\": _(\"Home\"), \"route\": \"/\"}]\n\n\tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True))\n\treturn list_context", "line_changes": {"deleted": [{"line_no": 11, "char_start": 244, "char_end": 328, "line": "\tcategory = frappe.local.form_dict.blog_category or frappe.local.form_dict.category\n"}, {"line_no": 23, "char_start": 768, "char_end": 853, "line": "\t\tlist_context.sub_title = _('Filtered by \"{0}\"').format(frappe.local.form_dict.txt)\n"}], "added": [{"line_no": 11, "char_start": 244, "char_end": 343, "line": "\tcategory = sanitize_html(frappe.local.form_dict.blog_category or frappe.local.form_dict.category)\n"}, {"line_no": 23, "char_start": 783, "char_end": 883, "line": "\t\tlist_context.sub_title = _('Filtered by \"{0}\"').format(sanitize_html(frappe.local.form_dict.txt))\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 256, "char_end": 270, "chars": "sanitize_html("}, {"char_start": 341, "char_end": 342, "chars": ")"}, {"char_start": 840, "char_end": 854, "chars": "sanitize_html("}, {"char_start": 880, "char_end": 881, "chars": ")"}]}, "commit_link": "github.com/omirajkar/bench_frappe/commit/2fa19c25066ed17478d683666895e3266936aee6", "file_name": "frappe/website/doctype/blog_post/blog_post.py", "vul_type": "cwe-079"}
{"func_name": "mode_init", "func_src_before": "    def mode_init(self, request):\n        \"\"\"\n        This is called by render_POST when the client requests an init\n        mode operation (at startup)\n\n        Args:\n            request (Request): Incoming request.\n\n        \"\"\"\n        csessid = request.args.get('csessid')[0]\n\n        remote_addr = request.getClientIP()\n        host_string = \"%s (%s:%s)\" % (_SERVERNAME, request.getRequestHostname(), request.getHost().port)\n\n        sess = AjaxWebClientSession()\n        sess.client = self\n        sess.init_session(\"ajax/comet\", remote_addr, self.sessionhandler)\n\n        sess.csessid = csessid\n        csession = _CLIENT_SESSIONS(session_key=sess.csessid)\n        uid = csession and csession.get(\"webclient_authenticated_uid\", False)\n        if uid:\n            # the client session is already logged in\n            sess.uid = uid\n            sess.logged_in = True\n\n        sess.sessionhandler.connect(sess)\n\n        self.last_alive[csessid] = (time.time(), False)\n        if not self.keep_alive:\n            # the keepalive is not running; start it.\n            self.keep_alive = LoopingCall(self._keepalive)\n            self.keep_alive.start(_KEEPALIVE, now=False)\n\n        return jsonify({'msg': host_string, 'csessid': csessid})", "func_src_after": "    def mode_init(self, request):\n        \"\"\"\n        This is called by render_POST when the client requests an init\n        mode operation (at startup)\n\n        Args:\n            request (Request): Incoming request.\n\n        \"\"\"\n        csessid = cgi.escape(request.args['csessid'][0])\n\n        remote_addr = request.getClientIP()\n        host_string = \"%s (%s:%s)\" % (_SERVERNAME, request.getRequestHostname(), request.getHost().port)\n\n        sess = AjaxWebClientSession()\n        sess.client = self\n        sess.init_session(\"ajax/comet\", remote_addr, self.sessionhandler)\n\n        sess.csessid = csessid\n        csession = _CLIENT_SESSIONS(session_key=sess.csessid)\n        uid = csession and csession.get(\"webclient_authenticated_uid\", False)\n        if uid:\n            # the client session is already logged in\n            sess.uid = uid\n            sess.logged_in = True\n\n        sess.sessionhandler.connect(sess)\n\n        self.last_alive[csessid] = (time.time(), False)\n        if not self.keep_alive:\n            # the keepalive is not running; start it.\n            self.keep_alive = LoopingCall(self._keepalive)\n            self.keep_alive.start(_KEEPALIVE, now=False)\n\n        return jsonify({'msg': host_string, 'csessid': csessid})", "line_changes": {"deleted": [{"line_no": 10, "char_start": 230, "char_end": 279, "line": "        csessid = request.args.get('csessid')[0]\n"}], "added": [{"line_no": 10, "char_start": 230, "char_end": 287, "line": "        csessid = cgi.escape(request.args['csessid'][0])\n"}]}, "char_changes": {"deleted": [{"char_start": 260, "char_end": 265, "chars": ".get("}, {"char_start": 274, "char_end": 275, "chars": ")"}], "added": [{"char_start": 248, "char_end": 259, "chars": "cgi.escape("}, {"char_start": 271, "char_end": 272, "chars": "["}, {"char_start": 281, "char_end": 282, "chars": "]"}, {"char_start": 285, "char_end": 286, "chars": ")"}]}, "commit_link": "github.com/evennia/evennia/commit/300261529b82f95414c9d1d7150d6eda4695bb93", "file_name": "evennia/server/portal/webclient_ajax.py", "vul_type": "cwe-079"}
{"func_name": "handle_file", "func_src_before": "def handle_file(u: Profile, headline: str, category: str, text: str, file):\n    m: Media = Media()\n    upload_base_path: str = 'uploads/' + str(date.today().year)\n    high_res_file_name = upload_base_path + '/HIGHRES_' + ntpath.basename(file.name.replace(\" \", \"_\"))\n    low_res_file_name = upload_base_path + '/LOWRES_' + ntpath.basename(file.name.replace(\" \", \"_\"))\n    if not os.path.exists(PATH_TO_UPLOAD_FOLDER_ON_DISK + upload_base_path):\n        os.makedirs(PATH_TO_UPLOAD_FOLDER_ON_DISK + upload_base_path)\n    with open(high_res_file_name, 'wb+') as destination:\n        for chunk in file.chunks():\n            destination.write(chunk)\n    # TODO crop image\n    original = Image.open(high_res_file_name)\n    width, height = original.size\n    diameter = math.sqrt(math.pow(width, 2) + math.pow(height, 2))\n    width /= diameter\n    height /= diameter\n    width *= IMAGE_SCALE\n    height *= IMAGE_SCALE\n    cropped = original.resize((int(width), int(height)), PIL.Image.LANCZOS)\n    cropped.save(low_res_file_name)\n    m.text = text\n    m.cachedText = compile_markdown(text)\n    m.category = category\n    m.highResFile = \"/\" + high_res_file_name\n    m.lowResFile = \"/\" + low_res_file_name\n    m.headline = headline\n    m.save()\n    mu: MediaUpload = MediaUpload()\n    mu.UID = u\n    mu.MID = m\n    mu.save()\n    logging.info(\"Uploaded file '\" + str(file.name) + \"' and cropped it. The resulting PK is \" + str(m.pk))", "func_src_after": "def handle_file(u: Profile, headline: str, category: str, text: str, file):\n    m: Media = Media()\n    upload_base_path: str = 'uploads/' + str(date.today().year)\n    high_res_file_name = upload_base_path + '/HIGHRES_' + ntpath.basename(file.name.replace(\" \", \"_\"))\n    low_res_file_name = upload_base_path + '/LOWRES_' + ntpath.basename(file.name.replace(\" \", \"_\"))\n    if not os.path.exists(PATH_TO_UPLOAD_FOLDER_ON_DISK + upload_base_path):\n        os.makedirs(PATH_TO_UPLOAD_FOLDER_ON_DISK + upload_base_path)\n    with open(high_res_file_name, 'wb+') as destination:\n        for chunk in file.chunks():\n            destination.write(chunk)\n    # TODO crop image\n    original = Image.open(high_res_file_name)\n    width, height = original.size\n    diameter = math.sqrt(math.pow(width, 2) + math.pow(height, 2))\n    width /= diameter\n    height /= diameter\n    width *= IMAGE_SCALE\n    height *= IMAGE_SCALE\n    cropped = original.resize((int(width), int(height)), PIL.Image.LANCZOS)\n    cropped.save(low_res_file_name)\n    m.text = escape(text)\n    m.cachedText = compile_markdown(escape(text))\n    m.category = escape(category)\n    m.highResFile = \"/\" + high_res_file_name\n    m.lowResFile = \"/\" + low_res_file_name\n    m.headline = escape(headline)\n    m.save()\n    mu: MediaUpload = MediaUpload()\n    mu.UID = u\n    mu.MID = m\n    mu.save()\n    logging.info(\"Uploaded file '\" + str(file.name) + \"' and cropped it. The resulting PK is \" + str(m.pk))", "line_changes": {"deleted": [{"line_no": 21, "char_start": 1021, "char_end": 1039, "line": "    m.text = text\n"}, {"line_no": 22, "char_start": 1039, "char_end": 1081, "line": "    m.cachedText = compile_markdown(text)\n"}, {"line_no": 23, "char_start": 1081, "char_end": 1107, "line": "    m.category = category\n"}, {"line_no": 26, "char_start": 1195, "char_end": 1221, "line": "    m.headline = headline\n"}], "added": [{"line_no": 21, "char_start": 1021, "char_end": 1047, "line": "    m.text = escape(text)\n"}, {"line_no": 22, "char_start": 1047, "char_end": 1097, "line": "    m.cachedText = compile_markdown(escape(text))\n"}, {"line_no": 23, "char_start": 1097, "char_end": 1131, "line": "    m.category = escape(category)\n"}, {"line_no": 26, "char_start": 1219, "char_end": 1253, "line": "    m.headline = escape(headline)\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 1034, "char_end": 1041, "chars": "escape("}, {"char_start": 1045, "char_end": 1046, "chars": ")"}, {"char_start": 1083, "char_end": 1090, "chars": "escape("}, {"char_start": 1094, "char_end": 1095, "chars": ")"}, {"char_start": 1114, "char_end": 1121, "chars": "escape("}, {"char_start": 1129, "char_end": 1130, "chars": ")"}, {"char_start": 1236, "char_end": 1243, "chars": "escape("}, {"char_start": 1251, "char_end": 1252, "chars": ")"}]}, "commit_link": "github.com/Technikradio/C3FOCSite/commit/6e330d4d44bbfdfce9993dffea97008276771600", "file_name": "c3shop/frontpage/management/mediatools/media_actions.py", "vul_type": "cwe-079"}
{"func_name": "commentcounts", "func_src_before": "@register.tag\n@basictag(takes_context=True)\ndef commentcounts(context, filediff, interfilediff=None):\n    \"\"\"\n    Returns a JSON array of current comments for a filediff, sorted by\n    line number.\n\n    Each entry in the array has a dictionary containing the following keys:\n\n      =========== ==================================================\n      Key         Description\n      =========== ==================================================\n      comment_id  The ID of the comment\n      text        The text of the comment\n      line        The first line number\n      num_lines   The number of lines this comment spans\n      user        A dictionary containing \"username\" and \"name\" keys\n                  for the user\n      url         The URL to the comment\n      localdraft  True if this is the current user's draft comment\n      =========== ==================================================\n    \"\"\"\n    comment_dict = {}\n    user = context.get('user', None)\n\n    if interfilediff:\n        query = Comment.objects.filter(filediff=filediff,\n                                       interfilediff=interfilediff)\n    else:\n        query = Comment.objects.filter(filediff=filediff,\n                                       interfilediff__isnull=True)\n\n    for comment in query:\n        review = get_object_or_none(comment.review)\n\n        if review and (review.public or review.user == user):\n            key = (comment.first_line, comment.num_lines)\n\n            comment_dict.setdefault(key, []).append({\n                'comment_id': comment.id,\n                'text': comment.text,\n                'line': comment.first_line,\n                'num_lines': comment.num_lines,\n                'user': {\n                    'username': review.user.username,\n                    'name': review.user.get_full_name() or review.user.username,\n                },\n                #'timestamp': comment.timestamp,\n                'url': comment.get_review_url(),\n                'localdraft': review.user == user and \\\n                              not review.public,\n            })\n\n    comments_array = []\n\n    for key, value in comment_dict.iteritems():\n        comments_array.append({\n            'linenum': key[0],\n            'num_lines': key[1],\n            'comments': value,\n        })\n\n    comments_array.sort(cmp=lambda x, y: cmp(x['linenum'], y['linenum'] or\n                                         cmp(x['num_lines'], y['num_lines'])))\n\n    return simplejson.dumps(comments_array)", "func_src_after": "@register.tag\n@basictag(takes_context=True)\ndef commentcounts(context, filediff, interfilediff=None):\n    \"\"\"\n    Returns a JSON array of current comments for a filediff, sorted by\n    line number.\n\n    Each entry in the array has a dictionary containing the following keys:\n\n      =========== ==================================================\n      Key         Description\n      =========== ==================================================\n      comment_id  The ID of the comment\n      text        The text of the comment\n      line        The first line number\n      num_lines   The number of lines this comment spans\n      user        A dictionary containing \"username\" and \"name\" keys\n                  for the user\n      url         The URL to the comment\n      localdraft  True if this is the current user's draft comment\n      =========== ==================================================\n    \"\"\"\n    comment_dict = {}\n    user = context.get('user', None)\n\n    if interfilediff:\n        query = Comment.objects.filter(filediff=filediff,\n                                       interfilediff=interfilediff)\n    else:\n        query = Comment.objects.filter(filediff=filediff,\n                                       interfilediff__isnull=True)\n\n    for comment in query:\n        review = get_object_or_none(comment.review)\n\n        if review and (review.public or review.user == user):\n            key = (comment.first_line, comment.num_lines)\n\n            comment_dict.setdefault(key, []).append({\n                'comment_id': comment.id,\n                'text': escape(comment.text),\n                'line': comment.first_line,\n                'num_lines': comment.num_lines,\n                'user': {\n                    'username': review.user.username,\n                    'name': review.user.get_full_name() or review.user.username,\n                },\n                #'timestamp': comment.timestamp,\n                'url': comment.get_review_url(),\n                'localdraft': review.user == user and \\\n                              not review.public,\n            })\n\n    comments_array = []\n\n    for key, value in comment_dict.iteritems():\n        comments_array.append({\n            'linenum': key[0],\n            'num_lines': key[1],\n            'comments': value,\n        })\n\n    comments_array.sort(cmp=lambda x, y: cmp(x['linenum'], y['linenum'] or\n                                         cmp(x['num_lines'], y['num_lines'])))\n\n    return simplejson.dumps(comments_array)", "line_changes": {"deleted": [{"line_no": 41, "char_start": 1548, "char_end": 1586, "line": "                'text': comment.text,\n"}], "added": [{"line_no": 41, "char_start": 1548, "char_end": 1594, "line": "                'text': escape(comment.text),\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 1572, "char_end": 1579, "chars": "escape("}, {"char_start": 1591, "char_end": 1592, "chars": ")"}]}, "commit_link": "github.com/reviewboard/reviewboard/commit/7a0a9d94555502278534dedcf2d75e9fccce8c3d", "file_name": "reviewboard/reviews/templatetags/reviewtags.py", "vul_type": "cwe-079"}
{"func_name": "oidc_handle_session_management_iframe_rp", "func_src_before": "static int oidc_handle_session_management_iframe_rp(request_rec *r, oidc_cfg *c,\n\t\toidc_session_t *session, const char *client_id,\n\t\tconst char *check_session_iframe) {\n\n\toidc_debug(r, \"enter\");\n\n\tconst char *java_script =\n\t\t\t\"    <script type=\\\"text/javascript\\\">\\n\"\n\t\t\t\"      var targetOrigin  = '%s';\\n\"\n\t\t\t\"      var message = '%s' + ' ' + '%s';\\n\"\n\t\t\t\"\t   var timerID;\\n\"\n\t\t\t\"\\n\"\n\t\t\t\"      function checkSession() {\\n\"\n\t\t\t\"        console.debug('checkSession: posting ' + message + ' to ' + targetOrigin);\\n\"\n\t\t\t\"        var win = window.parent.document.getElementById('%s').contentWindow;\\n\"\n\t\t\t\"        win.postMessage( message, targetOrigin);\\n\"\n\t\t\t\"      }\\n\"\n\t\t\t\"\\n\"\n\t\t\t\"      function setTimer() {\\n\"\n\t\t\t\"        checkSession();\\n\"\n\t\t\t\"        timerID = setInterval('checkSession()', %s);\\n\"\n\t\t\t\"      }\\n\"\n\t\t\t\"\\n\"\n\t\t\t\"      function receiveMessage(e) {\\n\"\n\t\t\t\"        console.debug('receiveMessage: ' + e.data + ' from ' + e.origin);\\n\"\n\t\t\t\"        if (e.origin !== targetOrigin ) {\\n\"\n\t\t\t\"          console.debug('receiveMessage: cross-site scripting attack?');\\n\"\n\t\t\t\"          return;\\n\"\n\t\t\t\"        }\\n\"\n\t\t\t\"        if (e.data != 'unchanged') {\\n\"\n\t\t\t\"          clearInterval(timerID);\\n\"\n\t\t\t\"          if (e.data == 'changed') {\\n\"\n\t\t\t\"\t\t     window.location.href = '%s?session=check';\\n\"\n\t\t\t\"          } else {\\n\"\n\t\t\t\"\t\t     window.location.href = '%s?session=logout';\\n\"\n\t\t\t\"          }\\n\"\n\t\t\t\"        }\\n\"\n\t\t\t\"      }\\n\"\n\t\t\t\"\\n\"\n\t\t\t\"      window.addEventListener('message', receiveMessage, false);\\n\"\n\t\t\t\"\\n\"\n\t\t\t\"    </script>\\n\";\n\n\t/* determine the origin for the check_session_iframe endpoint */\n\tchar *origin = apr_pstrdup(r->pool, check_session_iframe);\n\tapr_uri_t uri;\n\tapr_uri_parse(r->pool, check_session_iframe, &uri);\n\tchar *p = strstr(origin, uri.path);\n\t*p = '\\0';\n\n\t/* the element identifier for the OP iframe */\n\tconst char *op_iframe_id = \"openidc-op\";\n\n\t/* restore the OP session_state from the session */\n\tconst char *session_state = oidc_session_get_session_state(r, session);\n\tif (session_state == NULL) {\n\t\toidc_warn(r,\n\t\t\t\t\"no session_state found in the session; the OP does probably not support session management!?\");\n\t\treturn DONE;\n\t}\n\n\tchar *s_poll_interval = NULL;\n\toidc_util_get_request_parameter(r, \"poll\", &s_poll_interval);\n\tif (s_poll_interval == NULL)\n\t\ts_poll_interval = \"3000\";\n\n\tconst char *redirect_uri = oidc_get_redirect_uri(r, c);\n\tjava_script = apr_psprintf(r->pool, java_script, origin, client_id,\n\t\t\tsession_state, op_iframe_id, s_poll_interval, redirect_uri,\n\t\t\tredirect_uri);\n\n\treturn oidc_util_html_send(r, NULL, java_script, \"setTimer\", NULL, DONE);\n}", "func_src_after": "static int oidc_handle_session_management_iframe_rp(request_rec *r, oidc_cfg *c,\n\t\toidc_session_t *session, const char *client_id,\n\t\tconst char *check_session_iframe) {\n\n\toidc_debug(r, \"enter\");\n\n\tconst char *java_script =\n\t\t\t\"    <script type=\\\"text/javascript\\\">\\n\"\n\t\t\t\"      var targetOrigin  = '%s';\\n\"\n\t\t\t\"      var message = '%s' + ' ' + '%s';\\n\"\n\t\t\t\"\t   var timerID;\\n\"\n\t\t\t\"\\n\"\n\t\t\t\"      function checkSession() {\\n\"\n\t\t\t\"        console.debug('checkSession: posting ' + message + ' to ' + targetOrigin);\\n\"\n\t\t\t\"        var win = window.parent.document.getElementById('%s').contentWindow;\\n\"\n\t\t\t\"        win.postMessage( message, targetOrigin);\\n\"\n\t\t\t\"      }\\n\"\n\t\t\t\"\\n\"\n\t\t\t\"      function setTimer() {\\n\"\n\t\t\t\"        checkSession();\\n\"\n\t\t\t\"        timerID = setInterval('checkSession()', %d);\\n\"\n\t\t\t\"      }\\n\"\n\t\t\t\"\\n\"\n\t\t\t\"      function receiveMessage(e) {\\n\"\n\t\t\t\"        console.debug('receiveMessage: ' + e.data + ' from ' + e.origin);\\n\"\n\t\t\t\"        if (e.origin !== targetOrigin ) {\\n\"\n\t\t\t\"          console.debug('receiveMessage: cross-site scripting attack?');\\n\"\n\t\t\t\"          return;\\n\"\n\t\t\t\"        }\\n\"\n\t\t\t\"        if (e.data != 'unchanged') {\\n\"\n\t\t\t\"          clearInterval(timerID);\\n\"\n\t\t\t\"          if (e.data == 'changed') {\\n\"\n\t\t\t\"\t\t     window.location.href = '%s?session=check';\\n\"\n\t\t\t\"          } else {\\n\"\n\t\t\t\"\t\t     window.location.href = '%s?session=logout';\\n\"\n\t\t\t\"          }\\n\"\n\t\t\t\"        }\\n\"\n\t\t\t\"      }\\n\"\n\t\t\t\"\\n\"\n\t\t\t\"      window.addEventListener('message', receiveMessage, false);\\n\"\n\t\t\t\"\\n\"\n\t\t\t\"    </script>\\n\";\n\n\t/* determine the origin for the check_session_iframe endpoint */\n\tchar *origin = apr_pstrdup(r->pool, check_session_iframe);\n\tapr_uri_t uri;\n\tapr_uri_parse(r->pool, check_session_iframe, &uri);\n\tchar *p = strstr(origin, uri.path);\n\t*p = '\\0';\n\n\t/* the element identifier for the OP iframe */\n\tconst char *op_iframe_id = \"openidc-op\";\n\n\t/* restore the OP session_state from the session */\n\tconst char *session_state = oidc_session_get_session_state(r, session);\n\tif (session_state == NULL) {\n\t\toidc_warn(r,\n\t\t\t\t\"no session_state found in the session; the OP does probably not support session management!?\");\n\t\treturn DONE;\n\t}\n\n\tchar *s_poll_interval = NULL;\n\toidc_util_get_request_parameter(r, \"poll\", &s_poll_interval);\n\tint poll_interval = s_poll_interval ? strtol(s_poll_interval, NULL, 10) : 0;\n\tif ((poll_interval <= 0) || (poll_interval > 3600 * 24))\n\t\tpoll_interval = 3000;\n\n\tconst char *redirect_uri = oidc_get_redirect_uri(r, c);\n\tjava_script = apr_psprintf(r->pool, java_script, origin, client_id,\n\t\t\tsession_state, op_iframe_id, poll_interval, redirect_uri,\n\t\t\tredirect_uri);\n\n\treturn oidc_util_html_send(r, NULL, java_script, \"setTimer\", NULL, DONE);\n}", "line_changes": {"deleted": [{"line_no": 21, "char_start": 743, "char_end": 803, "line": "\t\t\t\"        timerID = setInterval('checkSession()', %s);\\n\"\n"}, {"line_no": 64, "char_start": 2273, "char_end": 2303, "line": "\tif (s_poll_interval == NULL)\n"}, {"line_no": 65, "char_start": 2303, "char_end": 2331, "line": "\t\ts_poll_interval = \"3000\";\n"}, {"line_no": 69, "char_start": 2458, "char_end": 2521, "line": "\t\t\tsession_state, op_iframe_id, s_poll_interval, redirect_uri,\n"}], "added": [{"line_no": 21, "char_start": 743, "char_end": 803, "line": "\t\t\t\"        timerID = setInterval('checkSession()', %d);\\n\"\n"}, {"line_no": 64, "char_start": 2273, "char_end": 2351, "line": "\tint poll_interval = s_poll_interval ? strtol(s_poll_interval, NULL, 10) : 0;\n"}, {"line_no": 65, "char_start": 2351, "char_end": 2409, "line": "\tif ((poll_interval <= 0) || (poll_interval > 3600 * 24))\n"}, {"line_no": 66, "char_start": 2409, "char_end": 2433, "line": "\t\tpoll_interval = 3000;\n"}, {"line_no": 70, "char_start": 2560, "char_end": 2621, "line": "\t\t\tsession_state, op_iframe_id, poll_interval, redirect_uri,\n"}]}, "char_changes": {"deleted": [{"char_start": 796, "char_end": 797, "chars": "s"}, {"char_start": 2275, "char_end": 2276, "chars": "f"}, {"char_start": 2293, "char_end": 2296, "chars": " =="}, {"char_start": 2304, "char_end": 2306, "chars": "\ts"}, {"char_start": 2323, "char_end": 2324, "chars": "\""}, {"char_start": 2328, "char_end": 2329, "chars": "\""}, {"char_start": 2490, "char_end": 2492, "chars": "s_"}], "added": [{"char_start": 796, "char_end": 797, "chars": "d"}, {"char_start": 2275, "char_end": 2291, "chars": "nt poll_interval"}, {"char_start": 2292, "char_end": 2294, "chars": "= "}, {"char_start": 2310, "char_end": 2335, "chars": "? strtol(s_poll_interval,"}, {"char_start": 2340, "char_end": 2344, "chars": ", 10"}, {"char_start": 2345, "char_end": 2350, "chars": " : 0;"}, {"char_start": 2352, "char_end": 2361, "chars": "if ((poll"}, {"char_start": 2362, "char_end": 2411, "chars": "interval <= 0) || (poll_interval > 3600 * 24))\n\t\t"}]}, "commit_link": "github.com/zmartzone/mod_auth_openidc/commit/132a4111bf3791e76437619a66336dce2ce4c79b", "file_name": "src/mod_auth_openidc.c", "vul_type": "cwe-079"}
{"func_name": "Logger::addMessage", "func_src_before": "void Logger::addMessage(const QString &message, const Log::MsgType &type)\n{\n    QWriteLocker locker(&lock);\n\n    Log::Msg temp = { msgCounter++, QDateTime::currentMSecsSinceEpoch(), type, message };\n    m_messages.push_back(temp);\n\n    if (m_messages.size() >= MAX_LOG_MESSAGES)\n        m_messages.pop_front();\n\n    emit newLogMessage(temp);\n}", "func_src_after": "void Logger::addMessage(const QString &message, const Log::MsgType &type)\n{\n    QWriteLocker locker(&lock);\n\n    Log::Msg temp = { msgCounter++, QDateTime::currentMSecsSinceEpoch(), type, Utils::String::toHtmlEscaped(message) };\n    m_messages.push_back(temp);\n\n    if (m_messages.size() >= MAX_LOG_MESSAGES)\n        m_messages.pop_front();\n\n    emit newLogMessage(temp);\n}", "line_changes": {"deleted": [{"line_no": 5, "char_start": 109, "char_end": 199, "line": "    Log::Msg temp = { msgCounter++, QDateTime::currentMSecsSinceEpoch(), type, message };\n"}], "added": [{"line_no": 5, "char_start": 109, "char_end": 229, "line": "    Log::Msg temp = { msgCounter++, QDateTime::currentMSecsSinceEpoch(), type, Utils::String::toHtmlEscaped(message) };\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 188, "char_end": 217, "chars": "Utils::String::toHtmlEscaped("}, {"char_start": 224, "char_end": 225, "chars": ")"}]}, "commit_link": "github.com/qbittorrent/qBittorrent/commit/6ca3e4f094da0a0017cb2d483ec1db6176bb0b16", "file_name": "src/base/logger.cpp", "vul_type": "cwe-079"}
{"func_name": "get", "func_src_before": "  @handler.unsupported_on_local_server\n  @handler.get(handler.HTML)\n  def get(self):\n    \"\"\"Handle a get request.\"\"\"\n    self.render(\n        'login.html', {\n            'apiKey': local_config.ProjectConfig().get('firebase.api_key'),\n            'authDomain': auth.auth_domain(),\n            'dest': self.request.get('dest'),\n        })", "func_src_after": "  @handler.unsupported_on_local_server\n  @handler.get(handler.HTML)\n  def get(self):\n    \"\"\"Handle a get request.\"\"\"\n    dest = self.request.get('dest')\n    base_handler.check_redirect_url(dest)\n\n    self.render(\n        'login.html', {\n            'apiKey': local_config.ProjectConfig().get('firebase.api_key'),\n            'authDomain': auth.auth_domain(),\n            'dest': dest,\n        })", "line_changes": {"deleted": [{"line_no": 9, "char_start": 280, "char_end": 326, "line": "            'dest': self.request.get('dest'),\n"}], "added": [{"line_no": 5, "char_start": 117, "char_end": 153, "line": "    dest = self.request.get('dest')\n"}, {"line_no": 6, "char_start": 153, "char_end": 195, "line": "    base_handler.check_redirect_url(dest)\n"}, {"line_no": 7, "char_start": 195, "char_end": 196, "line": "\n"}, {"line_no": 12, "char_start": 359, "char_end": 385, "line": "            'dest': dest,\n"}]}, "char_changes": {"deleted": [{"char_start": 300, "char_end": 318, "chars": "self.request.get('"}, {"char_start": 322, "char_end": 324, "chars": "')"}], "added": [{"char_start": 121, "char_end": 200, "chars": "dest = self.request.get('dest')\n    base_handler.check_redirect_url(dest)\n\n    "}]}, "commit_link": "github.com/google/clusterfuzz/commit/3d66c1146550eecd4e34d47332a8616b435a21fe", "file_name": "src/appengine/handlers/login.py", "vul_type": "cwe-079"}
{"func_name": "manipulate_reservation_action", "func_src_before": "def manipulate_reservation_action(request: HttpRequest, default_foreward_url: str):\n    \"\"\"\n    This function is used to alter the reservation beeing build inside\n    a cookie. This function automatically crafts the required response.\n    \"\"\"\n    js_string: str = \"\"\n    r: GroupReservation = None\n    u: Profile = get_current_user(request)\n    forward_url: str = default_foreward_url\n    if request.GET.get(\"redirect\"):\n        forward_url = request.GET[\"redirect\"]\n    if \"srid\" in request.GET:\n        if not request.GET.get(\"rid\"):\n            return HttpResponseRedirect(\"/admin?error=missing%20primary%20reservation%20id\")\n        srid: int = int(request.GET[\"srid\"])\n        sr: SubReservation = None\n        if srid == 0:\n            sr = SubReservation()\n        else:\n            sr = SubReservation.objects.get(id=srid)\n        if request.POST.get(\"notes\"):\n            sr.notes = request.POST[\"notes\"]\n        else:\n            sr.notes = \" \"\n        sr.primary_reservation = GroupReservation.objects.get(id=int(request.GET[\"rid\"]))\n        sr.save()\n        print(request.POST)\n        print(sr.notes)\n        return HttpResponseRedirect(\"/admin/reservations/edit?rid=\" + str(int(request.GET[\"rid\"])) + \"&srid=\" + str(sr.id))\n    if \"rid\" in request.GET:\n        # update reservation\n        r = GroupReservation.objects.get(id=int(request.GET[\"rid\"]))\n    elif u.number_of_allowed_reservations > GroupReservation.objects.all().filter(createdByUser=u).count():\n        r = GroupReservation()\n        r.createdByUser = u\n        r.ready = False\n        r.open = True\n        r.pickupDate = datetime.datetime.now()\n    else:\n        return HttpResponseRedirect(\"/admin?error=Too%20Many%20reservations\")\n    if request.POST.get(\"notes\"):\n        r.notes = request.POST[\"notes\"]\n    if request.POST.get(\"contact\"):\n        r.responsiblePerson = str(request.POST[\"contact\"])\n    if (r.createdByUser == u or o.rights > 1) and not r.submitted:\n        r.save()\n    else:\n        return HttpResponseRedirect(\"/admin?error=noyb\")\n    response: HttpResponseRedirect = HttpResponseRedirect(forward_url + \"?rid=\" + str(r.id))\n    return response", "func_src_after": "def manipulate_reservation_action(request: HttpRequest, default_foreward_url: str):\n    \"\"\"\n    This function is used to alter the reservation beeing build inside\n    a cookie. This function automatically crafts the required response.\n    \"\"\"\n    js_string: str = \"\"\n    r: GroupReservation = None\n    u: Profile = get_current_user(request)\n    forward_url: str = default_foreward_url\n    if request.GET.get(\"redirect\"):\n        forward_url = request.GET[\"redirect\"]\n    if \"srid\" in request.GET:\n        if not request.GET.get(\"rid\"):\n            return HttpResponseRedirect(\"/admin?error=missing%20primary%20reservation%20id\")\n        srid: int = int(request.GET[\"srid\"])\n        sr: SubReservation = None\n        if srid == 0:\n            sr = SubReservation()\n        else:\n            sr = SubReservation.objects.get(id=srid)\n        if request.POST.get(\"notes\"):\n            sr.notes = escape(request.POST[\"notes\"])\n        else:\n            sr.notes = \" \"\n        sr.primary_reservation = GroupReservation.objects.get(id=int(request.GET[\"rid\"]))\n        sr.save()\n        print(request.POST)\n        print(sr.notes)\n        return HttpResponseRedirect(\"/admin/reservations/edit?rid=\" + str(int(request.GET[\"rid\"])) + \"&srid=\" + str(sr.id))\n    if \"rid\" in request.GET:\n        # update reservation\n        r = GroupReservation.objects.get(id=int(request.GET[\"rid\"]))\n    elif u.number_of_allowed_reservations > GroupReservation.objects.all().filter(createdByUser=u).count():\n        r = GroupReservation()\n        r.createdByUser = u\n        r.ready = False\n        r.open = True\n        r.pickupDate = datetime.datetime.now()\n    else:\n        return HttpResponseRedirect(\"/admin?error=Too%20Many%20reservations\")\n    if request.POST.get(\"notes\"):\n        r.notes = escape(request.POST[\"notes\"])\n    if request.POST.get(\"contact\"):\n        r.responsiblePerson = escape(str(request.POST[\"contact\"]))\n    if (r.createdByUser == u or o.rights > 1) and not r.submitted:\n        r.save()\n    else:\n        return HttpResponseRedirect(\"/admin?error=noyb\")\n    response: HttpResponseRedirect = HttpResponseRedirect(forward_url + \"?rid=\" + str(r.id))\n    return response", "line_changes": {"deleted": [{"line_no": 22, "char_start": 869, "char_end": 914, "line": "            sr.notes = request.POST[\"notes\"]\n"}, {"line_no": 42, "char_start": 1748, "char_end": 1788, "line": "        r.notes = request.POST[\"notes\"]\n"}, {"line_no": 44, "char_start": 1824, "char_end": 1883, "line": "        r.responsiblePerson = str(request.POST[\"contact\"])\n"}], "added": [{"line_no": 22, "char_start": 869, "char_end": 922, "line": "            sr.notes = escape(request.POST[\"notes\"])\n"}, {"line_no": 42, "char_start": 1756, "char_end": 1804, "line": "        r.notes = escape(request.POST[\"notes\"])\n"}, {"line_no": 44, "char_start": 1840, "char_end": 1907, "line": "        r.responsiblePerson = escape(str(request.POST[\"contact\"]))\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 892, "char_end": 899, "chars": "escape("}, {"char_start": 920, "char_end": 921, "chars": ")"}, {"char_start": 1774, "char_end": 1781, "chars": "escape("}, {"char_start": 1802, "char_end": 1803, "chars": ")"}, {"char_start": 1870, "char_end": 1877, "chars": "escape("}, {"char_start": 1904, "char_end": 1905, "chars": ")"}]}, "commit_link": "github.com/Technikradio/C3FOCSite/commit/6e330d4d44bbfdfce9993dffea97008276771600", "file_name": "c3shop/frontpage/management/reservation_actions.py", "vul_type": "cwe-079"}
{"func_name": "html_content", "func_src_before": "    @property\n    async def html_content(self):\n        content = await self.content\n        if not content:\n            return ''\n        return markdown(content)", "func_src_after": "    @property\n    async def html_content(self):\n        content = markupsafe.escape(await self.content)\n        if not content:\n            return ''\n        return markdown(content)", "line_changes": {"deleted": [{"line_no": 3, "char_start": 48, "char_end": 85, "line": "        content = await self.content\n"}], "added": [{"line_no": 3, "char_start": 48, "char_end": 104, "line": "        content = markupsafe.escape(await self.content)\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 66, "char_end": 84, "chars": "markupsafe.escape("}, {"char_start": 102, "char_end": 103, "chars": ")"}]}, "commit_link": "github.com/dongweiming/lyanna/commit/fcefac79e4b7601e81a3b3fe0ad26ab18ee95d7d", "file_name": "models/comment.py", "vul_type": "cwe-079"}
{"func_name": "get_context_data", "func_src_before": "    def get_context_data(self, *args, **kwargs):\n        data = super().get_context_data(*args, **kwargs)\n\n        if self.request.GET.get('back', None) is not None:\n            data['back_link'] = self.request.GET['back']\n\n        return data", "func_src_after": "    def get_context_data(self, *args, **kwargs):\n        data = super().get_context_data(*args, **kwargs)\n\n        back = self.request.GET.get('back', None)\n        parsed_back_url = urllib.parse.urlparse(back)\n\n        # We only allow blank scheme, e.g. relative urls to avoid reflected XSS\n        if back is not None and parsed_back_url.scheme == \"\":\n            data['back_link'] = back\n\n        return data", "line_changes": {"deleted": [{"line_no": 4, "char_start": 107, "char_end": 166, "line": "        if self.request.GET.get('back', None) is not None:\n"}, {"line_no": 5, "char_start": 166, "char_end": 223, "line": "            data['back_link'] = self.request.GET['back']\n"}], "added": [{"line_no": 4, "char_start": 107, "char_end": 157, "line": "        back = self.request.GET.get('back', None)\n"}, {"line_no": 5, "char_start": 157, "char_end": 211, "line": "        parsed_back_url = urllib.parse.urlparse(back)\n"}, {"line_no": 6, "char_start": 211, "char_end": 212, "line": "\n"}, {"line_no": 8, "char_start": 292, "char_end": 354, "line": "        if back is not None and parsed_back_url.scheme == \"\":\n"}, {"line_no": 9, "char_start": 354, "char_end": 391, "line": "            data['back_link'] = back\n"}]}, "char_changes": {"deleted": [{"char_start": 115, "char_end": 117, "chars": "if"}, {"char_start": 198, "char_end": 216, "chars": "self.request.GET['"}, {"char_start": 220, "char_end": 222, "chars": "']"}], "added": [{"char_start": 115, "char_end": 121, "chars": "back ="}, {"char_start": 156, "char_end": 307, "chars": "\n        parsed_back_url = urllib.parse.urlparse(back)\n\n        # We only allow blank scheme, e.g. relative urls to avoid reflected XSS\n        if back"}, {"char_start": 319, "char_end": 352, "chars": " and parsed_back_url.scheme == \"\""}]}, "commit_link": "github.com/pirati-web/socialnisystem.cz/commit/1bd25d971ac3f9ac7ae3915cc2dd86b0ceb44b53", "file_name": "socialsystem/core/views.py", "vul_type": "cwe-079"}
{"func_name": "add_article_action", "func_src_before": "def add_article_action(request: HttpRequest, default_foreward_url: str):\n    forward_url: str = default_foreward_url\n    if request.GET.get(\"redirect\"):\n        forward_url = request.GET[\"redirect\"]\n    else:\n        forward_url = \"/admin\"\n    if \"rid\" not in request.GET:\n        return HttpResponseRedirect(\"/admin?error=Missing%20reservation%20id%20in%20request\")\n    u: Profile = get_current_user(request)\n    current_reservation = GroupReservation.objects.get(id=str(request.GET[\"rid\"]))\n    if current_reservation.createdByUser != u and u.rights < 2:\n        return HttpResponseRedirect(\"/admin?error=noyb\")\n    if current_reservation.submitted == True:\n        return HttpResponseRedirect(\"/admin?error=Already%20submitted\")\n    # Test for multiple or single article\n    if \"article_id\" in request.POST:\n        # Actual adding of article\n        aid: int = int(request.GET.get(\"article_id\"))\n        quantity: int = int(request.POST[\"quantity\"])\n        notes: str = request.POST[\"notes\"]\n        ar = ArticleRequested()\n        ar.AID = Article.objects.get(id=aid)\n        ar.RID = current_reservation\n        if \"srid\" in request.GET:\n            ar.SRID = SubReservation.objects.get(id=int(request.GET[\"srid\"]))\n        ar.amount = quantity\n        ar.notes = notes\n        ar.save()\n    # Actual adding of multiple articles\n    else:\n        if \"group_id\" not in request.GET:\n            return HttpResponseRedirect(\"/admin?error=missing%20group%20id\")\n        g: ArticleGroup = ArticleGroup.objects.get(id=int(request.GET[\"group_id\"]))\n        for art in Article.objects.all().filter(group=g):\n            if str(\"quantity_\" + str(art.id)) not in request.POST or str(\"notes_\" + str(art.id)) not in request.POST:\n                return HttpResponseRedirect(\"/admin?error=Missing%20article%20data%20in%20request\")\n            amount = int(request.POST[\"quantity_\" + str(art.id)])\n            if amount > 0:\n                ar = ArticleRequested()\n                ar.AID = art\n                ar.RID = current_reservation\n                ar.amount = amount\n                if \"srid\" in request.GET:\n                    ar.SRID = SubReservation.objects.get(id=int(request.GET[\"srid\"]))\n                ar.notes = str(request.POST[str(\"notes_\" + str(art.id))])\n                ar.save()\n    if \"srid\" in request.GET:\n        response = HttpResponseRedirect(forward_url + \"?rid=\" + str(current_reservation.id) + \"&srid=\" + request.GET[\"srid\"])\n    else:\n        response = HttpResponseRedirect(forward_url + \"?rid=\" + str(current_reservation.id))\n    return response", "func_src_after": "def add_article_action(request: HttpRequest, default_foreward_url: str):\n    forward_url: str = default_foreward_url\n    if request.GET.get(\"redirect\"):\n        forward_url = request.GET[\"redirect\"]\n    else:\n        forward_url = \"/admin\"\n    if \"rid\" not in request.GET:\n        return HttpResponseRedirect(\"/admin?error=Missing%20reservation%20id%20in%20request\")\n    u: Profile = get_current_user(request)\n    current_reservation = GroupReservation.objects.get(id=str(request.GET[\"rid\"]))\n    if current_reservation.createdByUser != u and u.rights < 2:\n        return HttpResponseRedirect(\"/admin?error=noyb\")\n    if current_reservation.submitted == True:\n        return HttpResponseRedirect(\"/admin?error=Already%20submitted\")\n    # Test for multiple or single article\n    if \"article_id\" in request.POST:\n        # Actual adding of article\n        aid: int = int(request.GET.get(\"article_id\"))\n        quantity: int = int(request.POST[\"quantity\"])\n        notes: str = escape(request.POST[\"notes\"])\n        ar = ArticleRequested()\n        ar.AID = Article.objects.get(id=aid)\n        ar.RID = current_reservation\n        if \"srid\" in request.GET:\n            ar.SRID = SubReservation.objects.get(id=int(request.GET[\"srid\"]))\n        ar.amount = quantity\n        ar.notes = notes\n        ar.save()\n    # Actual adding of multiple articles\n    else:\n        if \"group_id\" not in request.GET:\n            return HttpResponseRedirect(\"/admin?error=missing%20group%20id\")\n        g: ArticleGroup = ArticleGroup.objects.get(id=int(request.GET[\"group_id\"]))\n        for art in Article.objects.all().filter(group=g):\n            if str(\"quantity_\" + str(art.id)) not in request.POST or str(\"notes_\" + str(art.id)) not in request.POST:\n                return HttpResponseRedirect(\"/admin?error=Missing%20article%20data%20in%20request\")\n            amount = int(request.POST[\"quantity_\" + str(art.id)])\n            if amount > 0:\n                ar = ArticleRequested()\n                ar.AID = art\n                ar.RID = current_reservation\n                ar.amount = amount\n                if \"srid\" in request.GET:\n                    ar.SRID = SubReservation.objects.get(id=int(request.GET[\"srid\"]))\n                ar.notes = escape(str(request.POST[str(\"notes_\" + str(art.id))]))\n                ar.save()\n    if \"srid\" in request.GET:\n        response = HttpResponseRedirect(forward_url + \"?rid=\" + str(current_reservation.id) + \"&srid=\" + request.GET[\"srid\"])\n    else:\n        response = HttpResponseRedirect(forward_url + \"?rid=\" + str(current_reservation.id))\n    return response", "line_changes": {"deleted": [{"line_no": 20, "char_start": 954, "char_end": 997, "line": "        notes: str = request.POST[\"notes\"]\n"}, {"line_no": 45, "char_start": 2195, "char_end": 2269, "line": "                ar.notes = str(request.POST[str(\"notes_\" + str(art.id))])\n"}], "added": [{"line_no": 20, "char_start": 954, "char_end": 1005, "line": "        notes: str = escape(request.POST[\"notes\"])\n"}, {"line_no": 45, "char_start": 2203, "char_end": 2285, "line": "                ar.notes = escape(str(request.POST[str(\"notes_\" + str(art.id))]))\n"}]}, "char_changes": {"deleted": [], "added": [{"char_start": 975, "char_end": 982, "chars": "escape("}, {"char_start": 1003, "char_end": 1004, "chars": ")"}, {"char_start": 2230, "char_end": 2237, "chars": "escape("}, {"char_start": 2282, "char_end": 2283, "chars": ")"}]}, "commit_link": "github.com/Technikradio/C3FOCSite/commit/6e330d4d44bbfdfce9993dffea97008276771600", "file_name": "c3shop/frontpage/management/reservation_actions.py", "vul_type": "cwe-079"}
